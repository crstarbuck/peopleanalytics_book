chisq$lines <- with(chisq, reorder(lines, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = lines)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::guides(col = guide_legend("Degrees of Freedom")) +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
lines = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$lines <- with(chisq, reorder(lines, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = lines)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::guides(col = guide_legend("Degrees of Freedom")) +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
lines = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$lines <- with(chisq, reorder(lines, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = lines)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
lines = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$lines <- with(chisq, reorder(lines, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = lines)) +
ggplot2::labs(x = "x", y = "Density") +
theme(legend.title=element_blank()) +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
lines = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$lines <- with(chisq, reorder(lines, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = lines)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::guides(col = guide_legend("df")) +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
lines = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$lines <- with(chisq, reorder(lines, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = lines)) +
ggplot2::labs(x = "x", y = "Density") +
scale_fill_discrete(name = NULL) +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$lines <- with(chisq, reorder(lines, dens))
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$df <- with(chisq, reorder(lines, dens))
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$df <- with(chisq, reorder(df, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = df)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$df <- with(chisq, reorder(df, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = df)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
View(employees)
# Create contingency table
cont_tbl <- table(employees$active, employees$gender)
chisq.test(cont_tbl)
chisq.test(employees$active, employees$gender)
cont_tbl
# Perform chi-square test of independence
chisq.test(cont_tbl)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/discrete_differences_test_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/discrete_differences_test_table.png")
# Perform Fisher's exact test
fisher.test(cont_tbl)
library("graphics")
mosaicplot(cont_tbl, shade = TRUE, las=2,
main = "gender")
library("graphics")
mosaicplot(cont_tbl, shade = TRUE,
main = "gender")
# Create contingency table
cont_tbl <- table(employees$active, employees$overtime)
cont_tbl
# Perform chi-square test of independence
chisq.test(cont_tbl)
library("graphics")
mosaicplot(cont_tbl, shade = TRUE, las=2,
main = "overtime")
# Load library for mosaic plot
library("graphics")
# Build mosaic plot of contingency table residuals
mosaicplot(cont_tbl, shade = TRUE,
main = "overtime")
# Load library for mosaic plot
library("graphics")
# Build mosaic plot of contingency table residuals
mosaicplot(cont_tbl, shade = TRUE, las = 3,
main = "overtime")
# Load library for mosaic plot
library("graphics")
# Build mosaic plot of contingency table residuals
mosaicplot(cont_tbl, shade = TRUE, xlab = NULL, ylab = NULL)
nrow(employees)
length(employees[employees$overtime == 'Yes', ])
length(employees[employees$active == 'Yes', ])
nrow(employees[employees$active == 'Yes', ])
nrow(employees[employees$active == 'No', ])
# Load library for mosaic plot
library("graphics")
# Build mosaic plot of contingency table residuals
mosaicplot(cont_tbl, shade = TRUE, xlab = "Overtime", ylab = "Active")
# Load library for mosaic plot
library("graphics")
# Build mosaic plot of contingency table residuals
mosaicplot(cont_tbl, shade = TRUE, main = NULL, xlab = "Overtime", ylab = "Active")
# Perform chi-square test of independence
chisq.test(cont_tbl)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/ww2_plane_damage.png")
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$df <- with(chisq, reorder(df, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = df)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Create contingency table
cont_tbl <- table(employees$active, employees$overtime)
cont_tbl
# Load library for mosaic plot
library("graphics")
# Build mosaic plot of contingency table residuals
mosaicplot(cont_tbl, shade = TRUE, main = NULL, xlab = "Overtime", ylab = "Active")
# Perform chi-square test of independence
chisq.test(cont_tbl)
# Calculate the Phi Coefficient
psych::phi(cont_tbl)
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Order data by df for plotting
chisq$df <- with(chisq, reorder(df, dens))
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:1000000, df = 5), rchisq(1:1000000, df = 10), rchisq(1:1000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 1000000))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = df)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:10000000, df = 5), rchisq(1:10000000, df = 10), rchisq(1:10000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 10000000))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = df)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Order data by df for plotting
chisq$df <- with(chisq, reorder(df, dens))
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:10000000, df = 5), rchisq(1:10000000, df = 10), rchisq(1:10000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 10000000))
# Order data by df for plotting
chisq$df <- with(chisq, reorder(df, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = df)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/scientific_method.png")
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:10000000, df = 5), rchisq(1:10000000, df = 10), rchisq(1:10000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 10000000))
# Order data by df for plotting
chisq$df <- with(chisq, reorder(df, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = df)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Create contingency table
cont_tbl <- table(employees$active, employees$overtime)
cont_tbl
# Load library for mosaic plot
library("graphics")
# Build mosaic plot of contingency table residuals
mosaicplot(cont_tbl, shade = TRUE, main = NULL, xlab = "Overtime", ylab = "Active")
# Perform chi-square test of independence
chisq.test(cont_tbl)
# Calculate the Phi Coefficient
psych::phi(cont_tbl)
# Load library for Cramer's V
library(rcompanion)
install.packages("rcompanion", dependencies = TRUE)
# Load library for Cramer's V
library(rcompanion)
library('rcompanion')
?cramerV
install.packages("rcompanion")
library(rcompanion)
library(rcompanion)
?cramer
cramer(cont_tbl)
# Perform Cohen's d
effsize::cohen.d()
# Load library for effect size functions
library(effsize)
# Perform Cohen's d
effsize::cohen.d()
# Load library for effect size functions
library(effsize)
# Perform Cohen's d
effsize::cohen.d(comp_mgr, comp_rsci)
# Create compensation vectors for two jobs
comp_mgr <- unlist(subset(employees, job_title == 'Manager', select = annual_comp))
comp_rsci <- unlist(subset(employees, job_title == 'Research Scientist', select = annual_comp))
# Run Welch's t-test
t.test(comp_mgr, comp_rsci)
# This assigns each element of results from Welch's t-test to an indexed position in the object
t_rslts <- t.test(comp_mgr, comp_rsci)
t_rslts$statistic # t-statistic
t_rslts$parameter # df
t_rslts$p.value # p-value
t_rslts$method # type of t-test
# Load library for effect size functions
library(effsize)
# Perform Cohen's d
effsize::cohen.d(comp_mgr, comp_rsci)
# Create dummy-coded promotion variable
employees$promo <- ifelse(employees$last_promo == 1, 1, 0)
# Create numeric engagement vectors for promo groups
no_promo <- unlist(subset(employees, promo == 0, select = engagement))
promo <- unlist(subset(employees, promo == 1, select = engagement))
# Perform the Mann-Whitney U (aka Wilcoxon rank sum) test
wilcox.test(no_promo, promo)
# Run Cliff's Delta
effsize::cliff.delta(no_promo, promo)
# Perform Cohen's d
effsize::cohen.d(treat_metrics$post_ind, treat_metrics$pre_ind, paired = TRUE)
# Load library
library(ggpubr)
# Calculate pre/post differences
treat_metrics$diff <- treat_metrics$post_ind - treat_metrics$pre_ind
# Set seed for reproducible results
set.seed(1234)
# Derive happiness index from survey variables
employees$happiness_ind <- (employees$engagement + employees$env_sat + employees$job_sat + employees$rel_sat) / 4
# Sample size of frequent travelers
n = nrow(subset(employees, business_travel == 'Travel_Frequently', select = employee_id))
# Randomly assign half of frequent travelers to treatment and control groups
treat_ids <- sample(unlist(subset(employees, business_travel == 'Travel_Frequently', select = employee_id)), floor(n * .5))
ctrl_ids <- unlist(subset(employees, business_travel == 'Travel_Frequently' & !employee_id %in% treat_ids, select = employee_id))
# Initialize dfs for pre/post metrics
treat_metrics = data.frame(pre_ind = numeric(length(treat_ids)),
rand_num = rnorm(length(treat_ids), mean = 15, sd = 5) * .001,
post_ind = numeric(length(treat_ids)),
diff = numeric(length(treat_ids)))
ctrl_metrics = data.frame(pre_ind = numeric(length(ctrl_ids)),
rand_num = rnorm(length(ctrl_ids), mean = 0, sd = 1) * .001,
post_ind = numeric(length(ctrl_ids)),
diff = numeric(length(ctrl_ids)))
# Store happiness indices for treatment and control groups
treat_metrics$pre_ind <- unlist(subset(employees, employee_id %in% treat_ids, select = happiness_ind))
ctrl_metrics$pre_ind <- unlist(subset(employees, employee_id %in% ctrl_ids, select = happiness_ind))
# Create vectors with artificially inflated post-intervention happiness indices
treat_metrics$post_ind <- treat_metrics$pre_ind + treat_metrics$rand_num
ctrl_metrics$post_ind <- ctrl_metrics$pre_ind + ctrl_metrics$rand_num
# Force an upper bound of 4 to adjusted index scores (variables were measured using a 4-point Likert scale)
treat_metrics$post_ind <- if(treat_metrics$post_ind > 4) {4} else {treat_metrics$post_ind}
ctrl_metrics$post_ind <- if(ctrl_metrics$post_ind > 4) {4} else {ctrl_metrics$post_ind}
# Load library
library(ggpubr)
# Calculate pre/post differences
treat_metrics$diff <- treat_metrics$post_ind - treat_metrics$pre_ind
ctrl_metrics$diff <- ctrl_metrics$post_ind - ctrl_metrics$pre_ind
# Histogram for distribution of pre/post treatment group differences
p_treat <- ggplot2::ggplot() +
ggplot2::aes(treat_metrics$diff) +
ggplot2::labs(title = "Treatment Group", x = "Happiness Index Differences", y = "Frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Histogram for distribution of pre/post control group differences
p_ctrl <- ggplot2::ggplot() +
ggplot2::aes(ctrl_metrics$diff) +
ggplot2::labs(title = "Control Group", x = "Happiness Index Differences", y = "Frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display histograms side-by-side
ggpubr::ggarrange(p_treat, p_ctrl, ncol = 2, nrow = 1)
# Compute Shapiro-Wilk test of normality
shapiro.test(treat_metrics$diff)
shapiro.test(ctrl_metrics$diff)
# Perform Cohen's d
effsize::cohen.d(treat_metrics$post_ind, treat_metrics$pre_ind, paired = TRUE)
mean(treat_metrics$post_ind)
mean(treat_metrics$pre_ind)
# Run Cliff's Delta
effsize::cliff.delta(treat_metrics$post_ind, treat_metrics$pre_ind, paired = TRUE)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/contingency_table.png")
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Load library
library(ggplot2)
# Sample from chi-square distribution for various df
chisq <- data.frame(dens = c(rchisq(1:10000000, df = 5), rchisq(1:10000000, df = 10), rchisq(1:10000000, df = 15)),
df = rep(c("df = 5", "df = 10", "df = 15"), each = 10000000))
# Order data by df for plotting
chisq$df <- with(chisq, reorder(df, dens))
# Plot chi-square distributions
ggplot2::ggplot(chisq, aes(x = dens, fill = df)) +
ggplot2::labs(x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("#0099FF", "0066FF", "0033FF")) +
ggplot2::theme_bw()
# Load library
library(dplyr)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill standard deviation vector
sds <- c(25, 50, 75)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 120, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
# Subset data
data <- subset(employees, job_title %in% c('Manager', 'Research Scientist'), select = c(annual_comp, job_title))
# Produce boxplots to visualize compensation distribution by job title
ggplot2::ggplot(data, aes(x = as.factor(job_title), y = annual_comp, color = job_title)) +
ggplot2::labs(x = "Job Title", y = "Annual Compensation") +
ggplot2::guides(col = guide_legend("Job Title")) +
ggplot2::theme_bw() +
ggplot2::geom_boxplot()
?shapiro.test
# Compute Shapiro-Wilk test of normality
shapiro.test(subset(employees, job_title == 'Manager', select = annual_comp))
# Compute Shapiro-Wilk test of normality
shapiro.test(unlist(subset(employees, job_title == 'Manager', select = annual_comp)))
shapiro.test(unlist(subset(employees, job_title == 'Research Scientist', select = annual_comp)))
# Compute Shapiro-Wilk test of normality
with(employees, shapiro.test(annual_comp[job_title == 'Manager']))
# Compute Shapiro-Wilk test of normality for each group
with(employees, shapiro.test(annual_comp[job_title == 'Manager']))
with(employees, shapiro.test(annual_comp[job_title == 'Research Scientist']))
# Compute Shapiro-Wilk test of normality for each group
with(employees, shapiro.test(annual_comp[job_title == 'Manager']))
View(employees)
unique(employees$job_title)
# Compute Shapiro-Wilk test of normality for each group
with(employees, shapiro.test(annual_comp[job_title == 'Manager']))
# Compute Shapiro-Wilk test of normality for each group
with(employees, shapiro.test(annual_comp[job_title == 'Sales Representative']))
# Compute Shapiro-Wilk test of normality for each group
with(employees, shapiro.test(annual_comp[job_title == 'Manufacturing Director']))
# Compute Shapiro-Wilk test of normality for each group
with(employees, shapiro.test(annual_comp[job_title == 'Healthcare Representative']))
# Compute Shapiro-Wilk test of normality for each group
with(employees, shapiro.test(annual_comp[job_title == 'Healthcare Representative']))
with(employees, shapiro.test(annual_comp[job_title == 'Research Scientist']))
# Compute Shapiro-Wilk test of normality for each group
with(employees, shapiro.test(annual_comp[job_title == 'Manager']))
with(employees, shapiro.test(annual_comp[job_title == 'Research Scientist']))
# Set seed for reproducible results
set.seed(1234)
# Derive happiness index from survey variables
employees$happiness_ind <- (employees$engagement + employees$env_sat + employees$job_sat + employees$rel_sat) / 4
# Sample size of frequent travelers
n = nrow(subset(employees, business_travel == 'Travel_Frequently', select = employee_id))
# Randomly assign half of frequent travelers to treatment and control groups
treat_ids <- sample(unlist(subset(employees, business_travel == 'Travel_Frequently', select = employee_id)), floor(n * .5))
ctrl_ids <- unlist(subset(employees, business_travel == 'Travel_Frequently' & !employee_id %in% treat_ids, select = employee_id))
# Initialize dfs for pre/post metrics
treat_metrics = data.frame(pre_ind = numeric(length(treat_ids)),
rand_num = rnorm(length(treat_ids), mean = 15, sd = 5) * .001,
post_ind = numeric(length(treat_ids)),
diff = numeric(length(treat_ids)))
ctrl_metrics = data.frame(pre_ind = numeric(length(ctrl_ids)),
rand_num = rnorm(length(ctrl_ids), mean = 0, sd = 1) * .001,
post_ind = numeric(length(ctrl_ids)),
diff = numeric(length(ctrl_ids)))
# Store happiness indices for treatment and control groups
treat_metrics$pre_ind <- unlist(subset(employees, employee_id %in% treat_ids, select = happiness_ind))
ctrl_metrics$pre_ind <- unlist(subset(employees, employee_id %in% ctrl_ids, select = happiness_ind))
# Create vectors with artificially inflated post-intervention happiness indices
treat_metrics$post_ind <- treat_metrics$pre_ind + treat_metrics$rand_num
ctrl_metrics$post_ind <- ctrl_metrics$pre_ind + ctrl_metrics$rand_num
# Force an upper bound of 4 to adjusted index scores (variables were measured using a 4-point Likert scale)
treat_metrics$post_ind <- if(treat_metrics$post_ind > 4) {4} else {treat_metrics$post_ind}
ctrl_metrics$post_ind <- if(ctrl_metrics$post_ind > 4) {4} else {ctrl_metrics$post_ind}
# Load library for Levene's test
library(car)
# Perform Levene's test for homogeneity of variance
car::leveneTest(happiness_ind ~ pre_ind, post_ind, data = treat_metrics)
View(treat_metrics)
?leveneTest
# Perform Levene's test for homogeneity of variance
car::leveneTest(treat_metrics$pre_ind, treat_metrics$post_ind)
