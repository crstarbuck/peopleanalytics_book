AVG(org_tenure > 8)
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
demographics
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(*) > 20)
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
demographics
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(employee_id) > 20)
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
demographics
WHERE
team = 'Social Marketing'
GROUP BY
job_title
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
demographics
WHERE
team = 'Social Marketing'
GROUP BY
job_title
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
demographics
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
demographics
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Partition select columns into three data frames
job_df <- demgraphics[, c("employee_id", "job_title")]
tenure_df <- demgraphics[, c("employee_id", "org_tenure")]
team_df <- demgraphics[, c("employee_id", "team")]
# Partition select columns into three data frames
job_df <- demographics[, c("employee_id", "job_title")]
tenure_df <- demographics[, c("employee_id", "org_tenure")]
team_df <- demographics[, c("employee_id", "team")]
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
team_df
ON
job_df.employee_id = team_df.emeployee_id
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
team_df
ON
job_df.employee_id = team_df.employee_id
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
LEFT JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
LEFT JOIN
team_df
ON
job_df.employee_id = team_df.employee_id
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
LEFT JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
WHERE
job_df.employee_id IN (SELECT employee_id FROM team_df WHERE team = 'Social Marketing')
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
library(sqldf)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Load SQL library
library(sqldf)
# Read employee demographics data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Partition select columns into three data frames
job_df <- demographics[, c("employee_id", "job_title")]
tenure_df <- demographics[, c("employee_id", "org_tenure")]
team_df <- demographics[, c("employee_id", "team")]
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
LEFT JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
WHERE
job_df.employee_id IN (SELECT employee_id FROM team_df WHERE team = 'Social Marketing')
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
RANK(org_tenure) OVER (ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
ROW_NUM(org_tenure) OVER (ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
RANK(org_tenure) OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_title,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
employee_id,
job_title,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_df.employee_id,
job_df.job_title,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_df.employee_id,
job_df.job_title,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
ORDER BY
job_title,
org_tenure_rank")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
job_df.employee_id,
job_title,
org_tenure,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
ORDER BY
job_title,
org_tenure_rank")
# Execute SQL query
sqldf(sql_string)
