demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/files/employee_demographics.csv")
contrasts(demographics$gender
contrasts(demographics$gender)
contrasts(as.factor(demographics$gender))
View(demographics)
contrasts(as.factor(demographics$division))
model.matrix(~division, data = demographics)
model.matrix(~division-1, data = demographics)
head(onehot_ethnicity)
onehot_ethnicity <- model.matrix(~division-1, data = demographics)
head(onehot_ethnicity)
unique(demographics$division)
unique(demographics$gender)
# Gender one-hot encoding
onehot_ethnicity <- model.matrix(~division-1, data = demographics)
head(onehot_ethnicity)
# Count by division
demographics %>% count(division)
# Load library
library(dplyr)
# Count by division
demographics %>% count(division)
# Count by job
demographics %>% count(job_title)
# Count by location
demographics %>% count(location)
# Count by location
demographics %>% count(location) %>% sort(n)
# Count by location
demographics %>% count(location) %>% sort = TRUE
# Count by location
demographics %>% count(location, sort = TRUE)
# Division one-hot encoding
division_ohe <- model.matrix(~division-1, data = demographics[!demographics$division == 'Operations Center - St. Louis', ])
head(division_ohe)
# Location one-hot encoding
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == 'Operations Center - St. Louis', ])
head(location_ohe)
# Count by location
location_cnts <- demographics %>% count(location, sort = TRUE)
nrow(location_cnts)
# Count by location
locations <- demographics %>% count(location, sort = TRUE)
locations[nrow(location_cnts), ]
locations[nrow(location_cnts), "location"]
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
min_location <- locations[nrow(location_cnts), "location"]
# Location one-hot encoding, omitting category with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == min_location, ])
head(location_ohe)
# Gender one-hot encoding
demographics$gender_ohe <- ifelse(demographics$gender == 'Female', 1, 0)
head(demographics$gender_ohe)
head(demographics[, c("employee_id", "gender_ohe")])
# Return unique values of gender field
unique(demographics$gender)
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
# Store location with smallest n-count
min_location <- locations[nrow(location_cnts), "location"]
# Display location with smallest n-count
min_location
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
# Display counts by location
locations
# Store location with smallest n-count
min_location <- locations[nrow(location_cnts), "location"]
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == min_location, ])
head(location_ohe)
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == min_location, ])
head(location_ohe)
demographics <- cbind(location_ohe)
# Read employee demographics data
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/files/employee_demographics.csv")
# Gender one-hot encoding
demographics$gender_ohe <- ifelse(demographics$gender == 'Female', 1, 0)
# Preview records
head(demographics[, c("employee_id", "gender_ohe")])
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
# Display counts by location
locations
# Store location with smallest n-count
min_location <- locations[nrow(location_cnts), "location"]
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == min_location, ])
head(location_ohe)
demographics <- cbind(demographics, location_ohe)
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics)
head(location_ohe)
# Read employee demographics data
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/files/employee_demographics.csv")
# Return row and column counts
dim(demographics)
# Load library
library(dplyr)
# Load library
library(dplyr)
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
# Display counts by location
locations
# Store location with smallest n-count
min_location <- locations[nrow(locations), "location"]
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == min_location, ])
View(location_ohe)
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
# Display counts by location
locations
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics)
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
# Display counts by location
locations
# Store location with smallest n-count
min_location <- locations[nrow(locations), "location"]
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics)
test <- cbind(demographics, location_ohe)
head(location_ohe)
View(test)
# Combine demographics and matrix containing one-hot encoded locations
demographics <- cbind(demographics, location_ohe)
# Preview data
head(location_ohe)
?model.matrix
# Determine location with lowest n-count
demographics %>% count(location, sort = TRUE)
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics)
View(location_ohe)
test <- model.matrix(~location, data = demographics)
View(test)
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics)
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics)
# Combine demographics and matrix containing one-hot encoded locations
demographics <- cbind(demographics, location_ohe[,-1])
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location, data = demographics)
# Return counts by location
demographics %>% count(location, sort = TRUE)
# Read employee demographics data
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/files/employee_demographics.csv")
# Return counts by location
demographics %>% count(location, sort = TRUE)
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location, data = demographics)
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics)
# Return counts by location
demographics %>% count(location, sort = TRUE)
location_ohe <- model.matrix(~location, data = demographics)
# Location one-hot encoding
location_ohe <- model.matrix(~location-1, data = demographics)
# Preview data
head(location_ohe)
# Location one-hot encoding
location_ohe <- model.matrix(~location-1, data = demographics)
# Preview data
head(location_ohe)
View(demographics)
colSums(location_ohe)
# Sum each location column
v1 <- colSums(location_ohe)
m[, -which.min(colSums(m))]
location_ohe[, -which.min(colSums(location_ohe))]
# Sum each location column
v1 <- colSums(location_ohe)
v1
# Drop location with lowest sum (lowest n-count)
location_ohe <- location_ohe[, -which.min(colSums(location_ohe))]
# Combine demographics and matrix containing one-hot encoded locations
demographics <- cbind(demographics, location_ohe)
demographics[, -location]
demographics[, -"location"]
subset(demographics, select = -location)
View(demographics)
# Drop original location field
demographics <- subset(demographics, select = -c(location))
d
# Read employee demographics data
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/files/employee_demographics.csv")
model.matrix(~business_unit, data = demographics)
test = model.matrix(~business_unit, data = demographics)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/dw_schema.png")
# Create and fill matrix with numbers
mtrx_num <- matrix(1:10, 5, 2)
mtrx_num
matrix(1:10000, 5, 2)
matrix(1:10000, 1000, 10)
# Return the number of columns and rows in mtrx_num
head(matrix(1:10000, 1000, 10))
# Return the number of columns and rows in mtrx_num
tail(matrix(1:10000, 1000, 10))
head(1:100000)
?head
# Return the first five rows of the matrix
head(matrix(1:10000, 1000, 10), 5)
# Return the last five rows of the matrix
tail(matrix(1:10000, 1000, 10), 5)
# Create three vectors containing integers (x), characters (y), and dates (z)
x <- 1:10
y <- c('a','b','c','d','e','f','g','h','i','j')
z <- seq(as.Date("2021-01-01"), as.Date("2021-10-01"), by = 'months')
# Create a data frame with 3 columns (vectors x, y, and z) and 10 rows
df <- data.frame(x, y, z)
df
# Describe the structure of df
str(df)
# Return data in column x in df
df$x
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/sql_joins.jpeg")
# Load SQL library
library(sqldf)
# Load data sets
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
status <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/status.csv")
benefits <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/benefits.csv")
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/demographics.csv")
job <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/job.csv")
payroll <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/payroll.csv")
performance <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/performance.csv")
prior_employment <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/prior_employment.csv")
survey_response <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/survey_response.csv")
tenure <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/tenure.csv")
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
employee_id
FROM
employees
WHERE
department = 'Research & Development'
LIMIT 10")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
AVG(years_at_company)
FROM
employees
WHERE
department = 'Research & Development'
GROUP BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(years_at_company) AS avg_org_tenure
FROM
employees
WHERE
department = 'Research & Development'
GROUP BY
job_title
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(years_at_company) AS avg_org_tenure
FROM
employees
WHERE
department = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/sql_joins.png")
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(years_at_company) AS avg_org_tenure,
AVG(commute_distance) AS avg_commute_dist
FROM
demographics
INNER JOIN
tenure
ON
demographics.employee_id = tenure.employee_id
INNER JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
department = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(years_at_company) AS avg_org_tenure,
AVG(commute_distance) AS avg_commute_dist
FROM
demographics
LEFT JOIN
tenure
ON
demographics.employee_id = tenure.employee_id
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
department = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Load tidyverse
library(tidyverse)
# Load tidyverse
library(tidyverse)
employees <- list(demographics,
status,
benefits,
job,
payroll,
performance,
prior_employment,
survey_response,
tenure) %>%
reduce(left_join, by = "employee_id")
# Store SQL query as a character string
# Note: Since employee_id exists in multiple data sets, we must name a specific data set when referencing it
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(commute_distance) AS avg_commute_dist
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
demographics.employee_id IN (SELECT employee_id FROM tenure WHERE years_at_company > 1)
AND
department = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(commute_distance) AS avg_commute_dist
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
INNER JOIN
(SELECT employee_id FROM tenure WHERE years_at_company > 1) ids
ON
demographics.employee_id = ids.employee_id
WHERE
department = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
# Limit output to 10 records since query does not collapse records
sql_string <- paste("SELECT
demographics.employee_id,
job_title,
commute_distance,
RANK () OVER (PARTITION BY job_title ORDER BY commute_distance DESC) AS commute_dist_rank
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
INNER JOIN
(SELECT employee_id FROM tenure WHERE years_at_company > 1) ids
ON
demographics.employee_id = ids.employee_id
WHERE
department = 'Research & Development'
ORDER BY
job_title,
commute_dist_rank
LIMIT 10")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
DISTINCT(job_title) AS job_title,
COUNT(*) AS employee_count,
commute_distance
FROM
(SELECT
demographics.employee_id,
job_title,
commute_distance,
RANK () OVER (PARTITION BY job_title ORDER BY commute_distance DESC) AS commute_dist_rank
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
INNER JOIN
(SELECT employee_id FROM tenure WHERE years_at_company > 1) ids
ON
demographics.employee_id = ids.employee_id
WHERE
department = 'Research & Development'
ORDER BY
job_title,
commute_dist_rank) tbl
WHERE
tbl.commute_dist_rank = 1
GROUP BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Summarize df
summary(employees)
# Store original annual comp for sample employee
orig_comp <- employees[employees$employee_id == '2176', 'annual_comp']
# Force a NA in lieu of annual comp for illustrative purposes
employees[employees$employee_id == '2176', 'annual_comp'] <- NA
# Return relevant employee characteristics where annual comp is missing
employees[is.na(employees$annual_comp), c("employee_id", "job_title", "job_level")]
# Return average annual comp for employees with similar characteristics, excluding employees with missing comp values
imputed_comp <- mean(employees[employees$job_title == 'Manufacturing Director' & employees$job_level == 2, 'annual_comp'], na.rm = TRUE)
# Impute missing comp for relevant segment
employees[employees$employee_id == '2176', 'annual_comp'] <- imputed_comp
# Display absolute difference between original and imputed comp
abs(orig_comp - employees[employees$employee_id == '2176', 'annual_comp'])
summary(employees)
summary(employees$standard_hours)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/onehot_encoding.png")
# Return unique values of gender field
unique(employees$gender)
# Gender one-hot encoding
employees$gender_ohe <- ifelse(employees$gender == 'Female', 1, 0)
# Preview records
head(employees[, c("employee_id", "gender_ohe")])
# Return counts by department
employees %>% count(department, sort = TRUE)
# Department one-hot encoding
department_ohe <- model.matrix(~department-1, data = employees)
# Preview data
head(department_ohe)
# Drop department with lowest sum (lowest n-count)
department_ohe <- department_ohe[, -which.min(colSums(department_ohe))]
# Combine employees and matrix containing one-hot encoded departments
employees <- cbind(employees, department_ohe)
# Drop original department field
employees <- subset(employees, select = -c(department))
# Preview refined one-hot encoded data
head(department_ohe)
