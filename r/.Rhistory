ggqqplot(residuals(model))
# Load library for normality plots
library(ggpubr)
# Load library for normality plots
library(ggpubr)
# Build the linear model
model  <- lm(annual_comp ~ job_sat, data = employees)
# Build the linear model
model  <- lm(annual_comp ~ job_sat, data = employees)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
qqplot(model)
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
?shapiro.test
# Compute Shapiro-Wilk test of normality
shapiro.test(residuals(model))
# Build a linear model
model <- lm(log(annual_comp) ~ job_sat, data = employees)
# Create a Q-Q plot of residuals
ggqqplot(residuals(model))
# Build a linear model
model <- lm(sqrt(annual_comp) ~ job_sat, data = employees)
# Create a Q-Q plot of residuals
ggqqplot(residuals(model))
# Build a linear model
model <- lm(log10(annual_comp) ~ job_sat, data = employees)
# Create a Q-Q plot of residuals
ggqqplot(residuals(model))
# Build a linear model
model <- lm(annual_comp ~ job_sat, data = employees)
# Create a Q-Q plot of residuals
ggqqplot(residuals(model))
plot(employees$annual_comp)
hist(employees$annual_comp)
hist(sqrt(employees$annual_comp))
hist(log(employees$annual_comp))
residuals(model)
# Build a linear model
model <- lm(log(annual_comp) ~ job_sat, data = employees)
# Create a Q-Q plot of residuals
ggqqplot(residuals(model))
?log
# Build a linear model using the natural logarithm of annual comp
model <- lm(log(annual_comp) ~ log(job_sat), data = employees)
# Create a Q-Q plot of residuals
ggqqplot(residuals(model))
# Build a linear model using the natural logarithm of annual comp
ln.model <- lm(log(annual_comp) ~ job_sat, data = employees)
# Build a linear model using the log base 10 of annual comp
log10.model <- lm(log10(annual_comp) ~ job_sat, data = employees)
# Build a linear model using the square root of annual comp
sqrt.model <- lm(sqrt(annual_comp) ~ job_sat, data = employees)
# Store Q-Q plots to viz objects
ln.viz <- ggpubr::ggqqplot(residuals(ln.model))
log10.viz <- ggpubr::ggqqplot(residuals(log10.model))
sqrt.viz <- ggpubr::ggqqplot(residuals(sqrt.model))
# Display Q-Q plots of residuals
ggpubr::ggarrange(ln.viz, log10.viz, sqrt.viz,
ncol = 3, nrow = 2)
# Display Q-Q plots of residuals
ggpubr::ggarrange(ln.viz, log10.viz, sqrt.viz,
ncol = 3, nrow = 1)
# Store Q-Q plots to viz objects
ln.viz <- ggpubr::ggqqplot(residuals(ln.model)) + ggtitle("Plot of length \n by dose")
# Display Q-Q plots of residuals
ggpubr::ggarrange(ln.viz, log10.viz, sqrt.viz,
ncol = 3, nrow = 1)
# Store Q-Q plots to viz objects
ln.viz <- ggpubr::ggqqplot(residuals(ln.model)) + ggtitle("Natural Log Transformation")
# Display Q-Q plots of residuals
ggpubr::ggarrange(ln.viz, log10.viz, sqrt.viz,
ncol = 3, nrow = 1)
log10.viz <- ggpubr::ggqqplot(residuals(log10.model)) + ggtitle("Log Base 10 Transformation")
sqrt.viz <- ggpubr::ggqqplot(residuals(sqrt.model)) + ggtitle("Square Root Transformation")
# Display Q-Q plots of residuals
ggpubr::ggarrange(ln.viz, log10.viz, sqrt.viz,
ncol = 3, nrow = 1)
# Store Q-Q plots to viz objects
ln.viz <- ggpubr::ggqqplot(residuals(ln.model)) + ggtitle("Natural Log")
log10.viz <- ggpubr::ggqqplot(residuals(log10.model)) + ggtitle("Log Base 10")
sqrt.viz <- ggpubr::ggqqplot(residuals(sqrt.model)) + ggtitle("Square Root")
# Display Q-Q plots of residuals
ggpubr::ggarrange(ln.viz, log10.viz, sqrt.viz,
ncol = 3, nrow = 1)
View(log10.model)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
unique(employees$job_sat)
unique(sort(employees$job_sat))
subset(employees, job_sat == 1, select = annual_comp)
# Create function to visualize distribution
dist.viz <- function(df, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Call UDF to build visualizations and store to objects
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = subset(employees, job_sat == x, select = annual_comp), x = x)
}
p_viz = list()
# Call UDF to build visualizations and store to objects
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = subset(employees, job_sat == x, select = annual_comp), x = x)
}
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
p_viz = list()
# Call UDF to build visualizations and store to objects
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = subset(employees, job_sat == x, select = annual_comp), x = x)
}
library(ggplot2)
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
p_viz = list()
# Call UDF to build visualizations and store to objects
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = subset(employees, job_sat == x, select = annual_comp), x = x)
}
View(p_viz)
# Display distribution visualizations
ggpubr::ggarrange(p_viz[[1]], p_viz[[2]], p_viz[[3]], p_viz[[4]],
ncol = 2, nrow = 2)
p_viz[[1]]
p_viz_1 <- dist.viz(data = subset(employees, job_sat == 1, select = annual_comp), x = 1)
# Display distribution visualizations
ggpubr::ggarrange(p_viz_1,
ncol = 2, nrow = 2)
dist.viz(data = subset(employees, job_sat == 1, select = annual_comp), x = 1)
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
p_viz_1 <- dist.viz(data = subset(employees, job_sat == 1, select = annual_comp), x = 1)
p_viz_1
x=1
paste("Job Sat = ", x)
library(ggpubr)
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Initialize empty list object
p_viz = list()
p_viz_1 <- dist.viz(data = subset(employees, job_sat == 1, select = annual_comp), x = 1)
# Call UDF to build visualizations and store to objects
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = subset(employees, job_sat == x, select = annual_comp), x = x)
}
# Display distribution visualizations
ggpubr::ggarrange(p_viz_1,
ncol = 2, nrow = 2)
# Display distribution visualizations
ggpubr::ggarrange(p_viz_1,
ncol = 1, nrow = 1)
p_viz_1 <- dist.viz(data = subset(employees, job_sat == 1, select = annual_comp), x = 1)
plot(p_viz_1)
# Display distribution visualizations
ggpubr::ggarrange(unlist(p_viz_1),
ncol = 2, nrow = 2)
test = subset(employees, job_sat == 1, select = annual_comp)
mode(test)
class(test)
str(test)
ggplot2::ggplot() +
ggplot2::aes(subset(employees, job_sat == x, select = annual_comp)) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot() +
ggplot2::aes(employees) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot() +
ggplot2::aes(unlist(employees)) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot() +
ggplot2::aes(unlist(subset(employees, job_sat == x, select = annual_comp))) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to objects
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Display distribution visualizations
ggpubr::ggarrange(p_viz[[1]], p_viz[[2]], p_viz[[3]], p_viz[[4]],
ncol = 2, nrow = 2)
unique(sort(employees$job_sat)
unique(sort(employees$job_sat))
subset(employees, job_sat == 1, select = annual_comp)
length(subset(employees, job_sat == 1, select = annual_comp))
nrow(subset(employees, job_sat == 1, select = annual_comp))
nrow(subset(employees, job_sat == 2, select = annual_comp))
nrow(subset(employees, job_sat == 3, select = annual_comp))
nrow(subset(employees, job_sat == 4, select = annual_comp))
# Display distribution visualizations
ggpubr::ggarrange(p_viz[[1]], p_viz[[2]], p_viz[[3]], p_viz[[4]],
ncol = 2, nrow = 2)
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
print(nrow(data))
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
print(length(data))
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Display distribution visualizations
ggpubr::ggarrange(p_viz[[1]], p_viz[[2]], p_viz[[3]], p_viz[[4]],
ncol = 2, nrow = 2)
hist(unlist(subset(employees, job_sat == x, select = annual_comp)))
unlist(subset(employees, job_sat == 1, select = annual_comp))
hist(unlist(subset(employees, job_sat == 1, select = annual_comp)))
hist(unlist(subset(employees, job_sat == 2, select = annual_comp)))
unlist(subset(employees, job_sat == 3, select = annual_comp))
hist(unlist(subset(employees, job_sat == 3, select = annual_comp)))
hist(unlist(subset(employees, job_sat == 4, select = annual_comp)))
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat = x, select = annual_comp)), x = x)
}
# Display distribution visualizations
ggpubr::ggarrange(p_viz[[1]], p_viz[[2]], p_viz[[3]], p_viz[[4]],
ncol = 2, nrow = 2)
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Display distribution visualizations
ggpubr::ggarrange(p_viz[[1]], p_viz[[2]], p_viz[[3]], p_viz[[4]],
ncol = 2, nrow = 2)
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
print(x)
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
print(length(unlist(subset(employees, job_sat == x, select = annual_comp))))
}
# Create function to visualize distribution
dist.viz <- function(data, x) {
#viz <- ggplot2::ggplot() +
#       ggplot2::aes(data) +
#       ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
#       ggplot2::geom_histogram(fill = "#414141") +
#       ggplot2::theme_bw() +
#       ggplot2::theme(plot.title = element_text(hjust = 0.5))
hist(data)
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Create function to visualize distribution
dist.viz <- function(data, x) {
#viz <- ggplot2::ggplot() +
#       ggplot2::aes(data) +
#       ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
#       ggplot2::geom_histogram(fill = "#414141") +
#       ggplot2::theme_bw() +
#       ggplot2::theme(plot.title = element_text(hjust = 0.5))
viz = hist(data)
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Display distribution visualizations
ggpubr::ggarrange(p_viz[[1]], p_viz[[2]], p_viz[[3]], p_viz[[4]],
ncol = 2, nrow = 2)
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot(data) +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot(data, aes(data)) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Initialize empty list object
p_viz = list()
# Call UDF to build visualizations and store to x-th slot of list
for (x in unique(sort(employees$job_sat))){
p_viz[[x]] <- dist.viz(data = unlist(subset(employees, job_sat == x, select = annual_comp)), x = x)
}
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
viz_1 <- dist.viz(data = unlist(subset(employees, job_sat == 1, select = annual_comp)), x = x)
viz_2 <- dist.viz(data = unlist(subset(employees, job_sat == 2, select = annual_comp)), x = x)
viz_3 <- dist.viz(data = unlist(subset(employees, job_sat == 3, select = annual_comp)), x = x)
viz_4 <- dist.viz(data = unlist(subset(employees, job_sat == 4, select = annual_comp)), x = x)
ggpubr::ggarrange(viz_1, viz_2, viz_3, viz_4,
ncol = 2, nrow = 2)
# Call UDF to build visualizations and store to objects
viz_1 <- dist.viz(data = unlist(subset(employees, job_sat == 1, select = annual_comp)), x = 1)
viz_2 <- dist.viz(data = unlist(subset(employees, job_sat == 2, select = annual_comp)), x = 2)
viz_3 <- dist.viz(data = unlist(subset(employees, job_sat == 3, select = annual_comp)), x = 3)
viz_4 <- dist.viz(data = unlist(subset(employees, job_sat == 4, select = annual_comp)), x = 4)
# Display distribution visualizations
ggpubr::ggarrange(viz_1, viz_2, viz_3, viz_4,
ncol = 2, nrow = 2)
# Load data viz library
library(ggplot2)
library(ggpubr)
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "annual comp", y = "frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Call UDF to build visualizations and store to objects
viz_1 <- dist.viz(data = unlist(subset(employees, job_sat == 1, select = annual_comp)), x = 1)
viz_2 <- dist.viz(data = unlist(subset(employees, job_sat == 2, select = annual_comp)), x = 2)
viz_3 <- dist.viz(data = unlist(subset(employees, job_sat == 3, select = annual_comp)), x = 3)
viz_4 <- dist.viz(data = unlist(subset(employees, job_sat == 4, select = annual_comp)), x = 4)
# Display distribution visualizations
ggpubr::ggarrange(viz_1, viz_2, viz_3, viz_4,
ncol = 2, nrow = 2)
# Build a linear model
model <- lm(annual_comp ~ job_sat, data = employees)
# Create a Q-Q plot of residuals
ggpubr::ggqqplot(residuals(model))
# Build a linear model
model <- lm(annual_comp ~ as.factor(job_sat), data = employees)
# Create a Q-Q plot of residuals
ggpubr::ggqqplot(residuals(model))
# Build a linear model
model <- lm(annual_comp ~ job_sat, data = employees)
# Create a Q-Q plot of residuals
ggpubr::ggqqplot(residuals(model))
# Build a linear model using the natural logarithm of annual comp
ln.model <- lm(log(annual_comp) ~ job_sat, data = employees)
# Build a linear model using the log base 10 of annual comp
log10.model <- lm(log10(annual_comp) ~ job_sat, data = employees)
# Build a linear model using the square root of annual comp
sqrt.model <- lm(sqrt(annual_comp) ~ job_sat, data = employees)
# Store Q-Q plots to viz objects
ln.viz <- ggpubr::ggqqplot(residuals(ln.model)) + ggtitle("Natural Log")
log10.viz <- ggpubr::ggqqplot(residuals(log10.model)) + ggtitle("Log Base 10")
sqrt.viz <- ggpubr::ggqqplot(residuals(sqrt.model)) + ggtitle("Square Root")
# Display Q-Q plots of residuals
ggpubr::ggarrange(ln.viz, log10.viz, sqrt.viz,
ncol = 3, nrow = 1)
View(test)
# Nonparametric Kruskal one-way ANOVA investigating median differences in annual comp by job satisfaction
kruskal.model <- kruskal.test(annual_comp ~ job_sat, data = employees)
summary(kruskal.model)
kruskal.test(annual_comp ~ job_sat, data = employees)
# Nonparametric Kruskal one-way ANOVA investigating median differences in annual comp by job satisfaction
kruskal.test(annual_comp ~ job_sat, data = employees)
pairwise.wilcox.test(employees$annual_comp, employees$job_sat, p.adjust.method = "BH")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/continuous_differences_test_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/discrete_differences_test_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/discrete_differences_test_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/discrete_differences_test_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/continuous_differences_test_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/continuous_differences_test_table.png")
