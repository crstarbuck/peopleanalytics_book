values = RColorBrewer::brewer.pal(5, "Dark2")) +
#ggplot2::scale_fill_manual(name = stage,
#                    values = c("#BA182A", "#FF8288", "#FFDBDD", "#FFDBDD", "#FFDBDD")) +
ggplot2::coord_equal() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
ndeep = 10
tb4waffles <- expand.grid(y = 1:ndeep,
x = seq_len(ceiling(sum(tb$ncases) / ndeep)))
tb <- structure(list(region = c("Africa", "Asia", "Latin America",
"Other", "US-born"), ncases = c(36L, 34L, 56L, 2L, 44L)), .Names = c("region",
"ncases"), row.names = c(NA, -5L), class = "data.frame")
tb
tb4waffles <- expand.grid(y = 1:ndeep,
x = seq_len(ceiling(sum(tb$ncases) / ndeep)))
View(tb4waffles)
ggplot(tb4waffles, aes(x = x, y = y, fill = region)) +
geom_tile(color = "white") + # The color of the lines between tiles
scale_fill_manual("Region of Birth",
values = RColorBrewer::brewer.pal(5, "Dark2")) +
opts(title = "TB Cases by Region of Birth")
ggplot(tb4waffles, aes(x = x, y = y, fill = region)) +
geom_tile(color = "white") + # The color of the lines between tiles
scale_fill_manual("Region of Birth",
values = RColorBrewer::brewer.pal(5, "Dark2"))
regionvec <- rep(tb$region, tb$ncases)
tb4waffles$region <- c(regionvec, rep(NA, nrow(tb4waffles) - length(regionvec)))
ggplot(tb4waffles, aes(x = x, y = y, fill = region)) +
geom_tile(color = "white") + # The color of the lines between tiles
scale_fill_manual("Region of Birth",
values = RColorBrewer::brewer.pal(5, "Dark2"))
# Set depth of waffle chart (y-axis rows)
depth <- 10
# I need to convert my data into a data.frame with a unique specified x
# and y axis for each case
# Note - it's actually important to specify y first for a
# horizontally-accumulating waffle
waffle_dat <- expand.grid(y = 1:depth,
x = seq_len(ceiling(sum(ta$cnt) / depth)))
# I need to convert my data into a data.frame with a unique specified x
# and y axis for each case
# Note - it's actually important to specify y first for a
# horizontally-accumulating waffle
waffle_dat <- expand.grid(y = 1:depth,
x = seq_len(ceiling(sum(ta_dat$cnt) / depth)))
# Expand the counts into a full vector of region labels - i.e., de-aggregate
stages <- rep(ta_dat$stage, ta_dat$cnt)
# Depending on the value of ndeep, there might be more spots on the x-y grid
# than there are cases - so fill those with NA
waffle_dat$stage <- c(stages, rep(NA, nrow(waffle_dat) - length(stages)))
View(waffle_dat)
# Plot it
ggplot(tb4waffles, aes(x = x, y = y, fill = stage)) +
geom_tile(color = "white") +
scale_fill_manual("Region of Birth",
values = RColorBrewer::brewer.pal(5, "Dark2")) +
# Produce waffle chart
ggplot2::ggplot(ta_dat, aes(x = stage, y = cnt, fill = stage)) +
ggplot2::geom_tile(color = "white", size = .25) +
ggplot2::scale_fill_manual("Region of Birth",
values = RColorBrewer::brewer.pal(5, "Dark2")) +
#ggplot2::scale_fill_manual(name = stage,
#                    values = c("#BA182A", "#FF8288", "#FFDBDD", "#FFDBDD", "#FFDBDD")) +
ggplot2::coord_equal() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot(tb4waffles, aes(x = x, y = y, fill = stage)) +
geom_tile(color = "white") +
scale_fill_manual("Region of Birth",
values = RColorBrewer::brewer.pal(5, "Dark2"))
# Plot it
ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
geom_tile(color = "white")
# Plot it
ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
geom_tile(color = "white")
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = c("#BA182A", "#FF8288", "#FFDBDD", "#FFDBDD", "#FFDBDD")) +
ggplot2::coord_equal() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::coord_equal() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
#ggplot2::coord_equal() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::coord_equal() +
ggplot2::coord_flip() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
#ggplot2::coord_equal() +
ggplot2::coord_flip() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::coord_flip() +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::scale_y_reverse() +
ggplot2::coord_flip() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::scale_y_reverse() +
#ggplot2::coord_flip() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
?scale_y_reverse
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::coord_flip() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
p = ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::coord_flip() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
p + ggplot2::scale_y_reverse()
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::coord_flip() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Create df with TA funnel metrics
ta_dat <- data.frame(stage = c("apply", "phone screen", "onsite", "offer extend", "offer accept"),
cnt = c(100, 20, 10, 6, 4))
# Set depth of waffle chart (y-axis rows)
depth <- 10
# Each observation needs an x and y coordinate, and y needs to be specified first for a horizontal-accumulating waffle
waffle_dat <- expand.grid(y = 1:depth,
x = seq_len(ceiling(sum(ta_dat$cnt) / depth)))
# Expand the counts into a full vector of region labels - i.e., de-aggregate
stages <- rep(ta_dat$stage, ta_dat$cnt)
# Depending on the value of ndeep, there might be more spots on the x-y grid
# than there are cases - so fill those with NA
waffle_dat$stage <- c(stages, rep(NA, nrow(waffle_dat) - length(stages)))
# Plot it
p = ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(name = stage,
values = RColorBrewer::brewer.pal(5, "Dark2")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
p + ggplot2::scale_y_reverse()
# Create df with TA funnel metrics
ta_dat <- data.frame(stage = c("Apply", "Phone Screen", "Onsite", "Offer Extend", "Offer Accept"),
cnt = c(100, 20, 10, 6, 4))
# Set depth of waffle chart (y-axis rows)
depth <- 10
# Each observation needs an x and y coordinate, and y needs to be specified first for a horizontal-accumulating waffle
waffle_dat <- expand.grid(y = 1:depth,
x = seq_len(ceiling(sum(ta_dat$cnt) / depth)))
# Expand the counts into a full vector of region labels - i.e., de-aggregate
stages <- rep(ta_dat$stage, ta_dat$cnt)
# Depending on the value of ndeep, there might be more spots on the x-y grid
# than there are cases - so fill those with NA
waffle_dat$stage <- c(stages, rep(NA, nrow(waffle_dat) - length(stages)))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#F2F2F2",
"Phone Screen" = "#D9D9D9",
"Onsite" = "#BFBFBF",
"Offer Extend" = "#A6A6A6",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Onsite" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Onsite" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
#ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Onsite" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(colour = "#404040"))
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Onsite" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
#ggplot2::theme(legend.title = element_blank(),
panel.background = element_blank(),
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Onsite" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void()
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Onsite" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void()
# Plot it
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Onsite" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank())
# Visualize data
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"RPS" = "#BFBFBF",
"HMS" = "#A6A6A6",
"Onsite" = "#808080",
"Offer Extend" = "#595959",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank())
# Each observation needs an x and y coordinate, and y needs to be specified first for a horizontal-accumulating waffle
waffle_dat <- expand.grid(y = 1:depth,
x = seq_len(ceiling(sum(ta_dat$cnt) / depth)))
# Expand the counts into a full vector of region labels - i.e., de-aggregate
stages <- rep(ta_dat$stage, ta_dat$cnt)
# Fill empty spots with NA (may exist based on the depth parameter)
waffle_dat$stage <- c(stages, rep(NA, nrow(waffle_dat) - length(stages)))
# Visualize data
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"RPS" = "#BFBFBF",
"HMS" = "#A6A6A6",
"Onsite" = "#808080",
"Offer Extend" = "#595959",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank())
# Create df with TA funnel metrics
ta_dat <- data.frame(stage = c("Apply", "RPS", "HMS", "Onsite", "Offer Extend", "Offer Accept"),
cnt = c(100, 40, 20, 10, 6, 4))
# Set depth of waffle chart (y-axis rows)
depth <- 10
# Each observation needs an x and y coordinate, and y needs to be specified first for a horizontal-accumulating waffle
waffle_dat <- expand.grid(y = 1:depth,
x = seq_len(ceiling(sum(ta_dat$cnt) / depth)))
# Expand the counts into a full vector of region labels - i.e., de-aggregate
stages <- rep(ta_dat$stage, ta_dat$cnt)
# Fill empty spots with NA (may exist based on the depth parameter)
waffle_dat$stage <- c(stages, rep(NA, nrow(waffle_dat) - length(stages)))
# Visualize data
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"RPS" = "#BFBFBF",
"HMS" = "#A6A6A6",
"Onsite" = "#808080",
"Offer Extend" = "#595959",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank())
# Create df with TA funnel metrics
ta_dat <- data.frame(stage = c("Apply", "Phone Screen", "Onsite", "Offer Extend", "Offer Accept"),
cnt = c(100, 20, 10, 6, 4))
# Set depth of waffle chart (y-axis rows)
depth <- 10
# Each observation needs an x and y coordinate, and y needs to be specified first for a horizontal-accumulating waffle
waffle_dat <- expand.grid(y = 1:depth,
x = seq_len(ceiling(sum(ta_dat$cnt) / depth)))
# Expand the counts into a full vector of region labels - i.e., de-aggregate
stages <- rep(ta_dat$stage, ta_dat$cnt)
# Fill empty spots with NA (may exist based on the depth parameter)
waffle_dat$stage <- c(stages, rep(NA, nrow(waffle_dat) - length(stages)))
# Visualize data
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Onsite" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank())
# Create df with TA funnel metrics
ta_dat <- data.frame(stage = c("Apply", "Phone Screen", "Interview", "Offer Extend", "Offer Accept"),
cnt = c(100, 20, 10, 6, 4))
# Set depth of waffle chart (y-axis rows)
depth <- 10
# Each observation needs an x and y coordinate, and y needs to be specified first for a horizontal-accumulating waffle
waffle_dat <- expand.grid(y = 1:depth,
x = seq_len(ceiling(sum(ta_dat$cnt) / depth)))
# Expand the counts into a full vector of region labels - i.e., de-aggregate
stages <- rep(ta_dat$stage, ta_dat$cnt)
# Fill empty spots with NA (may exist based on the depth parameter)
waffle_dat$stage <- c(stages, rep(NA, nrow(waffle_dat) - length(stages)))
# Visualize data
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Interview" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank())
# Create df with TA funnel metrics
ta_dat <- data.frame(stage = c("Apply", "Phone Screen", "Interview", "Offer Extend", "Offer Accept"),
cnt = c(60, 20, 10, 6, 4))
# Set depth of waffle chart (# of y-axis rows)
depth <- 10
# Each observation needs an x and y coordinate, and y needs to be specified first for a waffle chart with horizontal accumulation
waffle_dat <- expand.grid(y = 1:depth,
x = seq_len(ceiling(sum(ta_dat$cnt) / depth)))
# Expand the applicant counts into a vector of stage labels
stages <- rep(ta_dat$stage, ta_dat$cnt)
# Fill empty tiles with NA (may exist based on the depth parameter)
waffle_dat$stage <- c(stages, rep(NA, nrow(waffle_dat) - length(stages)))
# Visualize data
ggplot2::ggplot(waffle_dat, aes(x = x, y = y, fill = stage)) +
ggplot2::geom_tile(color = "white") +
ggplot2::scale_fill_manual(values = c("Apply" = "#D9D9D9",
"Phone Screen" = "#BFBFBF",
"Interview" = "#A6A6A6",
"Offer Extend" = "#808080",
"Offer Accept" = "#0070C0")) +
ggplot2::scale_y_reverse() +
ggplot2::theme_void() +
ggplot2::theme(legend.title = element_blank())
