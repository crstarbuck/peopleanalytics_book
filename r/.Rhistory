par(mfrow = c(2,2))
plot(slm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Sales Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
# Regress YTD sales on engagement
slm.fit <- lm(ytd_sales ~ org_tenure, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Sales Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
# Load library
library(dplyr)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; sales are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD sales on engagement
slm.fit <- lm(ytd_sales ~ org_tenure, data)
employees$ytd_sales <- 2500 + (5000*employees$engagement + rnorm(nrow(employees), 0, 3)) + 7500*employees$job_lvl + 3000*employees$work_exp + 2500*employees$org_tenure + 2500*employees$job_tenure - 5000*employees$last_promo + rnorm(nrow(employees), 0, 3)
# Subset employees data frame; sales are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD sales on engagement
slm.fit <- lm(ytd_sales ~ engagement, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Sales Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
# Log-transform YTD sales and refit model
slm.fit <- lm(sqrt(ytd_sales) ~ engagement, data)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Sales Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
write.csv(employees, "results.csv")
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(slm.fit)
# Regress YTD sales on engagement
slm.fit <- lm(ytd_sales ~ engagement, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(slm.fit)
employees$ytd_sales <- 2500 + (5000*employees$engagement + rnorm(nrow(employees), 0, 5))
# Regress YTD sales on engagement
slm.fit <- lm(ytd_sales ~ engagement, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Sales Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Subset employees data frame; sales are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD sales on engagement
slm.fit <- lm(ytd_sales ~ engagement, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Sales Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
unique(employees$job_title)
employees$ytd_leads <- 2500 + (5000*employees$engagement + rnorm(nrow(employees), 0, 5))
employees$ytd_sales <- 2500 + (5000*employees$engagement + 7500*employees$job_lvl + 3000*employees$work_exp + 2500*employees$org_tenure + 2500*employees$job_tenure - 5000*employees$last_promo + rnorm(nrow(employees), 0, 5)
employees$ytd_leads <- 2500 + 5000*employees$engagement + rnorm(nrow(employees), 0, 5)
employees$ytd_sales <- 2500 + 5000*employees$engagement + 7500*employees$job_lvl + 3000*employees$work_exp + 2500*employees$org_tenure + 2500*employees$job_tenure - 5000*employees$last_promo + rnorm(nrow(employees), 0, 5)
write.csv(employees, "results.csv")
employees$ytd_leads <- 2 + 20*employees$engagement + rnorm(nrow(employees), 0, 5)
# Subset employees data frame; sales are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD sales on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Sales Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
write.csv(employees, "results.csv")
# Load library
library(dplyr)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; sales are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD sales on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
# Load library
library(dplyr)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; leads are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD leads on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
# Transform YTD leads and refit model
slm.fit.trans <- lm(sqrt(ytd_leads) ~ engagement, data)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit.trans)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(slm.fit)
8.9_91.1
8.9+91.1
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_leads)) +
ggplot2::labs(x = "Engagement", y = "YTD Leads") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 120000, label = "y = 20.1x + 5.1", colour = "red") +
ggplot2::theme_bw()
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_leads)) +
ggplot2::labs(x = "Engagement", y = "YTD Leads") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 60, label = "y = 20.1x + 5.1", colour = "red") +
ggplot2::theme_bw()
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_leads)) +
ggplot2::labs(x = "Engagement", y = "YTD Leads") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 50, label = "y = 20.1x + 5.1", colour = "red") +
ggplot2::theme_bw()
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_leads)) +
ggplot2::labs(x = "Engagement", y = "YTD Leads") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 40, label = "y = 20.1x + 5.1", colour = "red") +
ggplot2::theme_bw()
# Load library
library(dplyr)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; leads are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD leads on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(slm.fit)
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_leads)) +
ggplot2::labs(x = "Engagement", y = "YTD Leads") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 40, label = "y = 20.1x + 1.6", colour = "red") +
ggplot2::theme_bw()
library(ggplot2)
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_leads)) +
ggplot2::labs(x = "Engagement", y = "YTD Leads") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 40, label = "y = 20.1x + 1.6", colour = "red") +
ggplot2::theme_bw()
# Load library
library(dplyr)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; leads are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD leads on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
library(ggplot2)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(slm.fit$residuals)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(slm.fit)
1/.2
1/.8
View(employees)
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(ytd_sales ~ engagement + job_lvl + work_exp + org_tenure + job_tenure + last_promo, data)
round(cor(subset(data, select = c(engagement, job_lvl, work_exp, org_tenure, job_tenure, last_promo)), 2))
View(data)
subset(data, select = c(engagement, job_lvl, work_exp, org_tenure, job_tenure, last_promo))
round(cor(unlist(subset(data, select = c(engagement, job_lvl, work_exp, org_tenure, job_tenure, last_promo))), 2))
round(cor(subset(data, select = c(engagement, job_lvl, work_exp, org_tenure, job_tenure, last_promo))), 2)
M1 <- round(cor(subset(data, select = c(engagement, job_lvl, work_exp, org_tenure, job_tenure, last_promo))), 2) # Build a correlation matrix named M1.
M1[M1 == 1] <- NA # Drop perfect correlations (relationships of variables with themselves)
M1 <- na.omit(reshape2::melt(M1)) # Convert columns into rows for ease of use
M1 <- M1[order(-abs(M1$value)),] # Sort order the data
M1 # Display contents of the matrix.
print(M1, row.names = FALSE) # Display contents of the matrix.
paste(M1) # Display contents of the matrix
print(M1) # Display contents of the matrix
print(M1, row.names = F) # Display contents of the matrix
print(M1, row.names = FALSE) # Display contents of the matrix
M1 <- round(cor(subset(data, select = c(engagement, job_lvl, work_exp, org_tenure, last_promo))), 2) # Build a correlation matrix named M1.
M1[M1 == 1] <- NA # Drop perfect correlations (relationships of variables with themselves)
M1 <- na.omit(reshape2::melt(M1)) # Convert columns into rows for ease of use
M1 <- M1[order(-abs(M1$value)), ] # Sort order the data
M1 # Display contents of the matrix
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(ytd_sales ~ engagement + job_lvl + work_exp + org_tenure + last_promo, data)
# Load library
library(car)
car:vif(mlm.fit)
# Load library
library(car)
car:vif(mlm.fit)
car::vif(mlm.fit)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(mlm.fit)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(ytd_sales ~ job_lvl + work_exp + org_tenure + last_promo, data)
# Produce tabular summary for model results using flextable
flextable::as_flextable(mlm.fit)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(mlm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(mlm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(mlm.fit$residuals)
mlm.fit <- lm(sqrt(ytd_sales) ~ engagement + job_lvl + work_exp + org_tenure + last_promo, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
View(data)
data = data[-99,]
mlm.fit <- lm(sqrt(ytd_sales) ~ engagement + job_lvl + work_exp + org_tenure + last_promo, data)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
?rstudentr
?rstudent
# Remove high leverage observations
w <- abs(rstudent(mlm.fit)) < 3 & abs(cooks.distance(mlm.fit)) < 4/nrow(mlm.fit$model)
mlm.fit <- update(mlm.fit, weights = as.numeric(w))
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(sqrt(ytd_sales) ~ engagement + job_lvl + work_exp + org_tenure + last_promo, data)
# Remove high leverage observations per Cook's distance
w <- abs(rstudent(mlm.fit)) < 3 & abs(cooks.distance(mlm.fit)) < 4/nrow(mlm.fit$model)
mlm.fit <- update(mlm.fit, weights = as.numeric(w))
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Load library
library(dplyr)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; leads are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD leads on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
library(ggplot2)
extract_eq(slm.fit)
library(equatiomatic)
install.packages(equatiomatic, dependencies = TRUE)
install.packages("equatiomatic")
extract_eq(slm.fit)
library(equatiomatic)
extract_eq(slm.fit)
# Load library
library(equatiomatic)
# Convert model to LaTex regression equation
extract_eq(slm.fit)
# Load library
library(equatiomatic)
# Convert model to LaTex regression equation
extract_eq(slm.fit)
# Produce VIF for each predictor
pairs(data)
mode(data)
class(data)
View(data)
# Create pairs plot
pairs(subset(data, select = c(engagement, job_lvl, work_exp, org_tenure, last_promo)))
# Create pairs plot
pairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, org_tenure, last_promo)))
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(ytd_sales ~ engagement + job_lvl + work_exp + org_tenure + job_tenure + mgr_tenure + last_promo, data)
# Produce correlation matrix
GGally::ggpairs(subset(employees, select = c(ytd_sales, engagement, job_lvl, work_exp, org_tenure, last_promo)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, org_tenure, last_promo)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, org_tenure, last_promo)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, job_tenure, org_tenure, last_promo)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, job_tenure, org_tenure, last_promo)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, job_tenure, org_tenure, last_promo)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, job_tenure, org_tenure, last_promo)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, job_tenure, org_tenure, last_promo)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, job_tenure, org_tenure, mgr_tenure, last_promo)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, prior_emplr_cnt, job_tenure, org_tenure, mgr_tenure)))
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, stock_opt_lvl, job_tenure, org_tenure, mgr_tenure)))
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(ytd_sales ~ engagement + job_lvl + stock_opt_lvl + org_tenure, data)
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(ytd_sales ~ engagement + job_lvl + stock_opt_lvl + org_tenure, data)
# Load library
library(car)
# Produce VIF for each predictor
car::vif(mlm.fit)
# Load library
library(car)
# Produce VIF for each predictor
car::vif(mlm.fit)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Remove high leverage observations per Cook's distance
w <- abs(rstudent(mlm.fit)) < 3 & abs(cooks.distance(mlm.fit)) < 4/nrow(mlm.fit$model)
mlm.fit <- update(mlm.fit, weights = as.numeric(w))
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(mlm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(mlm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(mlm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(mlm.fit$residuals)
mlm.fit <- lm(log(ytd_sales) ~ engagement + job_lvl + stock_opt_lvl + org_tenure, data)
# Remove high leverage observations per Cook's distance
w <- abs(rstudent(mlm.fit)) < 3 & abs(cooks.distance(mlm.fit)) < 4/nrow(mlm.fit$model)
mlm.fit <- update(mlm.fit, weights = as.numeric(w))
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(mlm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(mlm.fit$residuals)
mlm.fit <- lm(sqrt(ytd_sales) ~ engagement + job_lvl + stock_opt_lvl + org_tenure, data)
# Remove high leverage observations per Cook's distance
w <- abs(rstudent(mlm.fit)) < 3 & abs(cooks.distance(mlm.fit)) < 4/nrow(mlm.fit$model)
mlm.fit <- update(mlm.fit, weights = as.numeric(w))
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(mlm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(mlm.fit$residuals)
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(sqrt(ytd_sales) ~ engagement + job_lvl + stock_opt_lvl + org_tenure, data)
# Remove high leverage observations per Cook's distance
w <- abs(rstudent(mlm.fit)) < 3 & abs(cooks.distance(mlm.fit)) < 4/nrow(mlm.fit$model)
mlm.fit <- update(mlm.fit, weights = as.numeric(w))
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(mlm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(mlm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(mlm.fit$residuals)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(mlm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
# Compute Shapiro-Wilk test of normality
shapiro.test(mlm.fit$residuals)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(mlm.fit)
