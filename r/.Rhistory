actual <- actual[!is.na(predicted)]
# Produce counts for model performance metrics
TP <- sum(actual == 1 & predicted == 1) # true positives
TN <- sum(actual == 0 & predicted == 0) # true negatives
FP <- sum(actual == 0 & predicted == 1) # false positives
FN <- sum(actual == 1 & predicted == 0) # false negatives
P <- TP + FN # total positives
N <- FP + TN # total negatives
# Store rates to variables
accuracy <- signif(100 * (sum(actual == predicted) / length(actual)), 3)
sensitivity <- signif(100 * (TP / (TP + FN)), 3)
specificity <- signif(100 * (TN / (TN + FP)), 3)
precision <- signif(100 * (TP / (TP + FP)), 3)
neg_pred_val <- signif(100 * (TN / (TN + FN)), 3)
mdl <- rep(model, times = 5)
stat_nm <- c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")
stat_vl <- c(accuracy, sensitivity, specificity, precision, neg_pred_val)
# Return model performance statistics in a data frame
return(data.frame(mdl, stat_nm, stat_vl))
}
classifer.perf(
model = "GML",
actual = test_dat$active,
predicted = ifelse(predict(glm.fit, test_dat, type = "response") > .5, 1, 0))
classifer.perf(
model = "GML",
actual = test_dat$active,
predicted = ifelse(predict(glm.fit, test_dat, type = "response") > .5, 1, 0))
classifer.perf(
"GML",
test_dat$active,
ifelse(predict(glm.fit, test_dat, type = "response") > .5, 1, 0))
classifier.perf("GML",
test_dat$active,
ifelse(predict(glm.fit, test_dat, type = "response") > .5, 1, 0))
# Initialize empty data frame
perf.metrics <- NULL
# Predict with logistic regression model
perf.metrics <- rbind(perf.metrics, cbind.data.frame(classifier.perf(
model = "GML",
actual = test_dat$active,
predicted = ifelse(predict(glm.fit, test_dat, type = "response") > .5, 1, 0))))
# Predict with logistic regression model (SMOTE)
perf.metrics <- rbind(perf.metrics, cbind.data.frame(classifier.perf(
model = "GML (SMOTE)",
actual = test_dat$active,
predicted = ifelse(predict(glm.os.fit, test_dat, type = "response") > .5, 1, 0))))
# Predict with RF model
perf.metrics <- rbind(perf.metrics, cbind.data.frame(classifier.perf(
model = "RF",
actual = test_dat$active,
predicted = ifelse(predict(rf.fit, test_dat, type = "response") > .5, 1, 0))))
# Predict with RF model (SMOTE)
perf.metrics <- rbind(perf.metrics, cbind.data.frame(classifier.perf(
model = "RF (SMOTE)",
actual = test_dat$active,
predicted = ifelse(predict(rf.os.fit, test_dat, type = "response") > .5, 1, 0))))
classifier.perf("GML",
test_dat$active,
ifelse(predict(glm.fit, test_dat, type = "response") > .5, 1, 0))
View(perf.metrics)
library(ggplot2)
ggplot(perf.metrics, aes(x = stat_nm, y = stat_vl, fill = mdl)) + geom_bar(stat="identity") + geom_text(data = perf.metrics, aes(label = val.accuracy), vjust = 1.5, colour = "white", size = 5) + labs(x = "Metric", y = "Performance", title = "Performance by Model Type")
library(ggplot2)
ggplot(perf.metrics, aes(x = stat_nm, y = stat_vl, fill = mdl)) + geom_bar(stat="identity") +  labs(x = "Metric", y = "Performance", title = "Performance by Model Type")
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::geom_bar(ggplot2::aes(fill = mdl),
position = "dodge",
stat = "identity")
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::labs(x = "Performance Stat", y = "Performance Metric")
perf.metrics$stat_nm <- factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val"))
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric")
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
perf.metrics[with(perf.metrics, order(stat_vl)), ]
?order
perf.metrics %>%
arrange(desc(stat_vl))
perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Sort performance statistics in df
perf.metrics <- perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
perf.metrics %>%
mutate(name = fct_reorder(stat_nm, desc(stat_vl))) %>%
ggplot2::ggplot(aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
library(dplyr)
# Visualize performance stats by model type
perf.metrics %>%
mutate(name = fct_reorder(stat_nm, desc(stat_vl))) %>%
ggplot2::ggplot(aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Sort performance statistics in df
perf.metrics <- perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Sort performance statistics in df
perf.metrics <- perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("neg_pred_val", "precision", "specificity", "sensitivity", "accuracy")), desc(stat_vl))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Metric") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic Name", y = "Performance Statistic Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
with(perf.metrics, reorder(stat_vl))
# Visualize performance stats by model type
with(perf.metrics, reorder(stat_vl)) +
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
with(perf.metrics, reorder(stat_vl)) %>%
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
with(perf.metrics, arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl))
with(perf.metrics, arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl)))
perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl)),
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Initialize empty data frame for model performance stats
perf.metrics <- NULL
# Predict with logistic regression model
perf.metrics <- rbind(perf.metrics, cbind.data.frame(classifier.perf(
model = "GLM",
actual = test_dat$active,
predicted = ifelse(predict(glm.fit, test_dat, type = "response") > .5, 1, 0))))
# Predict with logistic regression model (SMOTE)
perf.metrics <- rbind(perf.metrics, cbind.data.frame(classifier.perf(
model = "GLM (SMOTE)",
actual = test_dat$active,
predicted = ifelse(predict(glm.os.fit, test_dat, type = "response") > .5, 1, 0))))
# Predict with RF model
perf.metrics <- rbind(perf.metrics, cbind.data.frame(classifier.perf(
model = "RF",
actual = test_dat$active,
predicted = ifelse(predict(rf.fit, test_dat, type = "response") > .5, 1, 0))))
# Predict with RF model (SMOTE)
perf.metrics <- rbind(perf.metrics, cbind.data.frame(classifier.perf(
model = "RF (SMOTE)",
actual = test_dat$active,
predicted = ifelse(predict(rf.os.fit, test_dat, type = "response") > .5, 1, 0))))
# Load library
library(ggplot2)
# Sort performance statistics in df
perf.metrics <- perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model")) +
scale_fill_brewer(palette = "Pastel2", limits = c("RF (SMOTE)", "RF", "GLM (SMOTE", "GLM"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
gglot2::scale_fill_brewer(palette = "Blues", limits = c("RF (SMOTE)", "RF", "GLM (SMOTE", "GLM")) +
ggplot2::guides(fill = guide_legend(title = "Model")) +
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
gglot2::scale_fill_brewer(palette = "Blues", limits = c("RF (SMOTE)", "RF", "GLM (SMOTE", "GLM")) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues", limits = c("RF (SMOTE)", "RF", "GLM (SMOTE", "GLM")) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Sort performance statistics in df
perf.metrics <- perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model")) +
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model")) +
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Load library
library(ggplot2)
# Sort performance statistics in df
perf.metrics <- perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model")) +
scale_fill_brewer(palette = "Pastel2", limits = c("RF (SMOTE)", "RF", "GLM (SMOTE", "GLM"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::coord_flip() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Greys") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blacks") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(stat_nm, stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl)),
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics %>%
arrange(factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val")), desc(stat_vl)),
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Produce variable importance plat
varImpPlot(rf.fit, type = 2)
# Sort performance statistics in df
perf.metrics$stat_nm <- factor(perf.metrics$stat_nm, levels = c("accuracy", "sensitivity", "specificity", "precision", "neg_pred_val"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues") +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues", direction = 1) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues", direction = 2) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues", direction = -1) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "BuPu", direction = -1) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues", direction = -1) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "pal10", direction = -1) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "pal9", direction = -1) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Greys", direction = -1) +
ggplot2::guides(fill = guide_legend(title = "Model"))
# Visualize performance stats by model type
ggplot2::ggplot(perf.metrics,
ggplot2::aes(x = stat_nm, y = stat_vl)) +
ggplot2::labs(x = "Performance Statistic", y = "Performance Value") +
ggplot2::geom_bar(aes(fill = mdl), position = "dodge", stat = "identity") +
ggplot2::theme_bw() +
ggplot2::scale_fill_brewer(palette = "Blues", direction = -1) +
ggplot2::guides(fill = guide_legend(title = "Model"))
View(perf.metrics)
