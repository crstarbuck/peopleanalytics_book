}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:10)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(123)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = TRUE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Store sample means with n = 10
x_bars <- sample_means[sample_means$n == 10, "x_bar"]
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
# Calculate 99% CI (2.58 standard errors above and below the mean)
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 2.58
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 2.58
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci99_lower_bound & x_bars < ci99_upper_bound]) / length(x_bars) * 100
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:10)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(1)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = TRUE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Store sample means with n = 10
x_bars <- sample_means[sample_means$n == 10, "x_bar"]
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
# Calculate 99% CI (2.58 standard errors above and below the mean)
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 2.58
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 2.58
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci99_lower_bound & x_bars < ci99_upper_bound]) / length(x_bars) * 100
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:10)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(456)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = TRUE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Store sample means with n = 10
x_bars <- sample_means[sample_means$n == 10, "x_bar"]
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
# Calculate 99% CI (2.58 standard errors above and below the mean)
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 2.58
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 2.58
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci99_lower_bound & x_bars < ci99_upper_bound]) / length(x_bars) * 100
# Load libraries for data wrangling and viz
library(dplyr)
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(123)
# Generate uniform population distribution with 1000 values ranging from 1 to 100
rand.unif <- runif(1000, min = 1, max = 100)
# Produce histogram to visualize population distribution
ggplot() +
aes(rand.unif) +
labs(x = "x", y = "N") +
geom_histogram(colour = "white", size = .1, fill = "#262626")
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:10)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(456)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = TRUE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Load libraries for data wrangling and viz
library(dplyr)
# Load libraries for data wrangling and viz
library(dplyr)
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(1234)
# Generate uniform population distribution with 1000 values ranging from 1 to 100
rand.unif <- runif(1000, min = 1, max = 100)
# Produce histogram to visualize population distribution
ggplot() +
aes(rand.unif) +
labs(x = "x", y = "N") +
geom_histogram(colour = "white", size = .1, fill = "#262626")
# Produce histogram to visualize population distribution
ggplot() +
aes(rand.unif) +
labs(x = "x", y = "N") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
panel.background = element_blank())
# Produce histogram to visualize population distribution
ggplot() +
aes(rand.unif) +
labs(x = "x", y = "N") +
geom_histogram(colour = "white", size = .1, fill = "#262626")
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap("n = " ~n)
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:10)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(456)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = TRUE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap("n = " ~n)
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
#facet_wrap(~n)
facet_grid(n, labeller = label_both)
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
#facet_wrap(~n)
facet_grid(~n, labeller = label_both)
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Set seed for reproducible random distribution
set.seed(1234)
# Generate binomial population distribution with 1000 values ranging from 1 to 100
rand.binom <- rbinom(1000, min = 1, max = 100)
# Produce histogram to visualize population distribution
ggplot() +
aes(rand.binom) +
labs(x = "x", y = "N") +
geom_histogram(colour = "white", size = .1, fill = "#262626")
# Load libraries for data wrangling and viz
library(dplyr)
# Load libraries for data wrangling and viz
library(dplyr)
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(1234)
# Generate binomial population distribution with 1000 values ranging from 1 to 100
rand.binom <- rbinom(1000, min = 1, max = 100)
?rbinom
# Generate binomial population distribution with 1000 values ranging from 1 to 100
rand.binom <- rbinom(1000)
# Load libraries for data wrangling and viz
library(dplyr)
# Load libraries for data wrangling and viz
library(dplyr)
library(ggplot2)
# Load libraries for data wrangling and viz
library(dplyr)
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(1234)
# Generate uniform population distribution with 1000 values ranging from 1 to 100
rand.unif <- runif(1000, min = 1, max = 100)
# Calculate population mean
mean(rand.unif)
# Calculate population standard deviation
# Note: The sd() function returns the sample standard deviation since it is less common to work with full populations than with samples
sqrt((length(rand.unif)-1)/length(rand.unif)) * var(rand.unif)
# Calculate population mean
mean(rand.unif)
# Calculate population standard deviation
# Note: The sd() function returns the sample standard deviation since it is less common to work with full populations than with samples
sqrt((length(rand.unif)-1)/length(rand.unif)) * sd(rand.unif)
# Calculate population mean
mean(rand.unif)
sd(rand.unif)
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:5,10,20,30,50)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(456)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = TRUE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:5,10,20,30,40,50)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(456)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = TRUE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:5,10,25,50)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(456)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = TRUE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Calculate population mean
mean(rand.unif)
# Calculate population standard deviation
# Note: The sd() function returns the sample standard deviation since it is less common to work with full populations than with samples
sqrt((length(rand.unif)-1)/length(rand.unif)) * sd(rand.unif)
# Store sample means with n = 50
x_bars <- sample_means[sample_means$n == 50, "x_bar"]
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
ci95_upper_bound
ci95_lower_bound
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
ci95_lower_bound
ci95_upper_bound
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
# Print lower bound for 95% CI
ci95_lower_bound
# Print upper bound for 95% CI
ci95_upper_bound
# Calculate population mean
mean(rand.unif)
59.2-51.2
51.2-43.9
round(ci95_lower_bound, 2)
round(ci95_lower_bound, 1)
# Calculate 99% CI (2.58 standard errors above and below the mean)
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 2.58
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 2.58
```{r, message = FALSE}
# Print lower bound for 99% CI
ci99_lower_bound
# Print upper bound for 99% CI
ci99_upper_bound
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci99_lower_bound & x_bars < ci99_upper_bound]) / length(x_bars) * 100
# Load libraries for data wrangling and viz
library(dplyr)
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(1234)
# Generate uniform population distribution with 1000 values ranging from 1 to 100
rand.unif <- runif(1000, min = 1, max = 100)
```{r, message = FALSE}
# Calculate population mean
mean(rand.unif)
# Calculate population standard deviation
# Note: The sd() function returns the sample standard deviation since it is less common to work with full populations than with samples
sqrt((length(rand.unif)-1)/length(rand.unif)) * sd(rand.unif)
# Produce histogram to visualize population distribution
ggplot() +
aes(rand.unif) +
labs(x = "x", y = "N") +
geom_histogram(colour = "white", size = .1, fill = "#262626")
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:5,10,25,50)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(456)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = TRUE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(colour = "white", size = .1, fill = "#262626") +
facet_wrap(~n)
# Store sample means with n = 50
x_bars <- sample_means[sample_means$n == 50, "x_bar"]
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
# Print lower bound for 95% CI
ci95_lower_bound
# Print upper bound for 95% CI
ci95_upper_bound
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
# Calculate 99% CI (2.58 standard errors above and below the mean)
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 2.58
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 2.58
# Print lower bound for 99% CI
ci99_lower_bound
# Print upper bound for 99% CI
ci99_upper_bound
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci99_lower_bound & x_bars < ci99_upper_bound]) / length(x_bars) * 100
# Store sample means with n = 50
x_bars <- sample_means[sample_means$n == 25, "x_bar"]
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
# Print lower bound for 95% CI
ci95_lower_bound
# Print upper bound for 95% CI
ci95_upper_bound
# Store sample means with n = 50
x_bars <- sample_means[sample_means$n == 50, "x_bar"]
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
# Store sample means with n = 50
x_bars <- sample_means[sample_means$n == 50, "x_bar"]
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
# Print lower bound for 95% CI
ci95_lower_bound
# Print upper bound for 95% CI
ci95_upper_bound
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
# Calculate 99% CI (2.58 standard errors above and below the mean)
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 2.58
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 2.58
# Print lower bound for 99% CI
ci99_lower_bound
# Print upper bound for 99% CI
ci99_upper_bound
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci99_lower_bound & x_bars < ci99_upper_bound]) / length(x_bars) * 100
round(ci99_lower_bound)
round(ci99_lower_bound, 1)
round(ci99_upper_bound, 1)
# Store sample means with n = 50
x_bars <- sample_means[sample_means$n == 50, "x_bar"]
x_bars
x_bars /10
mean(x_bars) - 1.96 * (sd(x_bars) / 10)
mean(x_bars) - 1.96 * (sd(x_bars))
mean(x_bars) + 1.96 * (sd(x_bars) / 10)
# Store sample means with n = 50
x_bars <- sample_means[sample_means$n == 50, "x_bar"]
# Calculate 95% CI (1.96 standard errors above and below the mean)
ci95_lower_bound <- mean(x_bars) - 1.96 * (sd(x_bars) / sqrt(length(x_bars)))
ci95_upper_bound <- mean(x_bars) + 1.96 * (sd(x_bars) / sqrt(length(x_bars)))
# Print lower bound for 95% CI
ci95_lower_bound
# Print upper bound for 95% CI
ci95_upper_bound
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
x_bars
# Calculate percent of sample means within +/- 2 SEs
length(x_bars[x_bars > mean(x_bars) + 2 * sd(x_bars) & x_bars < mean(x_bars) - 2 * sd(x_bars)]) / length(x_bars) * 100
# Calculate percent of sample means within +/- 2 SEs
length(x_bars[x_bars > mean(x_bars) + 2 * sd(x_bars) | x_bars < mean(x_bars) - 2 * sd(x_bars)]) / length(x_bars) * 100
# Calculate percent of sample means within +/- 2 SEs
length(x_bars[x_bars < mean(x_bars) + 2 * sd(x_bars) & x_bars > mean(x_bars) - 2 * sd(x_bars)]) / length(x_bars) * 100
# Calculate 99% CI (2.58 standard errors above and below the mean)
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 2.58
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 2.58
# Print lower bound for 99% CI
ci99_lower_bound
# Calculate 99% CI (2.58 standard errors above and below the mean)
ci99_lower_bound <- mean(x_bars) - 2.58 * (sd(x_bars) / sqrt(length(x_bars)))
ci99_upper_bound <- mean(x_bars) + 2.58 * (sd(x_bars) / sqrt(length(x_bars)))
# Print lower bound for 99% CI
ci99_lower_bound
# Print upper bound for 99% CI
ci99_upper_bound
# Calculate percent of sample means within +/- 3 SEs
length(x_bars[x_bars < mean(x_bars) + 3 * sd(x_bars) & x_bars > mean(x_bars) - 3 * sd(x_bars)]) / length(x_bars) * 100
