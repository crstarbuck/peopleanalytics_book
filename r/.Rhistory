poly_data = NULL
# Generate turnover relationships having quadratic and cubic relationships with months
for (i in 1:12){
poly_data <- rbind(poly_data, cbind.data.frame(
month = i,
attrition_lin = .75*i + 3.5,
attrition_quad = 7.3*i - .53*i^2 - 6.97,
attrition_cube = -12.48*i + 2.47*i^2 - .13*i^3 + 31.01))
}
# Visualize linear trend
p_lin <- ggplot2::ggplot(poly_data, aes(x = month, y = attrition_lin * .01)) +
ggplot2::labs(title = 'Linear', x = 'Month', y = 'Turnover Rate') +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Visualize quadratic trend
p_quad <- ggplot2::ggplot(poly_data, aes(x = month, y = attrition_quad * .01)) +
ggplot2::labs(title = 'Quadratic', x = 'Month', y = 'Turnover Rate') +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Visualize cubic trend
p_cube <- ggplot2::ggplot(poly_data, aes(x = month, y = attrition_cube * .01)) +
ggplot2::labs(title = 'Cubic', x = 'Month', y = 'Turnover Rate') +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_lin, p_quad, p_cube, ncol = 3, nrow = 1)
# Load library
library(dplyr)
# Load employee data
turnover <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/turnover_trends.csv")
# Subset data
ps_turnover <- subset(turnover, job == 'People Scientist' & level == 4)
p_ps_yr1 <- ggplot2::ggplot(data = subset(ps_turnover, year == 1), aes(x = month, y = turnover_rate, colour = remote)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::scale_y_continuous(breaks = 1:10) +
ggplot2::scale_color_manual(values=c("#B8BDBF", "#595959")) +
ggplot2::labs(title = "Year 1", x = "Month", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
p_ps_yr2 <- ggplot2::ggplot(data = subset(ps_turnover, year == 2), aes(x = month, y = turnover_rate, colour = remote)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::scale_y_continuous(breaks = 1:10) +
ggplot2::scale_color_manual(values=c("#B8BDBF", "#595959")) +
ggplot2::labs(title = "Year 2", x = "Month", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
p_ps_yr3 <- ggplot2::ggplot(data = subset(ps_turnover, year == 3), aes(x = month, y = turnover_rate, colour = remote)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::scale_y_continuous(breaks = 1:10) +
ggplot2::scale_color_manual(values=c("#B8BDBF", "#595959")) +
ggplot2::labs(title = "Year 3", x = "Month", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
p_ps_yr4 <- ggplot2::ggplot(data = subset(ps_turnover, year == 4), aes(x = month, y = turnover_rate, colour = remote)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::scale_y_continuous(breaks = 1:10) +
ggplot2::scale_color_manual(values=c("#B8BDBF", "#595959")) +
ggplot2::labs(title = "Year 4", x = "Month", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
p_ps_yr5 <- ggplot2::ggplot(data = subset(ps_turnover, year == 5), aes(x = month, y = turnover_rate, colour = remote)) +
ggplot2::geom_line() +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::scale_y_continuous(breaks = 1:10) +
ggplot2::scale_color_manual(values = c("#B8BDBF", "#595959")) +
ggplot2::labs(title = "Year 5", x = "Month", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_ps_yr1, p_ps_yr2, p_ps_yr3, p_ps_yr4, p_ps_yr5, ncol = 3, nrow = 2)
# Fit linear, quadratic, and cubic models to ps_turnover data
ps.lin.fit <- lm(turnover_rate ~ month, data = ps_turnover)
ps.quad.fit <- lm(turnover_rate ~ month + I(month^2), data = ps_turnover)
ps.cube.fit <- lm(turnover_rate ~ month + I(month^2) + I(month^3), data = ps_turnover)
# Load library
library(flextable)
# Produce tabular summary of regression model output
flextable::as_flextable(ps.lin.fit)
# Apply models to predict people scientist turnover rates for each month in year 1
ps_lin_pred <- data.frame(month = 1:12,
turnover_rate = predict(ps.lin.fit, subset(ps_turnover, year == 1, select = c(month, turnover_rate))))
ps_quad_pred <- data.frame(month = 1:12,
turnover_rate = predict(ps.quad.fit, subset(ps_turnover, year == 1, select = c(month, turnover_rate))))
ps_cube_pred <- data.frame(month = 1:12,
turnover_rate = predict(ps.cube.fit, subset(ps_turnover, year == 1, select = c(month, turnover_rate))))
# Plot data against regression line
p_ps_lin <- ggplot2::ggplot(data = ps_turnover, aes(x = month, y = turnover_rate, color = remote)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::geom_function(fun = function(x) {ps.lin.fit$coefficients[[2]]*x + ps.lin.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::scale_color_manual(values = c("#B8BDBF", "#595959")) +
ggplot2::labs(title = "Linear", x = "Month", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
p_ps_quad <- ggplot2::ggplot(data = ps_turnover, aes(x = month, y = turnover_rate, color = remote)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::geom_function(fun = function(x) {ps.quad.fit$coefficients[[2]]*x + ps.quad.fit$coefficients[[3]]*x^2 + ps.quad.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::scale_color_manual(values = c("#B8BDBF", "#595959")) +
ggplot2::labs(title = "Quadratic", x = "Month", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
p_ps_cube <- ggplot2::ggplot(data = ps_turnover, aes(x = month, y = turnover_rate, color = remote)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::geom_function(fun = function(x) {ps.cube.fit$coefficients[[2]]*x + ps.cube.fit$coefficients[[3]]*x^2 + ps.cube.fit$coefficients[[4]]*x^3 + ps.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::scale_color_manual(values = c("#B8BDBF", "#595959")) +
ggplot2::labs(title = "Cubic", x = "Month", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_ps_lin, p_ps_quad, p_ps_cube, ncol = 3, nrow = 1)
# Fit linear, quadratic, and cubic models to ps_turnover df
ps.cube.fit <- lm(turnover_rate ~ month + I(month^2) + I(month^3) + remote, data = ps_turnover)
# Produce tabular summary of regression model output
flextable::as_flextable(ps.cube.fit)
# Fit linear, quadratic, and cubic models to ps_turnover df
ps.cube.fit <- lm(turnover_rate ~ year + month + I(month^2) + I(month^3) + remote, data = ps_turnover)
# Produce tabular summary of regression model output
flextable::as_flextable(ps.cube.fit)
# Model linear relationship between year and turnover rate, grouped by remote vs. non-remote
ps.lin.fit <- lm(turnover_rate ~ year + remote, data = ps_turnover)
# Build plots to visualize turnover rate distribution across years, grouped by remote status
p_ps_rem <- ggplot2::ggplot(data = subset(ps_turnover, remote == 'Yes'), aes(x = year, y = turnover_rate, group = year)) +
ggplot2::labs(title = "Remote", x = "Year", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::geom_point(color = "#B8BDBF") +
ggplot2::geom_function(fun = function(x) {ps.lin.fit$coefficients[[2]]*x + ps.lin.fit$coefficients[[3]] + ps.lin.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::scale_color_manual(values=c("#B8BDBF", "#595959")) +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
p_ps_nrem <- ggplot2::ggplot(data = subset(ps_turnover, remote == 'No'), aes(x = year, y = turnover_rate, group = year)) +
ggplot2::labs(title = "Non-Remote", x = "Year", y = "Turnover Rate") +
ggplot2::theme_bw() +
ggplot2::geom_point(color = "#B8BDBF") +
ggplot2::geom_function(fun = function(x) {ps.lin.fit$coefficients[[2]]*x + ps.lin.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_ps_rem, p_ps_nrem, ncol = 2, nrow = 1)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Dummy code active status to 1/0
employees$active <- ifelse(employees$active == 'Yes', 1, 0)
# Fit a logistic regression model
glm.fit <- glm(active ~ interview_rating, data = employees, family = 'binomial')
# Produce tabular summary for model results using flextable
flextable::as_flextable(glm.fit)
# Create dummy-coded variable for job level 2+
employees$job_lvl2plus <- ifelse(employees$job_lvl > 1, 1, 0)
# Fit a logistic regression model
glm.fit <- glm(active ~ overtime + job_lvl2plus, data = employees, family = 'binomial')
# Produce tabular summary for model results using flextable
flextable::as_flextable(glm.fit)
# Return exponentiated coefficients
exp(coef(glm.fit)[2])
exp(coef(glm.fit)[3])
exp(coef(glm.fit))
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Dummy code active status to 1/0
employees$active <- ifelse(employees$active == 'Yes', 1, 0)
# Fit a logistic regression model
glm.fit <- glm(active ~ interview_rating, data = employees, family = 'binomial')
# Produce tabular summary for model results using flextable
flextable::as_flextable(glm.fit)
View(employees)
unique(employees$job_title)
unique(employees$dpt)
unique(employees$dept)
unique(employees$ed_field)
employees %>% count(ed_field, sort = TRUE)
library(dplyr)
employees %>% count(ed_field, sort = TRUE)
employees %>% count(job_title, sort = TRUE)
employees %>% count(job_title, sort = TRUE)
employees %>% count(dept, sort = TRUE)
mode(employees$dept)
mode(factor(employees$dept))
# Convert nominal categorical variable to factor
employees$dept <- factor(employees$dept)
# Convert nominal categorical variable to factor
employees$dept <- factor(employees$dept)
# Convert nominal categorical variable to factor
employees$dept <- factor(employees$dept)
# Load library
library(nnet)
# Convert dept to factor
employees$dept <- factor(employees$dept)
View(employees)
# Specify reference level
employees$dept <- relevel(employees$dept, ref = "Human Resources")
# Load library
library(nnet)
# Convert dept to factor
employees$dept <- factor(employees$dept)
# Specify reference level
employees$dept <- relevel(employees$dept, ref = "Human Resources")
# Fit multinomial logistic regression model
multinom.model <- multinom(dept ~ overtime + business_travel, data = employees)
# Load library
library(nnet)
# Convert dept to factor
employees$dept <- factor(employees$dept)
# Specify reference level
employees$dept <- relevel(employees$dept, ref = "Human Resources")
# Fit multinomial logistic regression model
multinom.fit <- multinom(dept ~ overtime + business_travel, data = employees)
# Produce tabular summary for model results using flextable
flextable::as_flextable(multinom.fit)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(multinom.fit)
summary(multinom.fit)
# Summarize results in model object
exp(coef(multinom.fit))
# Load library
library(nnet)
# Convert dept to factor
employees$dept <- factor(employees$dept)
# Specify reference level
employees$dept <- relevel(employees$dept, ref = "Human Resources")
# Fit multinomial logistic regression model
multinom.fit <- multinom(dept ~ overtime + business_travel, data = employees)
# Return exponentiated coefficients from model object
exp(coef(multinom.fit))
# Calculate z-scores
z_scores <- summary(multinom.fit)$coefficients / summary(multinom.fit)$standard.errors
# Produce p-values
p_values <- (1 - pnorm(abs(z_scores))) * 2
(1 - pnorm(abs(z_scores))) * 2
# Produce p-values
(1 - pnorm(abs(z_scores))) * 2
# Transpose and display p-values
data.frame(t(p_values))
# Transpose and display p-values
data.frame(t(round(p_values, 2)))
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Dummy code active status to 1/0
employees$active <- ifelse(employees$active == 'Yes', 1, 0)
# Fit a logistic regression model
glm.fit <- glm(active ~ interview_rating, data = employees, family = 'binomial')
# Produce tabular summary for model results using flextable
flextable::as_flextable(glm.fit)
# Fit a linear model to illustrate why this should not be done with a binary outcome
lm.fit <- lm(active ~ interview_rating, data = employees)
# Construct plots
p_lm <- ggplot2::ggplot(data = employees, aes(x = interview_rating, y = active)) +
ggplot2::geom_point(color = "grey") +
ggplot2::scale_y_continuous(breaks = c(0, .25, .50, .75, 1, 1.25)) +
ggplot2::geom_function(fun = function(x) {lm.fit$coefficients[[2]]*x + lm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::labs(title = "Linear", x = "Interviewer Rating", y = "Active") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Create dummy-coded variable for job level 2+
employees$job_lvl2plus <- ifelse(employees$job_lvl > 1, 1, 0)
# Fit a logistic regression model
glm.fit <- glm(active ~ overtime + job_lvl2plus, data = employees, family = 'binomial')
# Produce tabular summary for model results using flextable
flextable::as_flextable(glm.fit)
# Load library
library(nnet)
# Convert dept to factor
employees$dept <- factor(employees$dept)
# Specify reference level
employees$dept <- relevel(employees$dept, ref = "Human Resources")
# Fit multinomial logistic regression model
multinom.fit <- multinom(dept ~ overtime + business_travel, data = employees)
# Summarize results from model object
summary(multinom.fit)
# Return exponentiated coefficients from model object
exp(coef(multinom.fit))
# Return exponentiated coefficients from model object
data.frame(t(exp(coef(multinom.fit))))
# Calculate z-scores
z_scores <- summary(multinom.fit)$coefficients / summary(multinom.fit)$standard.errors
# Produce p-values
p_values <- (1 - pnorm(abs(z_scores))) * 2
# Transpose and display rounded p-values
data.frame(t(round(p_values, 3)))
View(employees)
unique(employees$job_title)
# Load library
library(nnet)
# Convert dept to factor
employees$dept <- factor(employees$dept)
# Specify reference level
employees$dept <- relevel(employees$dept, ref = "Human Resources")
# Fit multinomial logistic regression model
multinom.fit <- multinom(dept ~ job_title, data = employees)
# Summarize results from model object
summary(multinom.fit)
# Calculate z-scores
z_scores <- summary(multinom.fit)$coefficients / summary(multinom.fit)$standard.errors
# Produce p-values
p_values <- (1 - pnorm(abs(z_scores))) * 2
# Transpose and display rounded p-values
data.frame(t(round(p_values, 3)))
# Load library
library(nnet)
# Convert dept to factor
employees$dept <- factor(employees$dept)
# Specify reference level
employees$dept <- relevel(employees$dept, ref = "Human Resources")
# Fit multinomial logistic regression model
multinom.fit <- multinom(dept ~ overtime, data = employees)
# Summarize results from model object
summary(multinom.fit)
# Calculate z-scores
z_scores <- summary(multinom.fit)$coefficients / summary(multinom.fit)$standard.errors
# Produce p-values
p_values <- (1 - pnorm(abs(z_scores))) * 2
# Transpose and display rounded p-values
data.frame(t(round(p_values, 3)))
# Load library
library(nnet)
# Convert dept to factor
employees$dept <- factor(employees$dept)
# Specify reference level
employees$dept <- relevel(employees$dept, ref = "Human Resources")
# Fit multinomial logistic regression model
multinom.fit <- multinom(dept ~ overtime + ed_field, data = employees)
# Summarize results from model object
summary(multinom.fit)
# Calculate z-scores
z_scores <- summary(multinom.fit)$coefficients / summary(multinom.fit)$standard.errors
# Produce p-values
p_values <- (1 - pnorm(abs(z_scores))) * 2
# Transpose and display rounded p-values
data.frame(t(round(p_values, 3)))
# Return exponentiated coefficients from model object
# Transpose rows to columns for improved readability
data.frame(t(exp(coef(multinom.fit))))
# Return exponentiated coefficients from model object
# Transpose rows to columns for improved readability
data.frame(t(round(exp(coef(multinom.fit)), 2)))
# Return exponentiated coefficients from model object
# Transpose rows to columns for improved readability
data.frame(t(round(exp(coef(multinom.fit))), 2)
# Return exponentiated coefficients from model object
# Transpose rows to columns for improved readability
data.frame(t(round(exp(coef(multinom.fit))), 2)
# Return exponentiated coefficients from model object
# Transpose rows to columns for improved readability
data.frame(t(round(exp(coef(multinom.fit)), 2))
# Return exponentiated coefficients from model object
# Transpose rows to columns for improved readability
data.frame(t(round(exp(coef(multinom.fit))), 2))
# Return exponentiated coefficients from model object
# Transpose rows to columns for improved readability
data.frame(t(round(exp(coef(multinom.fit)), 2)))
# Return exponentiated coefficients from model object
# Transpose rows to columns for improved readability
data.frame(t(exp(coef(multinom.fit))))
?flextable
?knit_print.flextable()
View(glm.fit)
# Calculate z-scores
z_scores <- summary(multinom.fit)$coefficients / summary(multinom.fit)$standard.errors
# Produce p-values
p_values <- (1 - pnorm(abs(z_scores))) * 2
# Transpose and display rounded p-values
data.frame(t(round(p_values, 3)))
# Return exponentiated coefficients from model object
# Transpose rows to columns for improved readability
data.frame(t(exp(coef(multinom.fit))))
unique(employees$ed_field)
View(employees)
ggplot(employees, aes(fill=dept, y=value, x=ed_field)) +
geom_bar(position="fill", stat="identity")
# Load library
library(ggplot2)
ggplot(employees, aes(fill=dept, y=value, x=ed_field)) +
geom_bar(position="fill", stat="identity")
ggplot(employees, aes(fill=dept, y=count(employee_id), x=ed_field)) +
geom_bar(position="fill", stat="identity")
ggplot(employees, aes(x = ed_field)) +
geom_bar(position="fill", stat="identity")
ggplot(employees, aes(x = ed_field))
ggplot(employees, aes(x = ed_field)) +
geom_bar()
ggplot(employees, aes(x = ed_field, fill = dept)) +
geom_bar()
ggplot2::ggplot(employees, aes(x = ed_field, fill = dept)) +
ggplot2::geom_bar() +
ggplot2::ggplot2::theme_bw() +
ggplot2::ggplot(employees, aes(x = ed_field, fill = dept)) +
ggplot2::geom_bar() +
ggplot2::theme_bw()
ggplot2::ggplot(employees, aes(x = ifelse(ed_field == 'Human Resources', 'HR', ed_field), fill = dept)) +
ggplot2::geom_bar() +
ggplot2::theme_bw()
ggplot2::ggplot(employees, aes(x = ifelse(ed_field == 'Human Resources', 'HR', ed_field), fill = dept)) +
ggplot2::labs(xlab = 'Education Field', ylab = 'Count') +
ggplot2::geom_bar() +
ggplot2::theme_bw()
ggplot2::ggplot(employees, aes(x = ifelse(ed_field == 'Human Resources', 'HR', ed_field), fill = dept)) +
ggplot2::labs(x = 'Education Field', y = 'Count') +
ggplot2::geom_bar() +
ggplot2::theme_bw()
View(z_scores)
# Visualize distribution of educational fields by department
ggplot2::ggplot(employees, aes(x = ifelse(ed_field == 'Human Resources', 'HR', ed_field), fill = dept)) +
ggplot2::labs(x = 'Education Field', y = 'Count') +
ggplot2::guides(fill = guide_legend(title = "Department")) +
ggplot2::geom_bar() +
ggplot2::theme_bw()
# Visualize distribution of educational fields by department
ggplot2::ggplot(employees, aes(x = ifelse(ed_field == 'Human Resources', 'HR', ed_field), fill = dept)) +
ggplot2::labs(x = 'Education Field', y = 'Count') +
ggplot2::guides(fill = guide_legend(title = "Department")) +
ggplot2::geom_bar() +
ggplot2::theme_bw()
employees %>% count(ed_field, dept)
library(dplyr)
employees %>% count(ed_field, dept)
# Visualize distribution of educational fields by department
ggplot2::ggplot(employees, aes(x = overtime, fill = dept)) +
ggplot2::labs(x = 'Overtime', y = 'Count') +
ggplot2::guides(fill = guide_legend(title = "Department")) +
ggplot2::geom_bar() +
ggplot2::theme_bw()
employees %>% count(dept)
employees |> count(dept)
employees |> count(dept)
(4.43 - 1) * 100
(1.74 - 1) * 100
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Dummy code active status to 1/0
employees$active <- ifelse(employees$active == 'Yes', 1, 0)
# Fit a logistic regression model
glm.fit <- glm(active ~ interview_rating, data = employees, family = 'binomial')
# Produce tabular summary for model results using flextable
flextable::as_flextable(glm.fit)
View(employees)
# Define ordered factor
employees$engagement <- ordered(employees$engagement, levels = c(1, 2, 3, 4, 5))
str(employees$engagement)
?str
View(glm.fit)
View(employees)
?poly
# Fit a ordinal logistic regression model
ord.fit <- poly(engagement ~ org_tenure, data = employees, Hess = TRUE)
# Load library
library(MASS)
# Fit a ordinal logistic regression model
ord.fit <- poly(engagement ~ org_tenure, data = employees, Hess = TRUE)
# Fit a ordinal logistic regression model
ord.fit <- poly(engagement ~ org_tenure, data = employees)
# Fit a ordinal logistic regression model
ord.fit <- poly(engagement ~ as.factor(org_tenure), data = employees, Hess = TRUE)
# Fit a ordinal logistic regression model
ord.fit <- polr(engagement ~ org_tenure, data = employees, Hess = TRUE)
# Summarize model results
summary(ord.fit)
?polr
# Fit a ordinal logistic regression model
ord.fit <- polr(engagement ~ org_tenure, data = employees)
# Summarize model results
summary(ord.fit)
# Fit a ordinal logistic regression model
ord.fit <- polr(engagement ~ org_tenure, data = employees, Hess = TRUE)
# Summarize model results
summary(ord.fit)
library(brant)
# Fit a ordinal logistic regression model
ord.fit <- polr(engagement ~ org_tenure, data = employees, Hess = TRUE)
# Summarize model results
summary(ord.fit)
# Fit a ordinal logistic regression model
ord.fit <- polr(engagement ~ org_tenure, data = employees, Hess = TRUE)
# Test proportional odds assumption using Brant's test
brant(ord.fit)
# Load library
library(MASS)
library(brant)
# Fit a ordinal logistic regression model
ord.fit <- polr(engagement ~ org_tenure, data = employees, Hess = TRUE)
# Test proportional odds assumption using Brant's test
brant(ord.fit)
x = c(1, 2, 3)
poly(x, 2)
?mode
?str
