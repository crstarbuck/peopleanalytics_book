geom_histogram(aes(y = ..density..), fill = "#262626") +
geom_density(fill = "#F2F2F2", alpha = 0.1) +
facet_wrap(~n)
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_histogram(aes(y = ..density..), fill = "#262626") +
geom_density(fill = "lightblue", alpha = 0.1) +
facet_wrap(~n)
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_histogram(aes(y = ..density..), fill = "#262626") +
geom_density(fill = "lightblue") +
facet_wrap(~n)
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_histogram(aes(y = ..density..), fill = "#262626") +
geom_density(fill = "lightblue", alpha = 0.5) +
facet_wrap(~n)
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_density(fill = "lightblue") +
geom_histogram(aes(y = ..density..), fill = "#262626") +
facet_wrap(~n)
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_histogram(fill = "#262626") +
facet_wrap(~n)
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1,5,10,25,50)
# Initialize empty data frame to hold sample means
sample_means = NULL
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_histogram(fill = "#262626") +
facet_wrap(~n)
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1,5,10,25,50,100)
# Initialize empty data frame to hold sample means
sample_means = NULL
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_histogram(fill = "#262626") +
facet_wrap(~n)
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1,5,10,25,40,50)
# Initialize empty data frame to hold sample means
sample_means = NULL
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_histogram(fill = "#262626") +
facet_wrap(~n)
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1,5,10,25,50,100)
# Initialize empty data frame to hold sample means
sample_means = NULL
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_histogram(fill = "#262626") +
facet_wrap(~n)
mean(sample(rand.unif, n, replace = FALSE, prob = NULL)
mean(sample(rand.unif, n, replace = FALSE, prob = NULL))
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1,5,10,25,50,100)
# Initialize empty data frame to hold sample means
sample_means = NULL
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
mean(sample(rand.unif, n, replace = FALSE, prob = NULL)
mean(sample(rand.unif, n, replace = FALSE, prob = NULL))
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1,5,10,25,50,100)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(1234)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
# Set seed for reproducible random numbers
set.seed(1234)
mean(sample(rand.unif, n, replace = FALSE, prob = NULL))
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1,5,10,25,50,100)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(1234)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
mean(sample(rand.unif, n, replace = FALSE, prob = NULL))
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1,5,10,25,50,100)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(1234)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
mean(sample(rand.unif, n, replace = FALSE, prob = NULL))
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1,5,10,25,50,100)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(1234)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
mean(sample(rand.unif, n, replace = FALSE, prob = NULL))
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(title = "Distribution of Sample Means", x = "x-bar", y = "n") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_histogram(fill = "#262626") +
facet_wrap(~n)
<br />
```{r, echo = FALSE, fig.cap = 'Normal Distribution Properties'}
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/Graphics/Normal Distribution.png")
```
x <- c(1,1,2,3,9)
mean(x)
?mean
mean(c(1,1,2,3,9))
# Fill vector x with integers
x <- c(1,1,2,2,2,3,3,4,4,50)
# Calculate average of vector x
mean(x)
# Fill vector x with integers
x <- c(1,1,2,2,2,3,3,4,4,50)
# Calculate average of vector x
mean(x)
# Fill vector x with integers
x <- c(1,1,2,2,2,3,3,4,4,50)
# Calculate median of vector x
median(x)
median(c(1,1,2,2,2,3,3,4,4,50))
# Calculate median of vector x
mode(x)
# Calculate median of vector x
Modes <- function(x) {
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[tab == max(tab)]
}
Modes
Modes(x)
# Calculate mode of vector x
stat.mode(x)
# Create function to calculate statistical mode
stat.mode <- function(x) {
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[tab == max(tab)]
}
# Calculate mode of vector x
stat.mode(x)
# Fill vector x with integers
x <- c(1,1,1,2,2,2,3,3,4,50)
# Calculate average of vector x
mean(x)
# Calculate median of vector x
median(x)
# Create function to calculate statistical mode
stat.mode <- function(x) {
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[tab == max(tab)]
}
# Calculate mode of vector x
stat.mode(x)
# Calculate median of vector x
range(x)
?range
?max
# Calculate range of vector x
max(x, na.rm = TRUE) - min(x, na.rm = TRUE)
# Return lowest and highest values of vector x
range(x)
# Calculate range of vector x
max(x, na.rm = TRUE) - min(x, na.rm = TRUE)
```{r, message = FALSE}
# Load libraries for data wrangling and viz
library(dplyr)
# Load libraries for data wrangling and viz
library(dplyr)
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(1234)
# Generate uniform population distribution with 1000 values ranging from 1 to 100
rand.unif <- runif(1000, min = 1, max = 100)
# Produce histogram to visualize population distribution
ggplot() +
aes(rand.unif) +
labs(x = "x", y = "N") +
geom_histogram(fill = "#262626")
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:10)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(1234)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(fill = "#262626") +
facet_wrap(~n)
View(sample_means)
sample_means[sample_means$n == 10, "x_bar"]
# Set seed for reproducible random distribution
set.seed(1234)
# Generate uniform population distribution with 1000 values ranging from 1 to 100
rand.unif <- runif(1000, min = 1, max = 100)
# Produce histogram to visualize population distribution
ggplot() +
aes(rand.unif) +
labs(x = "x", y = "N") +
geom_histogram(fill = "#262626")
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:10)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(1234)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(fill = "#262626") +
facet_wrap(~n)
sample_means[sample_means$n == 10, "x_bar"]
sd(sample_means[sample_means$n == 10, "x_bar"])
x_bar <- sample_means[sample_means$n == 10, "x_bar"]
mean(x_bar)
mean(x_bar) + sd(x_bar) * 3
mean(x_bar) - sd(x_bar) * 3
# Calculate mean of sample means with n = 10
x_bar <- sample_means[sample_means$n == 10, "x_bar"]
# Calculate 2 standard errors above and below the mean
ci_upper_bound <- mean(x_bar) + sd(x_bar) * 2
ci_lower_bound <- mean(x_bar) - sd(x_bar) * 2
x[x > ci_lower_bound & x < ci_upper_bound]
length(x[x > ci_lower_bound & x < ci_upper_bound])
# Calculate average of sample means with n = 10
x <- sample_means[sample_means$n == 10, "x_bar"]
# Calculate 2 standard errors above and below the mean
ci_upper_bound <- mean(x) + sd(x) * 2
ci_lower_bound <- mean(x) - sd(x) * 2
length(x[x > ci_lower_bound & x < ci_upper_bound])
length(x[x > ci_lower_bound & x < ci_upper_bound]) / length(x) * 100
length(x[x > ci_lower_bound & x < ci_upper_bound]) / length(x) * 100
# Store sample means with n = 10
x_bars <- sample_means[sample_means$n == 10, "x_bar"]
# Calculate 2 standard errors above and below the mean
ci_upper_bound <- mean(x_bars) + sd(x_bars) * 2
ci_lower_bound <- mean(x_bars) - sd(x_bars) * 2
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci_lower_bound & x < ci_upper_bound]) / length(x_bars) * 100
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci_lower_bound & x_bars < ci_upper_bound]) / length(x_bars) * 100
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x < ci95_upper_bound]) / length(x_bars) * 100
# Calculate 95% and 99% confidence intervals (2 and 3 standard errors above and below the mean)
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 2
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 2
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 3
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 3
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x < ci95_upper_bound]) / length(x_bars) * 100
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci99_lower_bound & x_bars < ci99_upper_bound]) / length(x_bars) * 100
# Store sample means with n = 10
x_bars <- sample_means[sample_means$n == 10, "x_bar"]
# Calculate 95% confidence intervals (2 standard errors above and below the mean)
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 2
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 2
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x < ci95_upper_bound]) / length(x_bars) * 100
# Calculate 99% confidence intervals (3 standard errors above and below the mean)
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 3
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 3
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci99_lower_bound & x_bars < ci99_upper_bound]) / length(x_bars) * 100
# Load libraries for data wrangling and viz
library(dplyr)
# Load libraries for data wrangling and viz
library(dplyr)
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(1234)
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(1234)
# Generate uniform population distribution with 1000 values ranging from 1 to 100
rand.unif <- runif(1000, min = 1, max = 100)
# Produce histogram to visualize population distribution
ggplot() +
aes(rand.unif) +
labs(x = "x", y = "N") +
geom_histogram(fill = "#262626")
As expected, these randomly generated data are uniformly distributed. Next, we will draw 100 random samples of size 1 through 10 and plot the average of each.
```{r, fig.cap = "Distribution of 100 Sample Means (n = 1-10)", fig.align = 'center', message = FALSE}
# Define number of samples to draw from population distribution
samples <- 100
# Populate vector with sample sizes
sample_n <- c(1:10)
# Initialize empty data frame to hold sample means
sample_means = NULL
# Set seed for reproducible random samples
set.seed(1234)
# For each n, draw random samples
for (n in sample_n) {
for (draw in 1:samples) {
# Store sample means in data frame
sample_means <- rbind(sample_means, cbind.data.frame(
n = n,
x_bar = mean(sample(rand.unif, n, replace = FALSE, prob = NULL))))
}
}
# Produce histograms to visualize distributions of sample means
sample_means %>% ggplot() +
aes(x = x_bar, fill = n) +
labs(x = "x-bar", y = "n") +
geom_histogram(fill = "#262626") +
facet_wrap(~n)
# Store sample means with n = 10
x_bars <- sample_means[sample_means$n == 10, "x_bar"]
# Calculate 95% CI (2 standard errors above and below the mean)
# Note: The standard deviation of sample means is known as the standard error
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x < ci95_upper_bound]) / length(x_bars) * 100
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
# Calculate 99% CI (3 standard errors above and below the mean)
ci99_upper_bound <- mean(x_bars) + sd(x_bars) * 2.58
ci99_lower_bound <- mean(x_bars) - sd(x_bars) * 2.58
# Calculate percent of sample means within 99% CI
length(x_bars[x_bars > ci99_lower_bound & x_bars < ci99_upper_bound]) / length(x_bars) * 100
# Store sample means with n = 10
x_bars <- sample_means[sample_means$n == 10, "x_bar"]
# Calculate 95% CI (2 standard errors above and below the mean)
# Note: The standard deviation of sample means is known as the standard error
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
mean(x_bars) + 1.96 * (sd(x_bars) / sqrt(length(x_bars)))
ci95_upper_bound
mean(x_bars) + 1.96 * (sd(x_bars) / sqrt(length(10)))
mean(x_bars) + 1.96 * (sd(x_bars) / sqrt(10))
length(10)
mean(x_bars) + 1.96 * (sd(x_bars) / sqrt(100))
x_bars
mean(x_bars) + 1.96 * (sd(x_bars) / 10)
# Calculate 95% CI (2 standard errors above and below the mean)
ci95_upper_bound <- mean(x_bars) + 1.96 * (sd(x_bars) / sqrt(length(x_bars)))
ci95_lower_bound <- mean(x_bars) - 1.96 * (sd(x_bars) / sqrt(length(x_bars)))
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
# Calculate 95% CI (2 standard errors above and below the mean)
ci95_upper_bound <- mean(x_bars) + sd(x_bars) * 1.96
ci95_lower_bound <- mean(x_bars) - sd(x_bars) * 1.96
# Calculate percent of sample means within 95% CI
length(x_bars[x_bars > ci95_lower_bound & x_bars < ci95_upper_bound]) / length(x_bars) * 100
