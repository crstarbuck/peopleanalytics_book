psych::phi(cont_tbl)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_book/graphics/continuous_differences_test_table.png")
# Load library
library(dplyr)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill standard deviation vector
sds <- c(25, 50, 75)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 120, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab |>
dplyr::group_by(group) |>
dplyr::summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p >= .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
# Subset data
data <- subset(employees, job_title %in% c('Manager', 'Research Scientist'), select = c(annual_comp, job_title))
# Produce box plots to visualize compensation distribution by job title
ggplot2::ggplot(data, aes(x = as.factor(job_title), y = annual_comp, color = job_title)) +
ggplot2::labs(x = "Job Title", y = "Annual Compensation") +
ggplot2::guides(col = guide_legend("Job Title")) +
ggplot2::theme_bw() +
ggplot2::geom_boxplot()
# Compute Shapiro-Wilk test of normality for each group
with(employees, shapiro.test(annual_comp[job_title == 'Manager']))
with(employees, shapiro.test(annual_comp[job_title == 'Research Scientist']))
# Create compensation vectors for two jobs
comp_mgr <- unlist(subset(employees, job_title == 'Manager', select = annual_comp))
comp_rsci <- unlist(subset(employees, job_title == 'Research Scientist', select = annual_comp))
# Run Welch's t-test
t.test(comp_mgr, comp_rsci)
# This assigns each element of results from Welch's t-test to an indexed position in the object
t_rslts <- t.test(comp_mgr, comp_rsci)
t_rslts$statistic # t-statistic
t_rslts$parameter # df
t_rslts$p.value # p-value
t_rslts$method # type of t-test
t_rslts[1] # t-statistic
t_rslts[2] # df
t_rslts[3] # p-value
t_rslts[9] # type of t-test
# Load library
library(effsize)
# Perform Cohen's d
effsize::cohen.d(comp_mgr, comp_rsci)
# Create dummy-coded promotion variable
employees$promo <- ifelse(employees$last_promo == 1, 1, 0)
# Create numeric engagement vectors for promo groups
no_promo <- unlist(subset(employees, promo == 0, select = engagement))
promo <- unlist(subset(employees, promo == 1, select = engagement))
# Perform the Mann-Whitney U (aka Wilcoxon rank-sum) test
wilcox.test(no_promo, promo)
# Calculate Cliff's Delta
effsize::cliff.delta(no_promo, promo)
# Set seed for reproducible results
set.seed(1234)
# Derive happiness index from survey variables
employees$happiness_ind <- (employees$engagement + employees$env_sat + employees$job_sat + employees$rel_sat) / 4
# Sample size of frequent travelers
n = nrow(subset(employees, business_travel == 'Travel_Frequently', select = employee_id))
# Randomly assign half of frequent travelers to treatment and control groups
treat_ids <- sample(unlist(subset(employees, business_travel == 'Travel_Frequently', select = employee_id)), floor(n * .5))
ctrl_ids <- unlist(subset(employees, business_travel == 'Travel_Frequently' & !employee_id %in% treat_ids, select = employee_id))
# Initialize dfs for pre/post metrics
treat_metrics = data.frame(pre_ind = length(treat_ids),
rand_num = rnorm(length(treat_ids), mean = 15, sd = 5) * .001,
post_ind = length(treat_ids),
diff = length(treat_ids))
ctrl_metrics = data.frame(pre_ind = length(ctrl_ids),
rand_num = rnorm(length(ctrl_ids), mean = 0, sd = 1) * .001,
post_ind = length(ctrl_ids),
diff = length(ctrl_ids))
# Store happiness indices for treatment and control groups
treat_metrics$pre_ind <- unlist(subset(employees, employee_id %in% treat_ids, select = happiness_ind))
ctrl_metrics$pre_ind <- unlist(subset(employees, employee_id %in% ctrl_ids, select = happiness_ind))
# Create vectors with artificially inflated post-intervention happiness indices
treat_metrics$post_ind <- treat_metrics$pre_ind + treat_metrics$rand_num
ctrl_metrics$post_ind <- ctrl_metrics$pre_ind + ctrl_metrics$rand_num
# Load library
library(ggpubr)
# Calculate pre/post differences
treat_metrics$diff <- treat_metrics$post_ind - treat_metrics$pre_ind
ctrl_metrics$diff <- ctrl_metrics$post_ind - ctrl_metrics$pre_ind
# Histogram for distribution of pre/post treatment group differences
p_treat <- ggplot2::ggplot() +
ggplot2::aes(treat_metrics$diff) +
ggplot2::labs(title = "Treatment Group", x = "Happiness Index Differences", y = "Frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Histogram for distribution of pre/post control group differences
p_ctrl <- ggplot2::ggplot() +
ggplot2::aes(ctrl_metrics$diff) +
ggplot2::labs(title = "Control Group", x = "Happiness Index Differences", y = "Frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display histograms side-by-side
ggpubr::ggarrange(p_treat, p_ctrl, ncol = 2, nrow = 1)
# Compute Shapiro-Wilk test of normality
shapiro.test(treat_metrics$diff)
shapiro.test(ctrl_metrics$diff)
# Perform one-tailed paired samples t-test for treatment group
t.test(treat_metrics$post_ind, treat_metrics$pre_ind, paired = TRUE, alternative = "greater")
# Perform one-tailed paired samples t-test for control group
t.test(ctrl_metrics$post_ind, ctrl_metrics$pre_ind, paired = TRUE, alternative = "greater")
# Perform Cohen's d
effsize::cohen.d(treat_metrics$post_ind, treat_metrics$pre_ind, paired = TRUE)
# Perform Wilcoxon Signed-Rank test
wilcox.test(treat_metrics$post_ind, treat_metrics$pre_ind, paired = TRUE)
# Perform Wilcoxon Signed-Rank test
wilcox.test(ctrl_metrics$post_ind, ctrl_metrics$pre_ind, paired = TRUE)
# Run Cliff's Delta
effsize::cliff.delta(treat_metrics$post_ind, treat_metrics$pre_ind, paired = TRUE)
# Perform Levene's test for homogeneity of variance
car::leveneTest(annual_comp ~ as.factor(job_sat), data = employees)
# Create function to visualize distribution
dist.viz <- function(data, x) {
viz <- ggplot2::ggplot() +
ggplot2::aes(data) +
ggplot2::labs(title = paste("Job Sat = ", x), x = "Annual Compensation", y = "Frequency") +
ggplot2::geom_histogram(fill = "#414141") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
return(viz)
}
# Produce annual compensation vectors for each job satisfaction level
# Unlist() is needed to convert the default object from subset() into a numeric vector
group_1 <- unlist(subset(employees, job_sat == 1, select = annual_comp))
group_2 <- unlist(subset(employees, job_sat == 2, select = annual_comp))
group_3 <- unlist(subset(employees, job_sat == 3, select = annual_comp))
group_4 <- unlist(subset(employees, job_sat == 4, select = annual_comp))
# Call UDF to build annual comp histogram for each job satisfaction level
viz_1 <- dist.viz(data = group_1, x = 1)
viz_2 <- dist.viz(data = group_2, x = 2)
viz_3 <- dist.viz(data = group_3, x = 3)
viz_4 <- dist.viz(data = group_4, x = 4)
# Display distribution visualizations
ggpubr::ggarrange(viz_1, viz_2, viz_3, viz_4,
ncol = 2, nrow = 2)
# Generate residuals for each group
residuals <- c(group_1 - mean(group_1), group_2 - mean(group_2), group_3 - mean(group_3), group_4 - mean(group_4))
# Create a Q-Q plot of residuals
ggpubr::ggqqplot(residuals)
# Compute Shapiro-Wilk test of normality
shapiro.test(residuals)
# Build a linear model using the natural logarithm of annual comp
ln.model <- lm(log(annual_comp) ~ job_sat, data = employees)
# Build a linear model using the log base 10 of annual comp
log10.model <- lm(log10(annual_comp) ~ job_sat, data = employees)
# Build a linear model using the square root of annual comp
sqrt.model <- lm(sqrt(annual_comp) ~ job_sat, data = employees)
# Store Q-Q plots to viz objects
ln.viz <- ggpubr::ggqqplot(residuals(ln.model)) + ggtitle("Natural Log")
log10.viz <- ggpubr::ggqqplot(residuals(log10.model)) + ggtitle("Log Base 10")
sqrt.viz <- ggpubr::ggqqplot(residuals(sqrt.model)) + ggtitle("Square Root")
# Display Q-Q plots of residuals
ggpubr::ggarrange(ln.viz, log10.viz, sqrt.viz,
ncol = 3, nrow = 1)
# One-way ANOVA investigating mean differences in annual comp by job satisfaction
one.way <- aov(annual_comp ~ job_sat, data = employees)
summary(one.way)
# Nonparametric Kruskal one-way ANOVA
kruskal.test(annual_comp ~ job_sat, data = employees)
pairwise.wilcox.test(employees$annual_comp, employees$job_sat, p.adjust.method = "BH")
# Calculate mean for each IV pair
combos <- aggregate(annual_comp ~ job_sat + stock_opt_lvl, employees, mean)
combos
# Factorial ANOVA investigating mean differences in annual comp by job satisfaction and stock option level
factorial <- aov(annual_comp ~ job_sat + stock_opt_lvl, data = employees)
summary(factorial)
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
# Factorial ANOVA investigating mean differences in annual comp by job satisfaction and stock option level
factorial <- aov(annual_comp ~ factor(job_sat) + stock_opt_lvl, data = employees)
summary(factorial)
# Factorial ANOVA investigating mean differences in annual comp by job satisfaction and stock option level
factorial <- aov(annual_comp ~ factor(job_sat) + factor(stock_opt_lvl), data = employees)
summary(factorial)
# Factorial ANOVA investigating mean differences in annual comp by job satisfaction and stock option level
factorial <- aov(annual_comp ~ job_sat + stock_opt_lvl, data = employees)
summary(factorial)
# Factorial ANOVA investigating mean differences in annual comp by job satisfaction and stock option level
factorial <- aov(annual_comp ~ factor(job_sat) + factor(stock_opt_lvl), data = employees)
summary(factorial)
ggplot2::ggplot(combos, aes(x = factor(job_sat), y = annual_comp, group = factor(stock_opt_lvl))) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = factor(job_sat), y = annual_comp, group = factor(stock_opt_lvl))) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
# One-way ANOVA investigating mean differences in annual comp by job satisfaction
one.way <- aov(annual_comp ~ as.factor(job_sat), data = employees)
summary(one.way)
# Nonparametric Kruskal one-way ANOVA
kruskal.test(annual_comp ~ as.factor(job_sat), data = employees)
# Nonparametric Kruskal one-way ANOVA
kruskal.test(annual_comp ~ job_sat, data = employees)
# Nonparametric Kruskal one-way ANOVA
kruskal.test(annual_comp ~ as.factor(job_sat), data = employees)
pairwise.wilcox.test(employees$annual_comp, as.factor(employees$job_sat), p.adjust.method = "BH")
pairwise.wilcox.test(employees$annual_comp, employees$job_sat, p.adjust.method = "BH")
# Calculate mean for each IV pair
combos <- aggregate(annual_comp ~ as.factor(job_sat) + as.factor(stock_opt_lvl), employees, mean)
combos
# Factorial ANOVA investigating mean differences in annual comp by job satisfaction and stock option level
factorial <- aov(annual_comp ~ factor(job_sat) + factor(stock_opt_lvl), data = employees)
summary(factorial)
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
# Factorial ANOVA investigating mean differences in annual comp by job satisfaction and stock option level
factorial <- aov(annual_comp ~ factor(job_sat) + factor(stock_opt_lvl), data = employees)
summary(factorial)
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl)))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp), group = stock_opt_lvl) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl)))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = as.factor(stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl)))
ggplot2::ggplot(combos, aes(x = as.factor(job_sat), y = annual_comp, group = as.factor(stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl)))
ggplot2::ggplot(combos, aes(x = as.factor(job_sat), y = annual_comp, group = as.factor(stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = as.factor(job_sat), y = annual_comp, group = as.factor(stock_opt_lvl) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = as.factor(job_sat), y = annual_comp, group = as.factor(stock_opt_lvl))) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
ggplot2::ggplot(combos, aes(x = job_sat, y = annual_comp, group = stock_opt_lvl)) +
ggplot2::geom_line(aes(color = stock_opt_lvl)) +
ggplot2::labs(x = "Job Satisfaction", y = "Annual Compensation (USD)") +
ggplot2::guides(col = guide_legend("Stock Option Level")) +
ggplot2::theme_bw() +
ggplot2::geom_point(aes(color = stock_opt_lvl))
# Load library
library(ggplot2)
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Save predicted values and residuals
df2$predicted <- predict(lm.fit.2)
df2$residuals <- residuals(lm.fit.2)
# Visualize model fit to observations
ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_segment(aes(xend = X, yend = predicted)) +
ggplot2::geom_point(shape = 1) +
ggplot2::geom_point(aes(y = predicted)) +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Load library
library(ggpubr)
# Set seed for reproducibility
set.seed(1234)
# Construct basic data frame
df1 <- data.frame(X = c(25, 75),
Y = c(205, 390))
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_point() +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# Load library
library(peopleanalytics)
# Load data
data("employees")
# Subset employees data frame; leads are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD leads on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
# Set seed for reproducibility
set.seed(1234)
# Simulate n observations
n <- 20
X <- runif(n, 0, 5)
Y <- 1 + 3*X + rnorm(n, 0, 1)
df.orig <- data.frame(X = X, Y = Y)
# Model data
model <- lm(Y ~ X)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df.orig, aes(x = X, y = Y)) +
ggplot2::geom_point() +
ggplot2::geom_function(fun = function(x) {model$coefficients[[2]]*x + model$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Model data with non-influential outliers
X.out <- c(X, 8)
Y.out <- c(Y, 25)
df.out <- data.frame(X = X.out, Y = Y.out)
model.out <- lm(Y.out ~ X.out)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df.out, aes(x = X, y = Y)) +
ggplot2::geom_point(col = ifelse(df.out$X == 8, "red", "black"), size = ifelse(df.out$X == 8, 2, 1)) +
ggplot2::geom_function(fun = function(x) {model$coefficients[[2]]*x + model$coefficients[[1]]}, colour = "black", linetype = "solid") +
ggplot2::geom_function(fun = function(x) {model.out$coefficients[[2]]*x + model.out$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Model data with influential (high leverage) observations
X.lev <- c(X, 8)
Y.lev <- c(Y, 5)
df.lev <- data.frame(X = X.lev, Y = Y.lev)
model.lev <- lm(Y.lev ~ X.lev)
# Visualize model fit to observations
p3 <- ggplot2::ggplot(data = df.lev, aes(x = X, y = Y)) +
ggplot2::geom_point(col = ifelse(df.out$X == 8, "red", "black"), size = ifelse(df.out$X == 8, 2, 1)) +
ggplot2::geom_function(fun = function(x) {model$coefficients[[2]]*x + model$coefficients[[1]]}, colour = "black", linetype = "solid") +
ggplot2::geom_function(fun = function(x) {model.lev$coefficients[[2]]*x + model.lev$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Display distribution visualizations
ggpubr::ggarrange(p2, p3, ncol = 2, nrow = 1)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(slm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
# Square root transformation of YTD leads
slm.fit.trans <- lm(sqrt(ytd_leads) ~ engagement, data)
# Natural logarithmic transformation of YTD leads
slm.fit.trans <- lm(log(ytd_leads) ~ engagement, data)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(slm.fit$residuals) +
ggplot2::labs(x = "YTD Leads Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_leads)) +
ggplot2::labs(x = "Engagement", y = "YTD Leads") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 40, label = "y = 20.1x + 1.6", colour = "red") +
ggplot2::theme_bw()
# Load library
library(equatiomatic)
# Convert model to LaTex regression equation
equatiomatic::extract_eq(slm.fit)
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(ytd_sales ~ engagement + job_lvl + stock_opt_lvl + org_tenure, data)
# Load library
library(equatiomatic)
# Convert model to LaTex regression equation
equatiomatic::extract_eq(slm.fit)
# Produce correlation matrix
GGally::ggpairs(subset(data, select = c(ytd_sales, engagement, job_lvl, work_exp, stock_opt_lvl, job_tenure, org_tenure, mgr_tenure)))
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(ytd_sales ~ engagement + job_lvl + stock_opt_lvl + org_tenure, data)
# Load library
library(car)
# Produce VIF for each predictor
car::vif(mlm.fit)
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Regress YTD sales on a combination of predictors
mlm.fit <- lm(sqrt(ytd_sales) ~ engagement + job_lvl + stock_opt_lvl + org_tenure, data)
# Remove high leverage observations per Cook's distance
w <- abs(rstudent(mlm.fit)) < 3 & abs(cooks.distance(mlm.fit)) < 4/nrow(mlm.fit$model)
mlm.fit <- update(mlm.fit, weights = as.numeric(w))
# Produce 2x2 visuals for model diagnostics
par(mfrow = c(2,2))
plot(mlm.fit)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(mlm.fit)
# Produce histogram to visualize distribution of model residuals
ggplot2::ggplot() +
ggplot2::aes(mlm.fit$residuals) +
ggplot2::labs(x = "YTD Sales Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
