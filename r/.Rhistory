ggplot2::annotate("text", x = 1, y = 225, label = "High organization tenure", colour = "red") +
ggplot2::annotate("text", x = 1, y = 280, label = "Low organization tenure", colour = "blue") +
ggplot2::theme_bw()
ggplot2::ggplot(data = data, aes(x = job_lvl, y = sqrt(ytd_sales))) +
ggplot2::labs(x = "Job Level", y = "Square Root of YTD Sales") +
#ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {mlm.fit.int$coefficients[[4]] * (mean(data$org_tenure) + sd(data$org_tenure)) * x + mlm.fit.int$coefficients[[1]]}, colour = "red") +
ggplot2::geom_function(fun = function(x) {mlm.fit.int$coefficients[[4]] * (mean(data$org_tenure) - sd(data$org_tenure)) * x + mlm.fit.int$coefficients[[1]]}, colour = "blue") +
ggplot2::annotate("text", x = 1.5, y = 225, label = "High organization tenure", colour = "red") +
ggplot2::annotate("text", x = 1.5, y = 280, label = "Low organization tenure", colour = "blue") +
ggplot2::theme_bw()
ggplot2::ggplot(data = data, aes(x = job_lvl, y = sqrt(ytd_sales))) +
ggplot2::labs(x = "Job Level", y = "Square Root of YTD Sales") +
#ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {mlm.fit.int$coefficients[[4]] * (mean(data$org_tenure) + sd(data$org_tenure)) * x + mlm.fit.int$coefficients[[1]]}, colour = "red") +
ggplot2::geom_function(fun = function(x) {mlm.fit.int$coefficients[[4]] * (mean(data$org_tenure) - sd(data$org_tenure)) * x + mlm.fit.int$coefficients[[1]]}, colour = "blue") +
ggplot2::annotate("text", x = 1.5, y = 250, label = "High organization tenure", colour = "red") +
ggplot2::annotate("text", x = 1.5, y = 280, label = "Low organization tenure", colour = "blue") +
ggplot2::theme_bw()
ggplot2::ggplot(data = data, aes(x = job_lvl, y = sqrt(ytd_sales))) +
ggplot2::labs(x = "Job Level", y = "Square Root of YTD Sales") +
#ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {mlm.fit.int$coefficients[[4]] * (mean(data$org_tenure) + sd(data$org_tenure)) * x + mlm.fit.int$coefficients[[1]]}, colour = "red") +
ggplot2::geom_function(fun = function(x) {mlm.fit.int$coefficients[[4]] * (mean(data$org_tenure) - sd(data$org_tenure)) * x + mlm.fit.int$coefficients[[1]]}, colour = "blue") +
ggplot2::annotate("text", x = 1.5, y = 255, label = "High organization tenure", colour = "red") +
ggplot2::annotate("text", x = 1.5, y = 280, label = "Low organization tenure", colour = "blue") +
ggplot2::theme_bw()
ggplot2::ggplot(data = data, aes(x = job_lvl, y = sqrt(ytd_sales))) +
ggplot2::labs(x = "Job Level", y = "Square Root of YTD Sales") +
#ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {mlm.fit.int$coefficients[[4]] * (mean(data$org_tenure) + sd(data$org_tenure)) * x + mlm.fit.int$coefficients[[1]]}, colour = "red") +
ggplot2::geom_function(fun = function(x) {mlm.fit.int$coefficients[[4]] * (mean(data$org_tenure) - sd(data$org_tenure)) * x + mlm.fit.int$coefficients[[1]]}, colour = "blue") +
ggplot2::annotate("text", x = 1.5, y = 255, label = "High organization tenure", colour = "red") +
ggplot2::annotate("text", x = 1.5, y = 280, label = "Low organization tenure", colour = "blue") +
ggplot2::theme_bw()
# Load library
library(dplyr)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; leads are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD leads on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
# Run the Breusch-Pagan test for evaluate homoscedasticity
lmtest::bptest(slm.fit)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(slm.fit)
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_leads)) +
ggplot2::labs(x = "Engagement", y = "YTD Leads") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 40, label = "y = 20.1x + 1.6", colour = "red") +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Save predicted values and residuals
df2$predicted <- predict(lm.fit.2)
df2$residuals <- residuals(lm.fit.2)
# Visualize model fit to observations
ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_segment(aes(xend = X, yend = predicted)) +
ggplot2::geom_point(shape = 1) +
ggplot2::geom_point(aes(y = predicted)) +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Append centered predictors to data
data$job_lvl_cntrd <- data$job_lvl - mean(data$job_lvl)
data$org_tenure_cntrd <- data$org_tenure - mean(data$org_tenure)
# Regress YTD sales on a combination of centered predictors with interaction term
mlm.fit.int <- lm(sqrt(ytd_sales) ~ job_lvl_cntrd * org_tenure_cntrd, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(mlm.fit.int)
# Regress YTD sales on a combination of predictors with interaction term
mlm.fit.int <- lm(sqrt(ytd_sales) ~ job_lvl * org_tenure, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(mlm.fit.int)
View(data)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/mediation_paths.png")
# Load library
library(dplyr)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; leads are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD leads on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
View(data)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.one <- lm(sqrt(ytd_sales) ~ job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.one)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.two <- lm(annual_comp ~ job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.two)
cor(data)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.two <- lm(ytd_leads ~ job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.two)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.two <- lm(job_sat ~ job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.two)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.two <- lm(stock_opt_lvl ~ job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.two)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.three <- lm(sqrt(ytd_sales) ~ stock_opt_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.three)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.four <- lm(sqrt(ytd_sales) ~ job_lvl + stock_opt_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.four)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.one <- lm(sqrt(ytd_sales) ~ stock_opt_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.one)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.two <- lm(job_lvl ~ stock_opt_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.two)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.three <- lm(sqrt(ytd_sales) ~ job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.three)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.four <- lm(sqrt(ytd_sales) ~ stock_opt_lvl + job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.four)
# Load library
library(dplyr)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; leads are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD leads on engagement
slm.fit <- lm(ytd_leads ~ engagement, data)
library(flextable)
# Produce tabular summary for model results using flextable
flextable::as_flextable(slm.fit)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/mediation_paths.png")
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.one <- lm(sqrt(ytd_sales) ~ stock_opt_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.one)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.one <- lm(sqrt(ytd_sales) ~ stock_opt_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.one)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.two <- lm(job_lvl ~ stock_opt_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.two)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.three <- lm(sqrt(ytd_sales) ~ job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.three)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.four <- lm(sqrt(ytd_sales) ~ stock_opt_lvl + job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.four)
View(data)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.one <- lm(sqrt(ytd_sales) ~ age, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.one)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.two <- lm(age ~ job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.two)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.two <- lm(job_lvl ~ age, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.two)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.three <- lm(sqrt(ytd_sales) ~ job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.three)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.four <- lm(sqrt(ytd_sales) ~ age + job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.four)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.one <- lm(sqrt(ytd_sales) ~ ed_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.one)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.two <- lm(job_lvl ~ ed_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.two)
# Regress YTD sales on a combination of centered predictors with interaction term
med.fit.four <- lm(sqrt(ytd_sales) ~ ed_lvl + job_lvl, data)
# Produce tabular summary with standardized coefficients
flextable::as_flextable(med.fit.four)
years <- 1:5
months <- 1:12
years <- 1:5
months <- 1:12
jobs <- c('Software Engineer', 'Data Scientist', 'People Analyst')
levels <- 1:8
expand.grid(years, months, jobs, levels)
names(combos)[1] <- "year"
combos <- expand.grid(years, months, jobs, levels)
names(combos)[1] <- "year"
names(combos)[2] <- "month"
names(combos)[3] <- "job"
names(combos)[4] <- "level"
View(combos)
months <- 1:12
years <- 1:5
jobs <- c('Software Engineer', 'Data Scientist', 'People Analyst')
levels <- 1:8
combos <- expand.grid(years, months, jobs, levels)
names(combos)[1] <- "month"
names(combos)[2] <- "year"
names(combos)[3] <- "job"
names(combos)[4] <- "level"
months <- 1:12
years <- 1:5
jobs <- c('Software Engineer', 'Data Scientist', 'People Analyst')
levels <- 1:8
combos <- expand.grid(months, years, jobs, levels)
names(combos)[1] <- "month"
names(combos)[2] <- "year"
names(combos)[3] <- "job"
names(combos)[4] <- "level"
months <- 1:12
years <- 1:5
jobs <- c('Data Scientist', 'Data Engineer', 'People Analyst', 'Visualization Specialist', 'Insights Consultant')
levels <- 1:8
combos <- expand.grid(months, years, jobs, levels)
names(combos)[1] <- "month"
names(combos)[2] <- "year"
names(combos)[3] <- "job"
names(combos)[4] <- "level"
years <- 1:5
months <- 1:12
jobs <- c('Data Scientist', 'Data Engineer', 'People Analyst', 'Visualization Specialist', 'Insights Consultant')
levels <- 1:8
combos <- expand.grid(years, months, jobs, levels)
names(combos)[1] <- "year"
names(combos)[2] <- "month"
names(combos)[3] <- "job"
names(combos)[4] <- "level"
get.rate <- function(month, job){
y = 3 + 3.5*month - 1.5*month^2
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'])))
}
View(data)
get.rate <- function(month, job){
y = 3 + 3.5*month - .15*month^2
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'])))
}
get.rate <- function(month, job){
y = 3 + 3.5*month - 1.1*month^2
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'])))
}
get.rate <- function(month, job){
y = 3 + 3.5*month - .8*month^2
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'])))
}
get.rate <- function(month, job){
y = 3 + 5*month - .5*month^2
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'])))
}
get.rate <- function(month, job){
y = 3 + 6*month - .5*month^2
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'])))
}
get.rate <- function(month, job, level){
y = 4 + 6*month - .5*month^2 - .3*level
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'], combos[i,'level'])))
}
get.rate <- function(month, job, level){
mutate(job = case_when(
job == 'Data Scientist' ~ "1",
job == 'Data Engineer' ~ "2",
job == 'People Analyst' ~ "3",
job == 'Visualization Specialist' ~ "4",
job == 'Insights Consultant' ~ "5",
TRUE ~ "0"
))
y = 4 + 6*month - .5*month^2 - .3*level
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'], combos[i,'level'])))
}
get.rate <- function(month, job, level){
if (job == 'Data Scientist') {
intercept = 1 } else if (job == 'Data Engineer') {
intercept = 2 } else if (job == 'People Analyst') {
intercept = 3 } else if (job = 'Visualization Specialist') {
intercept = 4 } else if (job = 'Insights Consultant') {
intercept = 5} else { intercept = 0 }
y = intercept + 6*month - .5*month^2 - .3*level
return(y)
}
get.rate <- function(month, job, level){
if (job == 'Data Scientist') {
intercept = 1 } else if (job == 'Data Engineer') {
intercept = 2 } else if (job == 'People Analyst') {
intercept = 3 } else if (job = 'Visualization Specialist') {
intercept = 4 } else if (job = 'Insights Consultant') {
intercept = 5} else { intercept = 0 }
y = intercept + 6*month - .5*month^2 - .3*level
return(y)
}
get.rate <- function(month, job, level){
if (job == 'Data Scientist') {
intercept = 1 } else if (job == 'Data Engineer') {
intercept = 2 } else if (job == 'People Analyst') {
intercept = 3 } else if (job = 'Visualization Specialist') {
intercept = 4 } else if (job = 'Insights Consultant') {
intercept = 5} else { intercept = 0 }
y = intercept + 6*month - .5*month^2 - .3*level
return(y)
}
get.rate <- function(month, job, level){
if (job == 'Data Scientist') {
intercept = 1 } else if (job == 'Data Engineer') {
intercept = 2 } else if (job == 'People Analyst') {
intercept = 3 } else if (job == 'Visualization Specialist') {
intercept = 4 } else if (job == 'Insights Consultant') {
intercept = 5} else { intercept = 0 }
y = intercept + 6*month - .5*month^2 - .3*level
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'], combos[i,'level'])))
}
get.rate <- function(month, job, level){
if (job == 'Data Scientist') {
intercept = 5 } else if (job == 'Data Engineer') {
intercept = 3.5 } else if (job == 'People Analyst') {
intercept = 3 } else if (job == 'Visualization Specialist') {
intercept = 4 } else if (job == 'Insights Consultant') {
intercept = 4.5} else { intercept = 0 }
y = intercept + 6*month - .5*month^2 - .3*level
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'], combos[i,'level'])))
}
get.rate <- function(month, job, level){
if (job == 'Data Scientist') {
intercept = 8 } else if (job == 'Data Engineer') {
intercept = 6.5 } else if (job == 'People Analyst') {
intercept = 5 } else if (job == 'Visualization Specialist') {
intercept = 6 } else if (job == 'Insights Consultant') {
intercept = 6.5} else { intercept = 0 }
y = intercept + 6*month - .5*month^2 - .3*level
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'month'], combos[i,'job'], combos[i,'level'])))
}
get.rate <- function(year, month, job, level){
if (job == 'Data Scientist') {
intercept = 8 } else if (job == 'Data Engineer') {
intercept = 6.5 } else if (job == 'People Analyst') {
intercept = 5 } else if (job == 'Visualization Specialist') {
intercept = 6 } else if (job == 'Insights Consultant') {
intercept = 6.5} else { intercept = 0 }
y = intercept + 1.5*year + 6*month - .5*month^2 - .3*level
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'year'], combos[i,'month'], combos[i,'job'], combos[i,'level'])))
}
write.csv(data, "turnover_trends.csv", row.names = FALSE)
write.csv(data, "/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/turnover_trends.csv", row.names = FALSE)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
years <- 1:5
months <- 1:12
jobs <- c('People Scientist', 'Data Engineer', 'People Analyst', 'Visualization Specialist', 'Insights Consultant')
levels <- 1:8
combos <- expand.grid(years, months, jobs, levels)
names(combos)[1] <- "year"
names(combos)[2] <- "month"
names(combos)[3] <- "job"
names(combos)[4] <- "level"
get.rate <- function(year, month, job, level){
if (job == 'Data Scientist') {
intercept = 8 } else if (job == 'Data Engineer') {
intercept = 6.5 } else if (job == 'People Analyst') {
intercept = 5 } else if (job == 'Visualization Specialist') {
intercept = 6 } else if (job == 'Insights Consultant') {
intercept = 6.5} else { intercept = 0 }
y = intercept + 1.5*year + 6*month - .5*month^2 - .3*level
return(y)
}
data = NULL
for (i in 1:nrow(combos)){
data <- rbind(data, cbind.data.frame(
year = combos[i,'year'],
month = combos[i,'month'],
job = combos[i,'job'],
level = combos[i,'level'],
turnover_rate = get.rate(combos[i,'year'], combos[i,'month'], combos[i,'job'], combos[i,'level'])))
}
write.csv(data, "/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/turnover_trends.csv", row.names = FALSE)
