ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::scale_fill_manual(values = c("No" = "#BFBFBF",
"Yes" = "#0070C0")) +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# Load library
library(dplyr)
# Calculate departmental percent of total for overtime and non-overtime groups
dept_ot <- employees %>%
dplyr::group_by(dept, overtime) %>%
dplyr::summarise(cnt = n()) %>%
dplyr::mutate(freq = round(cnt / sum(cnt) * 100, 0)) %>%
dplyr::arrange(dept, overtime)
# Visualize distribution of educational fields by department
ggplot2::ggplot(dept_ot, aes(x = dept, y = freq, fill = overtime)) +
ggplot2::labs(x = 'Department', y = 'Percent') +
ggplot2::guides(fill = guide_legend(title = "Overtime")) +
ggplot2::geom_bar(position = "fill", stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::scale_fill_manual(values = c("No" = "#BFBFBF",
"Yes" = "#0070C0")) +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# Load library
library(dplyr)
# Calculate departmental percent of total for overtime and non-overtime groups
dept_ot <- employees %>%
dplyr::group_by(dept, overtime) %>%
dplyr::summarise(cnt = n()) %>%
dplyr::mutate(freq = round(cnt / sum(cnt) * 100, 0)) %>%
dplyr::arrange(dept, overtime)
# Order overtime factor for sorting
dept_ot$overtime <- factor(dept_ot$overtime, levels = c('No', 'Yes'))
# Visualize distribution of educational fields by department
ggplot2::ggplot(dept_ot, aes(x = dept, y = freq, fill = overtime)) +
ggplot2::labs(x = 'Department', y = 'Percent') +
ggplot2::guides(fill = guide_legend(title = "Overtime")) +
ggplot2::geom_bar(position = "fill", stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::scale_fill_manual(values = c("No" = "#BFBFBF",
"Yes" = "#0070C0")) +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# Load library
library(dplyr)
# Calculate departmental percent of total for overtime and non-overtime groups
dept_ot <- employees %>%
dplyr::group_by(dept, overtime) %>%
dplyr::summarise(cnt = n()) %>%
dplyr::mutate(freq = round(cnt / sum(cnt) * 100, 0)) %>%
dplyr::arrange(dept, overtime)
# Order overtime factor for sorting
dept_ot$overtime <- factor(dept_ot$overtime, levels = c('Yes', 'No'))
# Visualize distribution of educational fields by department
ggplot2::ggplot(dept_ot, aes(x = dept, y = freq, fill = overtime)) +
ggplot2::labs(x = 'Department', y = 'Percent') +
ggplot2::guides(fill = guide_legend(title = "Overtime")) +
ggplot2::geom_bar(position = "fill", stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::scale_fill_manual(values = c("No" = "#BFBFBF",
"Yes" = "#0070C0")) +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# Calculate departmental percent of total for overtime and non-overtime groups
ed_dept <- employees %>%
dplyr::group_by(ed_field, dept) %>%
dplyr::summarise(cnt = n()) %>%
dplyr::mutate(freq = round(cnt / sum(cnt) * 100, 0)) %>%
dplyr::arrange(ed_field, dept)
# Order overtime factor for sorting
ed_dept$dept <- factor(ed_dept$dept, levels = c('Human Resources',
'Research & Development',
'Sales'))
# Visualize distribution of educational fields by department
ggplot2::ggplot(ed_dept, aes(x = ed_field, y = freq, fill = dept)) +
ggplot2::guides(fill = guide_legend(title = "Department")) +
ggplot2::geom_bar(position = "fill", stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::scale_fill_manual(values = c("Human Resources" = "#BFBFBF",
"Research & Development" = "#808080",
"Sales" = "#404040")) +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# Calculate departmental percent of total for overtime and non-overtime groups
ed_dept <- employees %>%
dplyr::group_by(ed_field, dept) %>%
dplyr::summarise(cnt = n()) %>%
dplyr::mutate(freq = round(cnt / sum(cnt) * 100, 0)) %>%
dplyr::arrange(ed_field, dept)
# Order overtime factor for sorting
ed_dept$dept <- factor(ed_dept$dept, levels = c('Human Resources',
'Research & Development',
'Sales'))
# Visualize distribution of educational fields by department
ggplot2::ggplot(ed_dept, aes(x = ed_field, y = freq, fill = dept)) +
ggplot2::guides(fill = guide_legend(title = "Department")) +
ggplot2::geom_bar(position = "fill", stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
#ggplot2::scale_fill_manual(values = c("Human Resources" = "#BFBFBF",
#                                      "Research & Development" = "#808080",
#                                      "Sales" = "#404040")) +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# Load library
library(dplyr)
# Calculate departmental percent of total for overtime and non-overtime groups
dept_ot <- employees %>%
dplyr::group_by(dept, overtime) %>%
dplyr::summarise(cnt = n()) %>%
dplyr::mutate(freq = round(cnt / sum(cnt) * 100, 0)) %>%
dplyr::arrange(dept, overtime)
# Order overtime factor for sorting
dept_ot$overtime <- factor(dept_ot$overtime, levels = c('Yes',
'No'))
# Visualize distribution of educational fields by department
ggplot2::ggplot(dept_ot, aes(x = dept, y = freq, fill = overtime)) +
ggplot2::guides(fill = guide_legend(title = "Overtime")) +
ggplot2::geom_bar(position = "fill", stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
#ggplot2::scale_fill_manual(values = c("No" = "#BFBFBF",
#                                      "Yes" = "#0070C0")) +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# Calculate departmental percent of total for overtime and non-overtime groups
ed_dept <- employees %>%
dplyr::group_by(ed_field, dept) %>%
dplyr::summarise(cnt = n()) %>%
dplyr::mutate(freq = round(cnt / sum(cnt) * 100, 0)) %>%
dplyr::arrange(ed_field, dept)
# Order overtime factor for sorting
ed_dept$dept <- factor(ed_dept$dept, levels = c('Human Resources',
'Research & Development',
'Sales'))
# Visualize distribution of educational fields by department
ggplot2::ggplot(ed_dept, aes(x = ed_field, y = freq, fill = dept)) +
ggplot2::guides(fill = guide_legend(title = "Department")) +
ggplot2::geom_bar(position = "fill", stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::scale_fill_manual(values = c("Human Resources" = "#0070C0",
"Research & Development" = "#FFC000",
"Sales" = "#70AD47")) +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# Load library
library(dplyr)
# Calculate departmental percent of total for overtime and non-overtime groups
dept_ot <- employees %>%
dplyr::group_by(dept, overtime) %>%
dplyr::summarise(cnt = n()) %>%
dplyr::mutate(freq = round(cnt / sum(cnt) * 100, 0)) %>%
dplyr::arrange(dept, overtime)
# Order overtime factor for sorting
dept_ot$overtime <- factor(dept_ot$overtime, levels = c('Yes',
'No'))
# Visualize distribution of educational fields by department
ggplot2::ggplot(dept_ot, aes(x = dept, y = freq, fill = overtime)) +
ggplot2::guides(fill = guide_legend(title = "Overtime")) +
ggplot2::geom_bar(position = "fill", stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::scale_fill_manual(values = c("No" = "#BFBFBF",
"Yes" = "#0070C0")) +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank())
# Load library
library(dplyr)
# Load survey response data
survey_dat <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/survey_responses.csv")
# Show dimensions of survey data
dim(survey_dat)
# Load library
library(psych)
# Kaiser-Meyer-Olkin (KMO) statistic
psych::KMO(survey_dat)
# Bartlett's Test of Sphericity
psych::cortest.bartlett(cor(survey_dat), nrow(survey_dat))
# Produce scree plot
psych::scree(survey_dat, pc = FALSE)
# Load library
library(ggplot2)
# Perform PCA
pca <- prcomp(survey_dat, scale = TRUE)
# Calculate explained variance for each principal component
pca_var = (pca$sdev^2 / sum(pca$sdev^2)) * 100
# Create scree plot
ggplot2::qplot(1:length(pca_var), pca_var) +
ggplot2::geom_line() +
ggplot2::scale_x_continuous(breaks = 1:length(pca_var)) +
ggplot2::labs(x = "Principal Component", y = "Variance Explained (%)") +
ggplot2::theme_bw()
# Principal axis factoring using 3 factors and oblimin rotation
efa.fit <- psych::fa(survey_dat, nfactors = 3, rotate = 'oblimin')
# Display factor loadings
efa.fit$loadings
psych::fa.diagram(efa.fit)
# Load library
library(GGally)
# Visualize correlation matrix
GGally::ggpairs(subset(survey_dat, select = c("eng_1", "eng_2", "eng_3", "ret_1", "ret_2", "ret_3")))
# Load library
library(lavaan)
# Model specification; each line represents a separate latent factor
model <- paste('engagement =~ eng_1 + eng_2 + eng_3
retention =~ ret_1 + ret_2 + ret_3')
# Fit the model
cfa.fit <- lavaan::cfa(model, data = survey_dat)
# Load library
library(lavaanPlot)
# Visualize path diagram
lavaanPlot::lavaanPlot(model = cfa.fit, coefs = TRUE, stand = TRUE)
# Load data sets
employees <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/employees.csv")
status <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/status.csv")
benefits <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/benefits.csv")
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/demographics.csv")
job <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/job.csv")
payroll <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/payroll.csv")
performance <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/performance.csv")
prior_employment <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/prior_employment.csv")
sentiment <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/sentiment.csv")
tenure <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_book/master/data/tenure.csv")
# Return row and column counts
dim(employees)
# Load library
library(tidyverse)
employees <- list(demographics,
status,
benefits,
job,
payroll,
performance,
prior_employment,
sentiment,
tenure) %>%
purrr::reduce(left_join, by = "employee_id")
# Load library
library(tidyverse)
employees <- list(demographics,
status,
benefits,
job,
payroll,
performance,
prior_employment,
sentiment,
tenure) |>
purrr::reduce(left_join, by = "employee_id")
# Load library
library(ggplot2)
# Data
analytics_tasks <- data.frame(task = c('Data preparation',
'Data extraction',
'Exploratory data analysis',
'Other',
'Refining algorithms',
'Building training sets'),
pct = c(60, 19, 9, 5, 4, 3))
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct)) +
ggplot2::labs(title = 'The People team is leading in department-level engagement.', x = 'Department', y = 'Engagement Score') +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank,
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank,
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = task, y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank,
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = task, y = pct)) +
#ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank,
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
View(analytics_tasks)
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = task, y = pct)) +
#ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank,
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = task, y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
#ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank,
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = task, y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip()
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = task, y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = task, y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Data
analytics_tasks <- data.frame(task = c('Data preparation',
'Data extraction',
'Exploratory data analysis',
'Other',
'Refining algorithms',
'Building training sets'),
pct = c(.60, .19, .09, .05, .04, .03))
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = task, y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Data
analytics_tasks <- data.frame(task = c('Cleaning and organizing data',
'Extracting data',
'Exploratory data analysis',
'Other',
'Refining algorithms',
'Building training sets'),
pct = c(.60, .19, .09, .05, .04, .03))
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Load library
library(ggplot2)
# Data
analytics_tasks <- data.frame(task = c('Cleaning and organizing data',
'Extracting data',
'Exploratory data analysis',
'Other',
'Refining algorithms',
'Building training sets'),
pct = c(.60, .19, .09, .05, .04, .03))
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct)) +
ggplot2::geom_bar(stat = "identity", fill = "#0070C0") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct)) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::scale_fill_manual(values = c("Cleaning and organizing data" = "#0070C0",
"Extracting data" = "#0070C0",
"Exploratory data analysis" = "#D9D9D9",
"Other" = "#D9D9D9",
"Refining algorithms" = "#D9D9D9",
"Building training sets" = "#D9D9D9")) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
# Viz
ggplot2::ggplot(analytics_tasks, aes(x = reorder(task, pct), y = pct, fill = factor(task))) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::scale_fill_manual(values = c("Cleaning and organizing data" = "#0070C0",
"Extracting data" = "#0070C0",
"Exploratory data analysis" = "#D9D9D9",
"Other" = "#D9D9D9",
"Refining algorithms" = "#D9D9D9",
"Building training sets" = "#D9D9D9")) +
ggplot2::theme(legend.position = "none",
panel.background = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
plot.title = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.ticks.y = ggplot2::element_blank())
