library(RCurl)
file <- getURL("https://github.com/crstarbuck/peopleanalytics_lifecycle_book/blob/master/data/files/employee_demographics.csv")
data <- read.csv(text = file)
View(data)
library(readr)
file <- "https://github.com/crstarbuck/peopleanalytics_lifecycle_book/blob/master/data/files/employee_demographics.csv"
data <- read_csv(file)
data <- read.csv("https://github.com/crstarbuck/peopleanalytics_lifecycle_book/blob/master/data/files/employee_demographics.csv")
data <- read.csv("https://github.com/crstarbuck/peopleanalytics_lifecycle_book/blob/master/data/files/employee_demographics.csv")
View(data)
data <- read.csv("https://github.com/crstarbuck/peopleanalytics_lifecycle_book/blob/master/data/files/employee_demographics.csv")
View(data)
data <- read.csv("https://github.com/crstarbuck/peopleanalytics_lifecycle_book/blob/master/data/files/employee_demographics.csv")
test <- read.csv("https://github.com/crstarbuck/peopleanalytics_lifecycle_book/blob/master/data/files/employee_demographics.csv")
View(test)
test <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
View(test)
data <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
View(data)
# Calculate sample variance for compensation
var(data$annual_base_compensation)
# Calculate standard deviation for compensation
sd(data$annual_base_compensation)
quartile(data$annual_base_compensation)
quantile(data$annual_base_compensation)
?quantile
# Return quartiles for compensation
quantile(data$annual_base_compensation, probs = .8)
# Return quartiles for compensation
quantile(data$annual_base_compensation, probs = .8)
# Return 80th percentile compensation value
quantile(data$annual_base_compensation, probs = .8)
summary(data$annual_base_compensation)
# Return common descriptives
summary(data$annual_base_compensation)
n = nrow(data)
n
# Calculate population variance for compensation
var(data$annual_base_compensation) * (n - 1) / n
# Calculate sample standard deviation for compensation
sd(data$annual_base_compensation)
# Calculate population standard deviation for compensation
sd(data$annual_base_compensation) * sqrt((n - 1) / n)
?summary
# Read data
data <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Read data
data <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
?read.csv
# Load libraries for data wrangling and viz
library(dplyr)
# Read data
data <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Load library for data wrangling
library(dplyr)
# Read data
data <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Calculate sample variance for compensation
var(data$annual_base_compensation)
View(data)
# Load library for data wrangling
library(dplyr)
# Read data
data <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Read data
data <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Calculate sample variance for compensation
var(data$annual_base_compensation)
# Store number of observations
n = nrow(data)
# Calculate population variance for compensation
var(data$annual_base_compensation) * (n - 1) / n
# Calculate sample standard deviation for compensation
sd(data$annual_base_compensation)
# Calculate covariance
cov(data$annual_base_compensation, data$job_level)
# Read survey response data
responses <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/survey_responses.csv")
# Read survey response data
responses <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/survey_responses.csv")
# Calculate covariance
cov(responses$annual_base_compensation, responses$job_level)
# Read survey response data
responses <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/survey_responses.csv")
View(responses)
# Calculate covariance
cov(responses$belonging, responses$culture)
# Calculate covariance
cov(responses$belonging, responses$culture, use = "complete.obs")
# Calculate covariance using complete observations (missing values are present in the data)
cov(responses$belonging, responses$culture, use = "complete.obs")
?cov
cov(responses, use = "complete.obs")
# Calculate covariance between Belonging and Culture scores using Spearman's method
cov(responses$belonging, responses$culture, method = "Spearman", use = "complete.obs")
# Calculate covariance between Belonging and Culture scores using Spearman's method
cov(responses$belonging, responses$culture, method = "spearman", use = "complete.obs")
# Calculate covariance between Belonging and Culture scores using Spearman's method
cov(responses$belonging, responses$culture, method = "pearson", use = "complete.obs")
# Read employee demographics data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
View(demographics)
# Calculate covariance between compensation and age using complete observations (missing values will cause issues if not addressed)
cov(demographics$annual_base_compensation, demographics$age, use = "complete.obs")
# Read employee demographics data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Calculate covariance between compensation and age using complete observations (missing values will cause issues if not addressed)
cov(demographics$annual_base_compensation, demographics$age, use = "complete.obs")
# Read survey response data
responses <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/survey_responses.csv")
# Read survey response data
responses <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/survey_responses.csv")
# Calculate covariance between Belonging and Culture scores using Spearman's method
cov(responses$belonging, responses$culture, method = "spearman", use = "complete.obs")
# Calculate the correlation between compensation and age using complete observations (missing values will cause issues if not addressed)
cor(demographics$annual_base_compensation, demographics$age, use = "complete.obs")
# Calculate the correlation between compensation and age using complete observations (missing values will cause issues if not addressed)
cor(demographics$annual_base_compensation, demographics$age)
# Calculate the correlation between compensation and age using complete observations (missing values will cause issues if not addressed)
cor(demographics$annual_base_compensation, demographics$age)
# Calculate the correlation between compensation and age using complete observations (missing values will cause issues if not addressed)
cor(demographics$annual_base_compensation, demographics$age, use = "complete.obs")
# Calculate the correlation between compensation and age
cor(demographics$annual_base_compensation, demographics$age, use = "complete.obs")
# Calculate covariance between Belonging and Culture scores using Spearman's method
cor(responses$belonging, responses$culture, method = "spearman", use = "complete.obs")
# Calculate covariance between Belonging and Culture scores using Spearman's method
cov(responses, method = "spearman", use = "complete.obs")
View(responses)
# Calculate covariance between Belonging and Culture scores using Spearman's method
cov(responses[, 2:5], method = "spearman", use = "complete.obs")
# Calculate covariance between Belonging and Culture scores using Spearman's method
cov(responses[, 2:6], method = "spearman", use = "complete.obs")
var(responses$action_taking)
var(responses$action_taking, use = "complete.obs")
# Produce covariance matrix for first five variables using Spearman's method
cov(responses[, 2:6], use = "complete.obs")
var(responses$action_taking, use = "complete.obs")
# Calculate the correlation between Belonging and Culture scores using Spearman's method
cor(responses$belonging, responses$culture, method = "spearman", use = "complete.obs")
# Calculate the correlation between Belonging and Culture scores using Spearman's method
cor(responses$belonging, responses$culture, method = "spearman", use = "complete.obs")
# Generate a correlation matrix between the first five response columns
cor(responses[, 2:6], method = "spearman", use = "complete.obs")
# Generate a correlation matrix between the first ten response columns
cor(responses[, 2:11], method = "spearman", use = "complete.obs")
# Generate a correlation matrix between the first five response columns
cor(responses[, 2:6], method = "spearman", use = "complete.obs")
# Load library for correlation visuals
library(corrplot)
install.packages("corrplot")
# Install package and load library for correlation visuals
install.packages("corrplot", dependencies = TRUE)
# Install package and load library for correlation visuals
install.packages("corrplot", dependencies = TRUE)
library(corrplot)
# Store correlation matrix to object M
M <- cor(responses[, 2:6], method = "spearman", use = "complete.obs")
corrplot(M, method = "circle")
corrplot(M, type = "upper", order = "hclust")
corrplot(M, method="circle")
# Store correlation matrix to object M
M <- cor(responses[, -1], method = "spearman", use = "complete.obs")
# Store correlation matrix to object M
M <- cor(responses, method = "spearman", use = "complete.obs")
# Store correlation matrix to object M
M <- cor(responses[, 2:50], method = "spearman", use = "complete.obs")
corrplot(M, type = "upper", order = "hclust")
# Store correlation matrix to object M
M <- cor(responses[, 20:30], method = "spearman", use = "complete.obs")
corrplot(M, type = "upper", order = "hclust")
# Store correlation matrix to object M
M <- cor(responses[, 50:70], method = "spearman", use = "complete.obs")
# Store correlation matrix to object M
M <- cor(responses[, 50:60], method = "spearman", use = "complete.obs")
corrplot(M, type = "upper", order = "hclust")
# Read survey response data
responses <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/tables/tbl_survey_responses.csv")
# Calculate covariance between Belonging and Culture scores using Spearman's method
cov(responses$belonging, responses$culture, method = "spearman", use = "complete.obs")
# Calculate covariance between job satisfaction and work-life balance scores using Spearman's method
cov(responses$job_satisfaction, responses$worklife_balance, method = "spearman", use = "complete.obs")
# Calculate the correlation between Belonging and Culture scores using Spearman's method
cor(responses$job_satisfaction, responses$worklife_balance, method = "spearman", use = "complete.obs")
# Calculate the correlation between Belonging and Culture scores using Spearman's method
cor(responses$relationship_satisfaction, responses$worklife_balance, method = "spearman", use = "complete.obs")
cor(responses, method = "spearman", use = "complete.obs")
# Calculate covariance between job satisfaction and work-life balance scores using Spearman's method
cov(responses$job_satisfaction, responses$relationship_satisfaction, method = "spearman", use = "complete.obs")
# Calculate the correlation between Belonging and Culture scores using Spearman's method
cor(responses$job_satisfaction, responses$relationship_satisfaction, method = "spearman", use = "complete.obs")
# Generate a correlation matrix between the first five response columns
cor(responses[, 2:6], method = "spearman", use = "complete.obs")
# Generate a correlation matrix between the first five response columns
cor(responses[, 2:5], method = "spearman", use = "complete.obs")
# Store correlation matrix to object M
M <- cor(responses[, 50:60], method = "spearman", use = "complete.obs")
# Store correlation matrix to object M
M <- cor(responses[, 2:5], method = "spearman", use = "complete.obs")
corrplot(M, type = "upper", order = "hclust")
# Read employee tenure data
tenure <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/tables/tbl_tenure.csv")
# Calculate sample variance for total working years
var(tenure$total_working_years)
# Store number of observations
n = nrow(data)
# Calculate population variance for total working years
var(tenure$total_working_years) * (n - 1) / n
# Calculate sample standard deviation for total working years
sd(tenure$total_working_years)
# Calculate population standard deviation for total working years
sd(tenure$total_working_years) * sqrt((n - 1) / n)
# Return quartiles for total working years
quantile(tenure$total_working_years)
# Return 80th percentile total working years value
quantile(tenure$total_working_years, probs = .8)
# Return common descriptives
summary(tenure$total_working_years)
# Calculate covariance between job satisfaction and work-life balance scores using Spearman's method
cov(responses$job_satisfaction, responses$relationship_satisfaction, method = "spearman", use = "complete.obs")
# Calculate the correlation between total working years and age
cor(tenure$total_working_years, tenure$years_at_company, use = "complete.obs")
View(tenure)
# Store correlation matrix to object M
M <- cor(tenure[, 2:6], method = "spearman", use = "complete.obs")
corrplot(M, type = "upper", order = "hclust")
corrplot.mixed(M, type = "upper", order = "hclust")
corrplot.mixed(M, order = "hclust")
corrplot(M, type = "upper", order = "hclust")
corrplot(M, method = 'square', type = "upper", order = "hclust")
corrplot(M, type = "upper", order = "hclust")
corrplot(M, upper = 'shade', type = "upper", order = "hclust")
corrplot(M, method = 'shade', type = "upper", order = "hclust")
# Visualize correlation matrix
corrplot(M, type = "upper", order = "hclust")
# Visualize correlation matrix
corrplot(M, method = 'shade', type = "upper", order = "hclust")
# Load library for data wrangling
library(dplyr)
# Load library for data wrangling
library(dplyr)
# Read employee tenure data
tenure <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/employee_demographics.csv")
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Calculate sample variance for annual compensation
var(demographics$annual_comp)
# Store number of observations
n = nrow(data)
# Calculate population variance for annual compensation
var(demographics$annual_comp) * (n - 1) / n
# Store number of observations
n = nrow(demographics)
# Calculate population variance for annual compensation
var(demographics$annual_comp) * (n - 1) / n
# Calculate sample standard deviation for annual compensation
sd(demographics$annual_comp)
# Calculate population standard deviation for annual compensation
sd(demographics$annual_comp) * sqrt((n - 1) / n)
# Return quartiles for annual compensation
quantile(demographics$annual_comp)
# Return 80th percentile annual compensation value
quantile(demographics$annual_comp, probs = .8)
# Return common descriptives
summary(demographics$annual_comp)
# Calculate covariance between annual compensation and age using complete observations (missing values will cause issues if not addressed)
cov(demographics$annual_comp, demographics$age, use = "complete.obs")
# Read survey response data
responses <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/tables/tbl_survey_responses.csv")
# Calculate covariance between job satisfaction and work-life balance scores using Spearman's method
cov(responses$job_satisfaction, responses$relationship_satisfaction, method = "spearman", use = "complete.obs")
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Calculate covariance between education level and performance level
cov(demographics$education, demographics$performance, method = "spearman", use = "complete.obs")
# Calculate the correlation between education level and performance level
cor(demographics$education, demographics$performance, use = "complete.obs")
# Calculate covariance between education level and performance level
cov(demographics$job_level, demographics$education, method = "spearman", use = "complete.obs")
# Calculate covariance between job level and education level
cov(demographics$job_level, demographics$education, method = "spearman", use = "complete.obs")
# Calculate the correlation between job level and education level
cor(demographics$job_level, demographics$education, use = "complete.obs")
# Calculate the correlation between annual compensation and age
cor(demographics$annual_comp, demographics$age, use = "complete.obs")
# Calculate the correlation between job level and education level using Spearman's method
cor(demographics$job_level, demographics$education, method = "spearman", use = "complete.obs")
round(cor(demographics$job_level, demographics$education, method = "spearman", use = "complete.obs"), 2)
View(demographics)
# Generate a correlation matrix between continuous variables
cor(responses[, c("annual_comp", "age", "org_tenure", "job_tenure")], use = "complete.obs")
# Generate a correlation matrix between continuous variables
cor(demographics[, c("annual_comp", "age", "org_tenure", "job_tenure")], use = "complete.obs")
# Load library for correlation visuals
library(corrplot)
# Store correlation matrix to object M
M <- cor(tenure[, 2:6], method = "spearman", use = "complete.obs")
# Store correlation matrix to object M
M <- cor(demographics[, c("annual_comp", "age", "org_tenure", "job_tenure")], method = "spearman", use = "complete.obs")
# Visualize correlation matrix
corrplot(M, method = 'shade', type = "upper", order = "hclust")
# Visualize correlation matrix
corrplot.mixed(M, method = 'shade', type = "upper", order = "hclust")
# Visualize correlation matrix
corrplot.mixed(M, method = 'shade', order = "hclust")
# Visualize correlation matrix
corrplot.mixed(M, order = 'AOE')
# Load library for data wrangling
library(dplyr)
# Load library for data wrangling
library(dplyr)
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Load library for data wrangling
library(dplyr)
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Calculate sample variance for annual compensation
var(demographics$annual_comp)
# Store number of observations
n = nrow(demographics)
# Calculate population variance for annual compensation
var(demographics$annual_comp) * (n - 1) / n
# Calculate sample covariance between annual compensation and age using complete observations (missing values will cause issues if not addressed)
cov(demographics$annual_comp, demographics$age, use = "complete.obs")
# Calculate population covariance between annual compensation and age
cov(demographics$annual_comp, demographics$age, use = "complete.obs") * (n - 1) / n
# Calculate covariance between job level and education level using Spearman's method
cov(demographics$job_level, demographics$education, method = "kendall", use = "complete.obs")
# Calculate covariance between job level and education level using Spearman's method
cov(demographics$job_level, demographics$education, method = "spearman", use = "complete.obs")
install.package("psych", dependencies = TRUE)
install.package("psych"), dependencies = TRUE)
install.packages("psych", dependencies = TRUE)
# Load library for Phi Coefficient
library(psych)
# Load library for data wrangling
library(dplyr)
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
View(demographics)
# First, we need to construct a 2x2 matrix
demographics$gender <- ifelse(demographics$gender == 'Male', 1, 0)
# First, we need to construct a 2x2 matrix
demographics$gender_coded <- ifelse(demographics$gender == 'Male', 1, 0)
demographics$performance_coded <- ifelse(demographics$performance < 3, 0, 1)
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# First, we need to construct a 2x2 matrix
demographics$gender_code <- ifelse(demographics$gender == 'Male', 1, 0)
demographics$performance_code <- ifelse(demographics$performance < 3, 0, 1)
?phi
# Generate a correlation matrix between dichotomous variables
phi(demographics[, c("gender_code", "performance_code")])
# Create 2x2 matrix
M <- matrix(demographics[, c("gender_code", "performance_code")])
M
# Create 2x2 matrix
M <- matrix(demographics[, c("gender_code", "performance_code")], n, 2)
M
# Create 2x2 matrix
M <- matrix(demographics[, c("gender_code", "performance_code")], n, 2, byrow = TRUE)
M
# Create 2x2 matrix
M <- matrix(demographics[, c("gender_code", "performance_code")], n, 2, byrow = FALSE)
M
n
# Create 2x2 matrix
M <- matrix(demographics, n, 2, dimnames = c("gender_code", "performance_code"))
# Create 2x2 matrix
M <- matrix(demographics, n, 2, dimnames = list(c("gender_code", "performance_code")))
# Create 2x2 matrix
M <- matrix(demographics, n, 2, dimnames = list("gender_code", "performance_code"))
# Create 2x2 matrix
M <- matrix(demographics[, c("gender_code", "performance_code")], nrow = n, ncol = 2)
M
# Create 2x2 matrix
M <- matrix(demographics[, c("gender_code", "performance_code")], nrow = 2, ncol = 2)
M
demographics[, c("gender_code", "performance_code")]
# Create 2x2 matrix
M <- matrix(demographics[, c("gender_code", "performance_code")], nrow = n, ncol = 2)
M
# Create 2x2 matrix
M <- matrix(demographics[, c("gender_code", "performance_code")], nrow = n, ncol = 2, byrow = TRUE)
M
M <- data.matrix(demographics[, c("gender_code", "performance_code")])
M
# Generate a correlation matrix between dichotomous variables
phi(M)
?phi
table(demographics$gender_code, demographics$performance_code)
# Create a 2x2 contingency table
contingency_tbl <- table(demographics$gender_code, demographics$performance_code)
# Generate a correlation matrix between dichotomous variables
phi(contingency_tbl)
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Set females to 1 and everything else to 0
demographics$gender_code <- ifelse(demographics$gender == 'Female', 1, 0)
# Set high performers (3 and above) to 1 and everything else to 0
demographics$performance_code <- ifelse(demographics$performance < 3, 0, 1)
# Create a 2x2 contingency table
contingency_tbl <- table(demographics$gender_code, demographics$performance_code)
# Calculate the Phi Coefficient between dichotomous variables
phi(contingency_tbl)
# Load library for data viz
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(1234)
# Generate uniform population distribution with 1000 values ranging from 1 to 100
rand.unif <- runif(1000, min = 1, max = 100)
# Set seed for reproducible random samples
set.seed(456)
# Sample 100 values from uniform population distribution
x <- sample(rand.unif, 100, replace = TRUE, prob = NULL)
# Calculate 95% CI
ci95_lower_bound <- mean(x) - 1.96 * (sd(x) / sqrt(100))
ci95_upper_bound <- mean(x) + 1.96 * (sd(x) / sqrt(100))
# Print lower bound for 95% CI
ci95_lower_bound
# Print upper bound for 95% CI
ci95_upper_bound
# Set seed for reproducible random samples
set.seed(456)
# Sample 100 values from uniform population distribution
x <- sample(rand.unif, 100, replace = TRUE, prob = NULL)
# Calculate 95% CI
ci95_lower_bound <- mean(x) - 1.96 * (sd(x) / sqrt(100))
ci95_upper_bound <- mean(x) + 1.96 * (sd(x) / sqrt(100))
# Print lower bound for 95% CI
ci95_lower_bound
# Print upper bound for 95% CI
ci95_upper_bound
round(ci95_upper_bound, 1)
# Calculate 99% CI
ci99_lower_bound <- mean(x_bars) - 2.58 * (sd(x_bars) / sqrt(n))
ci99_upper_bound <- mean(x_bars) + 2.58 * (sd(x_bars) / sqrt(n))
# Calculate 99% CI
ci99_lower_bound <- mean(x) - 2.58 * (sd(x) / sqrt(100))
ci99_upper_bound <- mean(x) + 2.58 * (sd(x) / sqrt(100))
# Print lower bound for 99% CI
ci99_lower_bound
# Print upper bound for 99% CI
ci99_upper_bound
round(ci99_lower_bound, 1)
# Calculate 99% CI
ci99_lower_bound <- mean(x) - 2.576 * (sd(x) / sqrt(100))
ci99_upper_bound <- mean(x) + 2.576 * (sd(x) / sqrt(100))
# Print lower bound for 99% CI
ci99_lower_bound
# Print upper bound for 99% CI
ci99_upper_bound
# Set seed for reproducible random samples
set.seed(456)
# Sample 25 values from uniform population distribution
x <- sample(rand.unif, 25, replace = TRUE, prob = NULL)
# Calculate 95% CI
ci95_lower_bound <- mean(x) - 2.064 * (sd(x) / sqrt(25))
ci95_upper_bound <- mean(x) + 2.064 * (sd(x) / sqrt(25))
# Print lower bound for 95% CI
ci95_lower_bound
# Print upper bound for 95% CI
ci95_upper_bound
# Calculate 99% CI
ci99_lower_bound <- mean(x) - 2.797 * (sd(x) / sqrt(25))
ci99_upper_bound <- mean(x) + 2.797 * (sd(x) / sqrt(25))
# Print lower bound for 99% CI
ci99_lower_bound
# Print upper bound for 99% CI
ci99_upper_bound
# Load library for data wrangling
library(dplyr)
# Load library for data wrangling
library(dplyr)
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Load library for data wrangling
library(dplyr)
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Read employee tenure data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Calculate sample standard deviation for annual compensation
sd(demographics$annual_comp)
# Calculate population standard deviation for annual compensation
sd(demographics$annual_comp) * sqrt((n - 1) / n)
# Calculate population standard deviation for annual compensation
sd(demographics$annual_comp) * sqrt((n - 1) / n)
# Store number of observations
n = nrow(demographics)
# Calculate population variance for annual compensation
var(demographics$annual_comp) * (n - 1) / n
# Calculate sample standard deviation for annual compensation
sd(demographics$annual_comp)
# Calculate population standard deviation for annual compensation
sd(demographics$annual_comp) * sqrt((n - 1) / n)
sigma(demographics$annual_comp)
?sigma
?cov
# Load library for data viz
library(ggplot2)
# Set seed for reproducible random distribution
set.seed(1234)
# Generate uniform population distribution with 1000 values ranging from 1 to 100
rand.unif <- runif(1000, min = 1, max = 100)
# Calculate population mean
mean(rand.unif)
# Calculate population variance
var(rand.unif) * (n - 1) / n
