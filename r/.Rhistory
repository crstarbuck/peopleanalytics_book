y = 5 + sample(1:10, 20, replace = TRUE)*2)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Construct basic data frame
df2 <- data.frame(x = sample(1:10, 20, replace = TRUE),
y = sample(1:10, 20, replace = TRUE)*2)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Construct basic data frame
df2 <- data.frame(x = sample(1:10, 20, replace = TRUE),
y = sample(1:10, 20, replace = TRUE)*3)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Construct basic data frame
df1 <- data.frame(x = 1:2,
y = 1:2*2)
# Fit simple linear model to data
lm.fit.1 <- lm(y ~ x, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Construct basic data frame
df2 <- data.frame(x = sample(1:10, 20, replace = TRUE),
y = sample(1:10, 20, replace = TRUE)*3)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
?rnorm()
x <- rnorm(20, 1.5, .25)
y <- 2 + x*2
# Construct basic data frame
df2 <- data.frame(x = x,
y = y)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
x <- rnorm(20, 50, 10)
y <- 2 + x*2
# Construct basic data frame
df2 <- data.frame(x = x,
y = y)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
x <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
y <- 100 + 4*x + err
# Construct basic data frame
df2 <- data.frame(x = x,
y = y)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Construct basic data frame
df1 <- data.frame(x = 1:2,
y = 1:2*2)
# Fit simple linear model to data
lm.fit.1 <- lm(y ~ x, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Generate data with a linear relationship + some noise
x <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
y <- 100 + 4*x + err
# Construct basic data frame
df2 <- data.frame(x = x,
y = y)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Construct basic data frame
df1 <- data.frame(x = 1:2,
y = 1:2*2)
# Fit simple linear model to data
lm.fit.1 <- lm(y ~ x, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Generate data with a linear relationship + some noise
x <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
y <- 100 + 4*x + err
# Construct basic data frame
df2 <- data.frame(x = x,
y = y)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
max(df2$y)
max(df$x)
max(df2$y)
min(df2$y)
min(df2$x)
max(df2$x)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Generate data with a linear relationship + some noise
x <- rnorm(2, 50, 10)
y <- 100 + 4*x
# Construct basic data frame
df1 <- data.frame(x = x,
y = y)
# Fit simple linear model to data
lm.fit.1 <- lm(y ~ x, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Generate data with a linear relationship + some noise
x <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
y <- 100 + 4*x + err
# Construct basic data frame
df2 <- data.frame(x = x,
y = y)
# Fit simple linear model to data
lm.fit.2 <- lm(y ~ x, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = x, y = y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_sales)) +
ggplot2::labs(x = "Engagement", y = "YTD Sales") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {28002.67*x + 2431.67}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 120000, label = "y = 28,002.67x + 2,431.67", colour = "red") +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Generate data with a linear relationship + some noise
X <- rnorm(2, 50, 10)
Y <- 100 + 4*X
# Construct basic data frame
df1 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Generate data with a linear relationship + some noise
X <- rnorm(2, 50, 10)
Y <- 100 + 4*X
# Construct basic data frame
df1 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::labs(x = italic("X"), y = italic("Y")) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Generate data with a linear relationship + some noise
X <- rnorm(2, 50, 10)
Y <- 100 + 4*X
# Construct basic data frame
df1 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::labs(x = "*X*", y = "*Y*") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Generate data with a linear relationship + some noise
X <- rnorm(2, 50, 10)
Y <- 100 + 4*X
# Construct basic data frame
df1 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
theme(axis.title.y = element_text(face = "italic"),
axis.title.x = element_text(face = "italic")) +
ggplot2::theme_bw()
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Generate data with a linear relationship + some noise
X <- rnorm(2, 50, 10)
Y <- 100 + 4*X
# Construct basic data frame
df1 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"),
axis.title.x = element_text(face = "italic")) +
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Generate data with a linear relationship + some noise
X <- rnorm(2, 50, 10)
Y <- 100 + 4*X
# Construct basic data frame
df1 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Generate data with a linear relationship + some noise
X <- rnorm(2, 50, 10)
Y <- 100 + 4*X
# Construct basic data frame
df1 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
min(df2$X)
max(df2$X)
max(df2$Y)
min(df2$Y)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Construct basic data frame
df1 <- data.frame(X = c(25, 75),
Y = c(213, 390))
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# Load library
library(ggplot2)
# Set seed for reproducibility
set.seed(1234)
# Construct basic data frame
df1 <- data.frame(X = c(25, 75),
Y = c(205, 390))
# Fit simple linear model to data
lm.fit.1 <- lm(Y ~ X, df1)
# Visualize model fit to observations
p1 <- ggplot2::ggplot(data = df1, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.1$coefficients[[2]]*x + lm.fit.1$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Generate data with a linear relationship + some noise
X <- rnorm(20, 50, 10)
err = rnorm(20, 0, 15)
Y <- 100 + 4*X + err
# Construct basic data frame
df2 <- data.frame(X = X,
Y = Y)
# Fit simple linear model to data
lm.fit.2 <- lm(Y ~ X, df2)
# Visualize model fit to observations
p2 <- ggplot2::ggplot(data = df2, aes(x = X, y = Y)) +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {lm.fit.2$coefficients[[2]]*x + lm.fit.2$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(axis.title.y = element_text(face = "italic"), axis.title.x = element_text(face = "italic"))
# Display distribution visualizations
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# Load libraries
library(corrplot)
library(dplyr)
library(car)
library(reshape2)
library(flextable)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Subset employees data frame; sales are only applicable for those in sales positions
data <- subset(employees, job_title %in% c('Sales Executive', 'Sales Representative'))
# Regress YTD sales on engagement
slm.fit <- lm(ytd_sales ~ engagement, data)
# Produce tabular summary for model results using flextable
flextable::as_flextable(slm.fit)
slm.fit$coefficients
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_sales)) +
ggplot2::labs(x = "Engagement", y = "YTD Sales") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 120000, label = paste0("y = ", slm.fit$coefficients[[2]], "x + ", slm.fit$coefficients[[1]]), colour = "red") +
ggplot2::theme_bw()
ggplot2::ggplot(data = data, aes(x = engagement, y = ytd_sales)) +
ggplot2::labs(x = "Engagement", y = "YTD Sales") +
ggplot2::geom_point(color = "black") +
ggplot2::geom_function(fun = function(x) {slm.fit$coefficients[[2]]*x + slm.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::annotate("text", x = 1.4, y = 120000, label = "y = 28,002.67x + 2,431.67", colour = "red") +
ggplot2::theme_bw()
hist(slm.fit$resid, main = "Distribution of Model Residuals", xlab = "Sales Estimate Residuals", col = "grey", las = 1, breaks = 10)
hist(slm.fit$resid, main = "Distribution of Model Residuals", xlab = "Sales Estimate Residuals", col = "dark grey", las = 1, breaks = 10)
hist(slm.fit$resid, main = "Distribution of Model Residuals", xlab = "Sales Estimate Residuals", col = "charcoal", las = 1, breaks = 10)
hist(slm.fit$resid, main = "Distribution of Model Residuals", xlab = "Sales Estimate Residuals", col = "grey", las = 1, breaks = 10)
# Produce histogram to visualize population distribution
ggplot2::ggplot() +
ggplot2::aes(slm.fit$resid) +
ggplot2::labs(x = "YTD Sales Residuals", y = "Density") +
ggplot2::geom_histogram(aes(y = ..density..), fill = "#414141") +
ggplot2::geom_density(fill = "#ADD8E6", alpha = 0.6) +
ggplot2::theme_bw()
