ggplot2::ggplot(forecast.metrics, aes(x = month, y = predicted)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::geom_line(aes(y = lwr_bound), col = "grey", linetype = "solid") + #lwr pred interval
ggplot2::geom_line(aes(y = upr_bound), col = "grey", linetype = "solid") + #upr pred interval
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw()
ggplot2::ggplot(forecast.metrics, aes(x = month, y = predicted)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::geom_line(aes(y = lwr_bound), col = "grey", linetype = "solid") + #lwr pred interval
ggplot2::geom_line(aes(y = upr_bound), col = "grey", linetype = "solid") + #upr pred interval
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
geom_smooth(span = 0.3) +
ggplot2::theme_bw()
ggplot2::ggplot(forecast.metrics, aes(x = month, y = predicted)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::geom_line(aes(y = lwr_bound), col = "grey", linetype = "solid") + #lwr pred interval
ggplot2::geom_line(aes(y = upr_bound), col = "grey", linetype = "solid") + #upr pred interval
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
geom_smooth(method=loess , color="red", fill="#69b3a2", se=TRUE) +
ggplot2::theme_bw()
ggplot2::ggplot(forecast.metrics, aes(x = month, y = predicted)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::geom_line(aes(y = lwr_bound), col = "grey", linetype = "solid") + #lwr pred interval
ggplot2::geom_line(aes(y = upr_bound), col = "grey", linetype = "solid") + #upr pred interval
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
geom_smooth(method=loess , color="red", fill="#69b3a2") +
ggplot2::theme_bw()
ggplot2::ggplot(forecast.metrics, aes(x = month, y = predicted)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::geom_line(aes(y = lwr_bound), col = "grey", linetype = "solid") + #lwr pred interval
ggplot2::geom_line(aes(y = upr_bound), col = "grey", linetype = "solid") + #upr pred interval
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
geom_smooth(method=loess , color="red", fill="#69b3a2", span = 0.3) +
ggplot2::theme_bw()
ggplot2::ggplot(forecast.metrics, aes(x = month, y = predicted)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::geom_line(aes(y = lwr_bound), col = "grey", linetype = "solid") + #lwr pred interval
ggplot2::geom_line(aes(y = upr_bound), col = "grey", linetype = "solid") + #upr pred interval
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
geom_smooth(method=loess , color="red", fill="#69b3a2", span = 0.5) +
ggplot2::theme_bw()
ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::geom_line(aes(y = lwr_bound), col = "grey", linetype = "solid") + #lwr pred interval
ggplot2::geom_line(aes(y = upr_bound), col = "grey", linetype = "solid") + #upr pred interval
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
geom_smooth(method=loess , color="red", fill="#69b3a2", span = 0.5) +
ggplot2::theme_bw()
ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::geom_line(aes(y = lwr_bound), col = "grey", linetype = "solid") + #lwr pred interval
ggplot2::geom_line(aes(y = upr_bound), col = "grey", linetype = "solid") + #upr pred interval
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
#geom_smooth(method=loess , color="red", fill="#69b3a2", span = 0.5) +
ggplot2::theme_bw()
View(test_dat)
View(train_dat)
# Load employee data
forecasting_dat <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/turnover_trends.csv")
# One-hot encode remote flag
forecasting_dat$remote <- ifelse(forecasting_dat$remote == 'Yes', 1, 0)
# Create training data
train_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & year %in% 1:4)
# Create test data
test_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & remote == 1 & year == 5)
View(test_dat)
# Fit cubic models
train.cube.fit <- lm(turnover_rate ~ year + month + I(month^2) + I(month^3) + remote, data = train_dat)
# Produce tabular summary of regression model output
flextable::as_flextable(train.cube.fit)
# Develop function that returns a data frame of forecasting model performance statistics
forecast.perf <- function(actual, predicted){
# Check for missing values; metrics will be computed on non-missing values only
predicted <- predicted[!is.na(actual)]
actual <- actual[!is.na(actual)]
actual <- actual[!is.na(predicted)]
# Store rates to variables
mad <- round(mean(abs(actual - predicted)), 2)
mse <- round(mean((actual - predicted)^2), 2)
mape <- round(mean(abs((actual - predicted) / actual)) * 100, 2)
# Return model performance statistics in a data frame
return(data.frame(mad, mse, mape))
}
# Initialize empty data frames for model predictions and performance stats
forecast.metrics <- NULL
forecast.err.rates <- NULL
# Predict on test_dat
forecast.metrics <- rbind(forecast.metrics, cbind.data.frame(
month = test_dat$month,
actual = test_dat$turnover_rate,
predicted = predict(train.cube.fit, test_dat, type = "response"),
lwr_bound = as.data.frame(predict(train.cube.fit, test_dat, type = "response", interval = "predict"))$lwr,
upr_bound = as.data.frame(predict(train.cube.fit, test_dat, type = "response", interval = "predict"))$upr))
# Forecast error rates
forecast.perf(actual = test_dat$turnover_rate, predicted = predict(train.cube.fit, test_dat, type = "response"))
plot(train_dat)
ggplot2::ggplot(train_dat, aes(x = month, y = actual)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::geom_line(aes(y = lwr_bound), col = "grey", linetype = "solid") + #lwr pred interval
ggplot2::geom_line(aes(y = upr_bound), col = "grey", linetype = "solid") + #upr pred interval
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
#geom_smooth(method=loess , color="red", fill="#69b3a2", span = 0.5) +
ggplot2::theme_bw()
ggplot2::ggplot(train_dat, aes(x = month, y = actual)) + #define x and y axis variables
ggplot2::geom_point() + #add scatterplot points
ggplot2::ggplot(train_dat, aes(x = month, y = actual)) + #define x and y axis variables
ggplot2::geom_point()  #add scatterplot points
ggplot2::ggplot(train_dat, aes(x = month, y = turnover_rate)) + #define x and y axis variables
ggplot2::geom_point()  #add scatterplot points
ggplot2::ggplot(train_dat, aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  #add scatterplot points
# Create training data
train_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & remote == 'Yes' & year %in% 1:4)
# Create test data
test_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & remote == 'Yes' & year == 5)
# Fit cubic model
train.cube.fit <- lm(turnover_rate ~ year + month + I(month^2) + I(month^3) + remote, data = train_dat)
# Fit cubic model
train.cube.fit <- lm(turnover_rate ~ year + month + I(month^2) + I(month^3), data = train_dat)
# Create training data
train_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & remote == 'Yes' & year %in% 1:4)
# Create test data
test_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & remote == 'Yes' & year == 5)
# Load employee data
forecasting_dat <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/turnover_trends.csv")
# Create training data
train_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & remote == 'Yes' & year %in% 1:4)
# Create test data
test_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & remote == 'Yes' & year == 5)
# Fit cubic model
train.cube.fit <- lm(turnover_rate ~ year + month + I(month^2) + I(month^3), data = train_dat)
# Produce tabular summary of regression model output
flextable::as_flextable(train.cube.fit)
# Develop function that returns a data frame of forecasting model performance statistics
forecast.perf <- function(actual, predicted){
# Check for missing values; metrics will be computed on non-missing values only
predicted <- predicted[!is.na(actual)]
actual <- actual[!is.na(actual)]
actual <- actual[!is.na(predicted)]
# Store rates to variables
mad <- round(mean(abs(actual - predicted)), 2)
mse <- round(mean((actual - predicted)^2), 2)
mape <- round(mean(abs((actual - predicted) / actual)) * 100, 2)
# Return model performance statistics in a data frame
return(data.frame(mad, mse, mape))
}
# Initialize empty data frames for model predictions and performance stats
forecast.metrics <- NULL
forecast.err.rates <- NULL
# Predict on test_dat
forecast.metrics <- rbind(forecast.metrics, cbind.data.frame(
month = test_dat$month,
actual = test_dat$turnover_rate,
predicted = predict(train.cube.fit, test_dat, type = "response"),
lwr_bound = as.data.frame(predict(train.cube.fit, test_dat, type = "response", interval = "predict"))$lwr,
upr_bound = as.data.frame(predict(train.cube.fit, test_dat, type = "response", interval = "predict"))$upr))
# Forecast error rates
forecast.perf(actual = test_dat$turnover_rate, predicted = predict(train.cube.fit, test_dat, type = "response"))
ggplot2::ggplot(train_dat, aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  #add scatterplot points
ggplot2::ggplot(train_dat, aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
ggplot2::ggplot(train_dat, aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
# Create training data
train_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & year %in% 1:4)
# Create test data
test_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & remote == 'Yes' & year == 5)
# Fit cubic model
train.cube.fit <- lm(turnover_rate ~ year + month + I(month^2) + I(month^3) + remote, data = train_dat)
# Produce tabular summary of regression model output
flextable::as_flextable(train.cube.fit)
# Initialize empty data frames for model predictions and performance stats
forecast.metrics <- NULL
forecast.err.rates <- NULL
# Predict on test_dat
forecast.metrics <- rbind(forecast.metrics, cbind.data.frame(
month = test_dat$month,
actual = test_dat$turnover_rate,
predicted = predict(train.cube.fit, test_dat, type = "response"),
lwr_bound = as.data.frame(predict(train.cube.fit, test_dat, type = "response", interval = "predict"))$lwr,
upr_bound = as.data.frame(predict(train.cube.fit, test_dat, type = "response", interval = "predict"))$upr))
# Forecast error rates
forecast.perf(actual = test_dat$turnover_rate, predicted = predict(train.cube.fit, test_dat, type = "response"))
ggplot2::ggplot(train_dat, aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
ggplot2::ggplot(train_dat[train_dat$remote == 'Yes', ], aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
ggplot2::ggplot(test_dat[test_dat$remote == 'Yes', ], aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
-0.113*5 + 2.41*6 - .41*6^2 + .02*6^3 - 1.64 + 2.765
ggplot2::ggplot(train_dat[train_dat$remote == 'Yes', ], aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
ggplot2::ggplot(train_dat[train_dat$remote == 'Yes', ], aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
geom_smooth(method = loess)
ggplot2::ggplot(train_dat[train_dat$remote == 'Yes', ], aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
geom_smooth(method = loess)
ggplot2::ggplot(subset(train_dat, year == 4 & remote == 'Yes'), aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
geom_smooth(method = loess)
ggplot2::ggplot(subset(train_dat, year == 4 & remote == 'Yes'), aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
ggplot2::ggplot(test_dat[test_dat$remote == 'Yes', ], aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*3 + train.cube.fit$coefficients[[4]]*3^2 + train.cube.fit$coefficients[[5]]*3^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*3 + train.cube.fit$coefficients[[4]]*3^2 + train.cube.fit$coefficients[[5]]*3^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed")
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
theme(legend.position = "none")
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme(legend.position = "none")
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 3 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme(legend.position = "none")
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate, col = year)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 3 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot(test_dat, aes(x = month, y = actual)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 3 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*3 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
summary(train.cube.fit)
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate)) + #define x and y axis variables
ggplot2::geom_point()  + #add scatterplot points
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 3 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*3 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot(test_dat, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
test_dat
ggplot2::ggplot(subset(train_dat, year == 3 & remote == 'Yes'), aes(x = month, y = turnover_rate)) +
ggplot2::geom_point()  +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 3 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*3 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
ggplot2::ggplot(subset(train_dat, year == 4 & remote == 'Yes'), aes(x = month, y = turnover_rate)) +
ggplot2::geom_point()  +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 3 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*4 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Load library
library(dplyr)
# Load employee data
forecasting_dat <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/turnover_trends.csv")
# Create training data
train_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & year %in% 1:4)
# Create test data
test_dat <- forecasting_dat %>% filter(job == 'People Scientist' & level == 1 & remote == 'Yes' & year == 5)
# Fit cubic model
train.cube.fit <- lm(turnover_rate ~ year + month + I(month^2) + I(month^3) + remote, data = train_dat)
# Produce tabular summary of regression model output
flextable::as_flextable(train.cube.fit)
# Forecast error rates
forecast.perf(actual = forecast.metrics$actual, predicted = forecast.metrics$predicted)
ggplot2::ggplot(subset(train_dat, year == 4 & remote == 'Yes'), aes(x = month, y = turnover_rate)) +
ggplot2::geom_point()  +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 4 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*4 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
train_dat[train_dat$year == 1, 'turnover_rate']
mean(train_dat[train_dat$year == 1, 'turnover_rate'])
mean(train_dat[train_dat$year == 2, 'turnover_rate'])
mean(train_dat[train_dat$year == 3, 'turnover_rate'])
mean(train_dat[train_dat$year == 4, 'turnover_rate'])
mean(train_dat[train_dat$year == 5, 'turnover_rate'])
mean(forecasting_dat[forecasting_dat$job == 'People Scientist' & forecasting_dat$level == 1 & forecasting_dat$remote == 'Yes' & forecasting_dat$year == 5, 'turnover_rate'])
mean(forecasting_dat[forecasting_dat$job == 'People Scientist' & forecasting_dat$level == 1 & forecasting_dat$remote == 'Yes' & forecasting_dat$year == 1, 'turnover_rate'])
mean(forecasting_dat[forecasting_dat$job == 'People Scientist' & forecasting_dat$level == 1 & forecasting_dat$remote == 'Yes' & forecasting_dat$year == 2, 'turnover_rate'])
mean(forecasting_dat[forecasting_dat$job == 'People Scientist' & forecasting_dat$level == 1 & forecasting_dat$remote == 'Yes' & forecasting_dat$year == 3, 'turnover_rate'])
mean(forecasting_dat[forecasting_dat$job == 'People Scientist' & forecasting_dat$level == 1 & forecasting_dat$remote == 'Yes' & forecasting_dat$year == 4, 'turnover_rate'])
mean(forecasting_dat[forecasting_dat$job == 'People Scientist' & forecasting_dat$level == 1 & forecasting_dat$remote == 'Yes' & forecasting_dat$year == 5, 'turnover_rate'])
# Juxtapose year 4 turnover trend (training data) against fitted model
p_yr4 <- ggplot2::ggplot(subset(train_dat, year == 4 & remote == 'Yes'), aes(x = month, y = turnover_rate)) +
ggplot2::geom_point()  +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 4 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*4 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Juxtapose year 5 turnover trend (test data) against fitted model
p_yr5 <- ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_yr4, p_yr5, ncol = 2, nrow = 1)
# Juxtapose year 5 turnover trend (test data) against fitted model
p_yr5 <- ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::geom_polygon(aes(x = month, y = lwr_bound), fill = "red", alpha = 0.2) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_yr4, p_yr5, ncol = 2, nrow = 1)
# Juxtapose year 5 turnover trend (test data) against fitted model
p_yr5 <- ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::geom_ribbon(data = forecast.metrics, aes(month, ymin = lwr_bound, ymax = upr_bound, fill = "red"), alpha = 0.4) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_yr4, p_yr5, ncol = 2, nrow = 1)
# Juxtapose year 5 turnover trend (test data) against fitted model
p_yr5 <- ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::geom_ribbon(data = forecast.metrics, aes(month, ymin = lwr_bound, ymax = upr_bound, fill = "grey"), alpha = 0.4) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_yr4, p_yr5, ncol = 2, nrow = 1)
# Juxtapose year 5 turnover trend (test data) against fitted model
p_yr5 <- ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::geom_ribbon(data = forecast.metrics, aes(month, ymin = lwr_bound, ymax = upr_bound), alpha = 0.4) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_yr4, p_yr5, ncol = 2, nrow = 1)
# Juxtapose year 5 turnover trend (test data) against fitted model
p_yr5 <- ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::geom_ribbon(data = forecast.metrics, aes(month, ymin = lwr_bound, ymax = upr_bound, fill = "red"), alpha = 0.4) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_yr4, p_yr5, ncol = 2, nrow = 1)
# Juxtapose year 4 turnover trend (training data) against fitted model
p_yr4 <- ggplot2::ggplot(subset(train_dat, year == 4 & remote == 'Yes'), aes(x = month, y = turnover_rate)) +
ggplot2::geom_point()  +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 4 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*4 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Juxtapose year 5 turnover trend (test data) against fitted model
p_yr5 <- ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::geom_ribbon(data = forecast.metrics, aes(month, ymin = lwr_bound, ymax = upr_bound, fill = "red"), alpha = 0.4) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggpubr::ggarrange(p_yr4, p_yr5, ncol = 2, nrow = 1)
# Fit cubic model
train.cube.fit <- lm(turnover_rate ~ year + month + I(month^2) + I(month^3) + remote, data = train_dat)
# Produce tabular summary of regression model output
flextable::as_flextable(train.cube.fit)
# Subset to respective forecast segment
forecast_segment <- subset(forecasting_dat, job == 'People Scientist' & level == 1 & remote == 'Yes')
train_dat[train$dat$remote == 'Yes', 'turnover_rate']
train_dat[train$dat$remote == 'Yes', 'turnover_rate']
train_dat[train_dat$remote == 'Yes', 'turnover_rate']
mean(train_dat[train_dat$remote == 'Yes' & traindat$year == 1, 'turnover_rate'])
mean(train_dat[train_dat$remote == 'Yes' & train_dat$year == 1, 'turnover_rate'])
train_dat %>% filter(remote == 'Yes' & year == 1) %>% select(turnover_rate)
mean(train_dat[train_dat$remote == 'Yes' & train_dat$year == 1, 'turnover_rate'])
mean(train_dat %>% filter(remote == 'Yes' & year == 1) %>% select(turnover_rate))
train_dat %>% filter(remote == 'Yes' & year == 1) %>% select(turnover_rate)
train_dat %>% filter(remote == 'Yes' & year == 1) %>% summarize(Mean = mean(turnover_rate))
mean(train_dat[train_dat$remote == 'Yes' & train_dat$year == 1, 'turnover_rate'])
train_dat %>% filter(remote == 'Yes' & year == 1) %>% summarize(Mean = mean(turnover_rate))
yr1_avg <- train_dat %>% filter(remote == 'Yes' & year == 1) %>% summarize(Mean = mean(turnover_rate))
yr2_avg <- train_dat %>% filter(remote == 'Yes' & year == 2) %>% summarize(Mean = mean(turnover_rate))
yr3_avg <- train_dat %>% filter(remote == 'Yes' & year == 3) %>% summarize(Mean = mean(turnover_rate))
yr4_avg <- train_dat %>% filter(remote == 'Yes' & year == 4) %>% summarize(Mean = mean(turnover_rate))
yr5_avg <- test_dat %>% summarize(Mean = mean(turnover_rate))
print(c(yr1_avg, yr2_avg, yr3_avg, yr4_avg, yr5_avg))
# Juxtapose year 4 turnover trend (training data) against fitted model
p_yr4 <- ggplot2::ggplot(subset(train_dat, year == 4 & remote == 'Yes'), aes(x = month, y = turnover_rate)) +
ggplot2::geom_point()  +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 4 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*4 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Juxtapose year 5 turnover trend (test data) against fitted model
p_yr5 <- ggplot2::ggplot(forecast.metrics, aes(x = month, y = actual)) +
ggplot2::geom_point() +
ggplot2::scale_x_continuous(breaks = 1:12) +
ggplot2::labs(title = "Year 5 Turnover Trend", x = "Month", y = "Turnover Rate") +
ggplot2::geom_function(fun = function(x) {train.cube.fit$coefficients[[2]]*5 + train.cube.fit$coefficients[[3]]*x + train.cube.fit$coefficients[[4]]*x^2 + train.cube.fit$coefficients[[5]]*x^3 + train.cube.fit$coefficients[[6]] + train.cube.fit$coefficients[[1]]}, colour = "red", linetype = "dashed") +
ggplot2::geom_ribbon(data = forecast.metrics, aes(month, ymin = lwr_bound, ymax = upr_bound, fill = "red"), alpha = 0.4) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(plot.title = element_text(hjust = 0.5))
# Display visuals side-by-side
ggpubr::ggarrange(p_yr4, p_yr5, ncol = 2, nrow = 1)
library(dplyr)
set.seed(123)
# create the variance covariance matrix
sigma <- rbind(c(1,-0.8,-0.7), c(-0.8,1, 0.9), c(-0.7,0.9,1))
# create the mean vector
mu <- c(3, 3.2, 3.4)
# generate the multivariate normal distribution
df <- as.data.frame(mvrnorm(n = 1000, mu = mu, Sigma = sigma))
library(MASS)
# generate the multivariate normal distribution
df <- as.data.frame(mvrnorm(n = 1000, mu = mu, Sigma = sigma))
View(df)
max(df$V1)
n <- 1000
correlations <- replicate(n = 1000, expr = cor(ordsample(n, Marginal, R))[1,2])
library(ordsample)
?ordsample
correlations <- replicate(n = 1000, expr = cor(ordsample(n, Marginal, R))[1,2])
?corrvar
read.csv(file.choose(), header = T)
data <- read.csv(file.choose(), header = T)
data <- data[complete.cases(data), ]
View(data)
write.csv(data, "/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/factor_analysis.csv", row.names = FALSE)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/stats_ml_satire.png")
