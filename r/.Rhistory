geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_exp, p_f,
ncol = 3, nrow = 3)
# Simulate F distribution
f_dist <- rf(1000, df1 = 5, df2 = 100)
p_f <-
ggplot() +
aes(f_dist) +
labs(title = "F", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_exp, p_f,
ncol = 3, nrow = 3)
# Simulate F distribution
f_dist <- rf(1000, df1 = 5, df2 = 500)
p_f <-
ggplot() +
aes(f_dist) +
labs(title = "F", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_exp, p_f,
ncol = 3, nrow = 3)
# Simulate F distribution
f_dist <- rf(1000, df1 = 5, df2 = 200)
p_f <-
ggplot() +
aes(f_dist) +
labs(title = "F", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_exp, p_f,
ncol = 3, nrow = 3)
# Set seed for reproducible random distribution
set.seed(1234)
# Simulate normal distribution
normal_dist <- rnorm(1000, mean = 50, sd = 5)
# Simulate uniform distribution
uniform_dist <- runif(1000, min = 1, max = 100)
# Simulate log-normal distribution
lnormal_dist <- rlnorm(1000, meanlog = 0, sdlog = 1)
# Simulate student's t distribution
t_dist <- rt(1000, df = 5)
# Simulate chi-square distribution
chisq_dist <- rchisq(1000, df = 5)
# Simulate exponential distribution
exp_dist <- rexp(1000, rate = 1)
# Simulate beta distribution
beta_dist <- rbeta(1000, shape1 = 1, shape2 = 5)
# Simulate F distribution
f_dist <- rf(1000, df1 = 5, df2 = 200)
# Store visualizations to objects
p_normal <-
ggplot() +
aes(normal_dist) +
labs(title = "Normal", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_uniform <-
ggplot() +
aes(uniform_dist) +
labs(title = "Uniform", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_t <-
ggplot() +
aes(t_dist) +
labs(title = "Student's T", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_exp <-
ggplot() +
aes(exp_dist) +
labs(title = "Exponential", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_f <-
ggplot() +
aes(f_dist) +
labs(title = "F", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_exp, p_beta, p_f,
ncol = 4, nrow = 2)
p_beta <-
ggplot() +
aes(beta_dist) +
labs(title = "Beta", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_f <-
ggplot() +
aes(f_dist) +
labs(title = "F", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_exp, p_beta, p_f,
ncol = 4, nrow = 2)
# Set seed for reproducible random distribution
set.seed(1234)
# Simulate normal distribution
normal_dist <- rnorm(1000, mean = 50, sd = 5)
# Simulate log-normal distribution
lnormal_dist <- rlnorm(1000, meanlog = 0, sdlog = 1)
# Simulate student's t distribution
t_dist <- rt(1000, df = 5)
# Simulate chi-square distribution
chisq_dist <- rchisq(1000, df = 5)
# Simulate F distribution
f_dist <- rf(1000, df1 = 5, df2 = 200)
# Store visualizations to objects
p_normal <-
ggplot() +
aes(normal_dist) +
labs(title = "Normal", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_uniform <-
ggplot() +
aes(uniform_dist) +
labs(title = "Uniform", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_lnormal <-
ggplot() +
aes(lnormal_dist) +
labs(title = "Log-Normal", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_t <-
ggplot() +
aes(t_dist) +
labs(title = "Student's T", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_chisq <-
ggplot() +
aes(chisq_dist) +
labs(title = "Chi-Square", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_f <-
ggplot() +
aes(f_dist) +
labs(title = "F", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_f,
ncol = 3, nrow = 2)
# Simulate student's t distribution
t_dist <- rt(1000, df = 3)
p_t <-
ggplot() +
aes(t_dist) +
labs(title = "Student's T", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_f,
ncol = 3, nrow = 2)
# Simulate student's t distribution
t_dist <- rt(1000, df = 4)
p_t <-
ggplot() +
aes(t_dist) +
labs(title = "Student's T", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_f,
ncol = 3, nrow = 2)
# Set seed for reproducible random distribution
set.seed(1234)
# Simulate normal distribution
normal_dist <- rnorm(1000, mean = 50, sd = 5)
# Simulate uniform distribution
uniform_dist <- runif(1000, min = 1, max = 100)
# Simulate log-normal distribution
lnormal_dist <- rlnorm(1000, meanlog = 0, sdlog = 1)
# Simulate student's t distribution
t_dist <- rt(1000, df = 3)
# Simulate chi-square distribution
chisq_dist <- rchisq(1000, df = 5)
# Simulate F distribution
f_dist <- rf(1000, df1 = 5, df2 = 200)
# Store visualizations to objects
p_normal <-
ggplot() +
aes(normal_dist) +
labs(title = "Normal", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_uniform <-
ggplot() +
aes(uniform_dist) +
labs(title = "Uniform", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_lnormal <-
ggplot() +
aes(lnormal_dist) +
labs(title = "Log-Normal", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_t <-
ggplot() +
aes(t_dist) +
labs(title = "Student's T", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_chisq <-
ggplot() +
aes(chisq_dist) +
labs(title = "Chi-Square", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
p_f <-
ggplot() +
aes(f_dist) +
labs(title = "F", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# Display distribution visualizations
ggarrange(p_normal, p_uniform, p_lnormal, p_t, p_chisq, p_f,
ncol = 3, nrow = 2)
# Create function to build visualization
build.viz <- function(data, type, title) {
if (type == "discrete"){
# Discrete distribution
viz <- ggplot() +
aes(data) +
labs(title = paste(title), x = "x", y = "count") +
geom_histogram(fill = "#414141") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
} else {
# Continuous distribution
viz <- ggplot() +
aes(normal_dist) +
labs(title = "Normal", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
}
return(viz)
}
# Store visualizations to objects
p_bernoulli <- build.viz(bernoulli_dist, "discrete", "Bernoulli")
# Display distribution visualizations
ggarrange(p_bernoulli, p_binomial, p_nbinomial, p_multinomial, p_poisson, p_geometric,
ncol = 3, nrow = 2)
# Set seed for reproducible random distribution
set.seed(1234)
# Simulate bernoulli distribution
bernoulli_dist <- rbinom(1000, 1, prob = .5)
# Simulate binomial distribution
# Notice the important difference relative to the Bernoulli simulation (100 trials vs. 1)
binomial_dist <- rbinom(1000, 100, prob = .5)
# Simulate negative binomial distribution
nbinomial_dist <- rnbinom(1000, 100, prob = .5)
# Simulate multinomial distribution with varying probabilities per level
multinomial_dist <- rmultinom(1000, 4, prob = c(.4, .3, .2, .6))
# Simulate poisson distribution
poisson_dist <- rpois(1000, 10)
# Simulate geometric distribution
geometric_dist <- rgeom(1000, prob = .2)
# Load library for arranging visuals
library(ggpubr)
# Create helper function to simplify visualization development
build.viz <- function(data, type, title) {
if (type == "discrete"){
# Discrete distribution
viz <- ggplot() +
aes(data) +
labs(title = paste(title), x = "x", y = "count") +
geom_histogram(fill = "#414141") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
} else {
# Continuous distribution
viz <- ggplot() +
aes(normal_dist) +
labs(title = "Normal", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
}
return(viz)
}
# Store visualizations to objects
p_bernoulli <- build.viz(bernoulli_dist, "discrete", "Bernoulli")
p_binomial <- build.viz(binomial_dist, "discrete", "Binomial")
p_multinomial <- build.viz(multinomial_dist, "discrete", "Multinomial")
p_geometric <- build.viz(geometric_dist, "discrete", "Geometric")
# Display distribution visualizations
ggarrange(p_bernoulli, p_binomial, p_nbinomial, p_multinomial, p_poisson, p_geometric,
ncol = 3, nrow = 2)
# Set seed for reproducible random distribution
set.seed(1234)
# Simulate bernoulli distribution
bernoulli_dist <- rbinom(1000, 1, prob = .5)
# Simulate binomial distribution
# Notice the important difference relative to the Bernoulli simulation (100 trials vs. 1)
binomial_dist <- rbinom(1000, 100, prob = .5)
# Simulate negative binomial distribution
nbinomial_dist <- rnbinom(1000, 100, prob = .5)
# Simulate multinomial distribution with varying probabilities per level
multinomial_dist <- rmultinom(1000, 4, prob = c(.4, .3, .2, .6))
# Simulate poisson distribution
poisson_dist <- rpois(1000, 10)
# Simulate geometric distribution
geometric_dist <- rgeom(1000, prob = .2)
# Load library for arranging visuals
library(ggpubr)
# Create user-defined function (UDF) to simplify probability distribution visualization
# Function arguments: (1) data = object containing random distribution values; (2) type = 'discrete' or 'continuous' probability distribution; and (3) title = name of distribution
build.viz <- function(data, type, title) {
if (type == "discrete"){
# Discrete distribution
viz <- ggplot() +
aes(data) +
labs(title = paste(title), x = "x", y = "count") +
geom_histogram(fill = "#414141") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
} else {
# Continuous distribution
viz <- ggplot() +
aes(normal_dist) +
labs(title = "Normal", x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
}
return(viz)
}
# Call UDF to build visualizations and store to objects
p_bernoulli <- build.viz(data = bernoulli_dist, type = "discrete", title = "Bernoulli")
p_binomial <- build.viz(data = binomial_dist, type = "discrete", title = "Binomial")
p_nbinomial <- build.viz(data = nbinomial_dist, type = "discrete", title = "Negative Binomial")
p_multinomial <- build.viz(data = multinomial_dist, type = "discrete", title = "Multinomial")
p_geometric <- build.viz(data = geometric_dist, type = "discrete", title = "Geometric")
# Display distribution visualizations
ggarrange(p_bernoulli, p_binomial, p_nbinomial, p_multinomial, p_poisson, p_geometric,
ncol = 3, nrow = 2)
p_poisson <- build.viz(data = poisson_dist, type = "discrete", title = "Poisson")
p_geometric <- build.viz(data = geometric_dist, type = "discrete", title = "Geometric")
# Display distribution visualizations
ggarrange(p_bernoulli, p_binomial, p_nbinomial, p_multinomial, p_poisson, p_geometric,
ncol = 3, nrow = 2)
# Set seed for reproducible random distribution
set.seed(1234)
# Simulate normal distribution
normal_dist <- rnorm(1000, mean = 50, sd = 5)
# Simulate log-normal distribution
lnormal_dist <- rlnorm(1000, meanlog = 0, sdlog = 1)
# Simulate uniform distribution
uniform_dist <- runif(1000, min = 1, max = 100)
# Simulate student's t distribution
t_dist <- rt(1000, df = 3)
# Simulate chi-square distribution
chisq_dist <- rchisq(1000, df = 5)
# Simulate F distribution
f_dist <- rf(1000, df1 = 5, df2 = 200)
# Call UDF to build visualizations and store to objects
# Note that as long as the arguments are in the order specified in the function (see our UDF definition above), the argument names do not need to be specified. To illustrate, we will drop the argument names from these function calls:
p_normal <- build.viz(normal_dist, "continuous", "Normal")
p_lnormal <- build.viz(lnormal_dist, "continuous", "Log-Normal")
p_uniform <- build.viz(uniform_dist, "continuous", "Uniform")
p_chisq <- build.viz(chisq_dist, "continuous", "Chi-Square")
p_f <- build.viz(f_dist, "continuous", "F")
# Display distribution visualizations
ggarrange(p_normal, p_lnormal, p_uniform, p_t, p_chisq, p_f,
ncol = 3, nrow = 2)
p_t <- build.viz(t_dist, "continuous", "Student's T")
p_chisq <- build.viz(chisq_dist, "continuous", "Chi-Square")
p_f <- build.viz(f_dist, "continuous", "F")
# Display distribution visualizations
ggarrange(p_normal, p_lnormal, p_uniform, p_t, p_chisq, p_f,
ncol = 3, nrow = 2)
# Call UDF to build visualizations and store to objects
# Note that as long as the arguments are in the order specified in the function (see our UDF definition above), the argument names do not need to be specified. To illustrate, we will drop the argument names from these function calls:
p_normal <- build.viz(normal_dist, "continuous", "Normal")
p_lnormal <- build.viz(lnormal_dist, "continuous", "Log-Normal")
p_uniform <- build.viz(uniform_dist, "continuous", "Uniform")
p_t <- build.viz(t_dist, "continuous", "Student's T")
p_chisq <- build.viz(chisq_dist, "continuous", "Chi-Square")
p_f <- build.viz(f_dist, "continuous", "F")
# Display distribution visualizations
ggarrange(p_normal, p_lnormal, p_uniform, p_t, p_chisq, p_f,
ncol = 3, nrow = 2)
# Create user-defined function (UDF) to simplify probability distribution visualization
# Function arguments: (1) data = object containing random distribution values; (2) type = 'discrete' or 'continuous' probability distribution; and (3) title = name of distribution
build.viz <- function(data, type, title) {
if (type == "discrete"){
# Discrete distribution
viz <- ggplot() +
aes(data) +
labs(title = paste(title), x = "x", y = "count") +
geom_histogram(fill = "#414141") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
} else {
# Continuous distribution
viz <- ggplot() +
aes(data) +
labs(title = paste(title), x = "x", y = "density") +
geom_histogram(aes(y = ..density..), fill = "#414141") +
geom_density(fill = "#ADD8E6", alpha = 0.6) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
}
return(viz)
}
# Call UDF to build visualizations and store to objects
# Note that as long as the arguments are in the order specified in the function (see our UDF definition above), the argument names do not need to be specified. To illustrate, we will drop the argument names from these function calls:
p_normal <- build.viz(normal_dist, "continuous", "Normal")
p_lnormal <- build.viz(lnormal_dist, "continuous", "Log-Normal")
p_uniform <- build.viz(uniform_dist, "continuous", "Uniform")
p_t <- build.viz(t_dist, "continuous", "Student's T")
p_chisq <- build.viz(chisq_dist, "continuous", "Chi-Square")
p_f <- build.viz(f_dist, "continuous", "F")
# Display distribution visualizations
ggarrange(p_normal, p_lnormal, p_uniform, p_t, p_chisq, p_f,
ncol = 3, nrow = 2)
# Simulate student's t distribution
t_dist <- rt(1000, df = 5)
p_t <- build.viz(t_dist, "continuous", "Student's T")
# Display distribution visualizations
ggarrange(p_normal, p_lnormal, p_uniform, p_t, p_chisq, p_f,
ncol = 3, nrow = 2)
library(GGally)
install.packages("GGally", dependencies = TRUE)
# Load library for data wrangling
library(dplyr)
# Read employee demographics data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Calculate sample variance for annual compensation
var(demographics$annual_comp)
# Load library for correlation visuals
library(corrplot)
# Store correlation matrix to object M
M <- cor(demographics[, c("annual_comp", "age", "org_tenure", "job_tenure")], use = "complete.obs")
# Visualize correlation matrix
corrplot.mixed(M, order = 'AOE')
# Load library for correlation visuals
library(GGally)
# Visualize correlation matrix
ggpairs(M)
# Visualize correlation matrix
ggpairs(demographics[, c("annual_comp", "age", "org_tenure", "job_tenure")])
