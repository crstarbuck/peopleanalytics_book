ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
t_test
t_test$statistic
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill sd vector
sds <- c(50, 100, 150)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 150, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", t_test$statistic, ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill sd vector
sds <- c(50, 100, 150)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 150, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(50, 500, 5000)
# Fill sd vector
sds <- c(50, 100, 150)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 150, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill sd vector
sds <- c(50, 100, 150)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 150, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/continuous_differences_test_table.png")
?t.test
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill sd vector
sds <- c(50, 100, 150)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 150, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
t_test
View(employees)
comp_a <- subset(employees, job_title == 'Manager', select = annual_comp)
comp_a <- subset(employees, job_title == Manager, select = annual_comp)
comp_a <- subset(employees, job_title == 'Manager', select = annual_comp)
comp_rsci <- subset(employees, job_title == 'Research Scientist', select = annual_comp)
# Run Welch's t-test
t.test(comp_mgr, comp_rsci)
comp_mgr <- subset(employees, job_title == 'Manager', select = annual_comp)
comp_rsci <- subset(employees, job_title == 'Research Scientist', select = annual_comp)
# Run Welch's t-test
t.test(comp_mgr, comp_rsci)
mean(comp_mgr)
str(comp_mgr)
class(comp_mgr)
mode(comp_mgr)
# Create compensation vectors for two jobs
comp_mgr <- unlist(subset(employees, job_title == 'Manager', select = annual_comp))
comp_rsci <- unlist(subset(employees, job_title == 'Research Scientist', select = annual_comp))
# Run Welch's t-test
t.test(comp_mgr, comp_rsci)
mean(comp_mgr)
round(mean(comp_mgr), 0)
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill sd vector
sds <- c(50, 100, 150)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 130, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill sd vector
sds <- c(50, 100, 150)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 125, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill sd vector
sds <- c(25, 50, 75)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 120, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill sd vector
sds <- c(25, 50, 75)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 120, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
# Store results of Welch's t-test to object
t_test_rslts <- t.test(comp_mgr, comp_rsci)
# Store results of Welch's t-test to object
t_test_rslts <- t.test(comp_mgr, comp_rsci)
# Store results of Welch's t-test to object
t_rslts <- t.test(comp_mgr, comp_rsci)
t_rslts$method
# Store results of Welch's t-test to object
t_rslts <- t.test(comp_mgr, comp_rsci)
t_rslts$statistic # t-statistic
t_rslts$p.value # p-value
t_rslts$method # type of t-test
t_rslts$parameter
# Load library
library(dplyr)
library(ggplot2)
# Set seed for reproducible random numbers
set.seed(123)
# Fill sample size vector
n_counts <- c(100, 1000, 10000)
# Fill sd vector
sds <- c(25, 50, 75)
# Initialize lists
p = list()
t_test = list()
# Initialize index
i = 1
for (n in n_counts){
for (sd in sds){
# Draw random numbers from normal distribution per defined parameters
a <- data.frame(x = rnorm(n, 100, sd))
b <- data.frame(x = rnorm(n, 120, sd))
# Label groups and combine within single df
a$group <- 'a'
b$group <- 'b'
ab <- rbind(a, b)
# Store mean values in df
mean_df <- ab %>%
group_by(group) %>%
summarize(mean = mean(x))
# Calculate absolute mean difference
xbar_delta <- abs(round(mean(ab[ab$group == 'b', 'x']) - mean(ab[ab$group == 'a', 'x']), 0))
t_test <- t.test(ab[ab$group == 'a', 'x'], ab[ab$group == 'b', 'x'])
# Store viz to object
p[[i]] <- ggplot2::ggplot(ab, aes(x, fill = group)) +
ggplot2::labs(title = paste0("MD = ", xbar_delta, "\n t = ", round(t_test$statistic, 1), ifelse(t_test$p.value < .05, ", p < .05", ", p > .05")), x = "x", y = "Density") +
ggplot2::geom_density(alpha = 0.6) +
ggplot2::scale_fill_manual(values = c("skyblue", "lightgrey")) +
ggplot2::geom_vline(data = mean_df, aes(xintercept = mean), colour = c("blue", "#3D3D3D"), size = .5, linetype = "dashed") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = element_text(hjust = 0.5)) +
ggplot2::theme(legend.position = "none")
# Increment counter variable by 1
i = i + 1
}
}
# Visualize density plots side-by-side
ggpubr::ggarrange(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], p[[6]], p[[7]], p[[8]], p[[9]],
ncol = 3, nrow = 3)
