sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure,
AVG(commute_dist) AS avg_commute_dist
FROM
demographics
INNER JOIN
tenure
ON
demographics.employee_id = tenure.employee_id
INNER JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure,
AVG(commute_dist) AS avg_commute_dist
FROM
demographics
LEFT JOIN
tenure
ON
demographics.employee_id = tenure.employee_id
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Load tidyverse
library(tidyverse)
employees <- list(demographics,
status,
benefits,
job,
payroll,
performance,
prior_employment,
survey_response,
tenure) %>%
reduce(left_join, by = "employee_id")
# Store SQL query as a character string
# Note: Since employee_id exists in multiple data sets, we must name a specific data set when referencing it
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(commute_dist) AS avg_commute_dist
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
demographics.employee_id IN (SELECT employee_id FROM tenure WHERE org_tenure > 1)
AND
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(commute_dist) AS avg_commute_dist
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
INNER JOIN
(SELECT employee_id FROM tenure WHERE org_tenure > 1) ids
ON
demographics.employee_id = ids.employee_id
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
# Limit output to 10 records since query does not collapse records
sql_string <- paste("SELECT
demographics.employee_id,
job_title,
commute_dist,
RANK () OVER (PARTITION BY job_title ORDER BY commute_dist DESC) AS commute_dist_rank
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
INNER JOIN
(SELECT employee_id FROM tenure WHERE org_tenure > 1) ids
ON
demographics.employee_id = ids.employee_id
WHERE
dept = 'Research & Development'
ORDER BY
job_title,
commute_dist_rank
LIMIT 10")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
DISTINCT(job_title) AS job_title,
COUNT(*) AS employee_count,
commute_dist
FROM
(SELECT
demographics.employee_id,
job_title,
commute_dist,
RANK () OVER (PARTITION BY job_title ORDER BY commute_dist DESC) AS commute_dist_rank
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
INNER JOIN
(SELECT employee_id FROM tenure WHERE org_tenure > 1) ids
ON
demographics.employee_id = ids.employee_id
WHERE
dept = 'Research & Development'
ORDER BY
job_title,
commute_dist_rank) tbl
WHERE
tbl.commute_dist_rank = 1
GROUP BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Summarize df
summary(employees)
# Store original annual comp for sample employee
orig_comp <- employees[employees$employee_id == '2176', 'annual_comp']
# Force a NA in lieu of annual comp for illustrative purposes
employees[employees$employee_id == '2176', 'annual_comp'] <- NA
# Return relevant employee characteristics where annual comp is missing
employees[is.na(employees$annual_comp), c("employee_id", "job_title", "job_level")]
# Store original annual comp for sample employee
orig_comp <- employees[employees$employee_id == '2176', 'annual_comp']
# Force a NA in lieu of annual comp for illustrative purposes
employees[employees$employee_id == '2176', 'annual_comp'] <- NA
# Return relevant employee characteristics where annual comp is missing
employees[is.na(employees$annual_comp), c("employee_id", "job_title", "job_lvl")]
# Return average annual comp for employees with similar characteristics, excluding employees with missing comp values
imputed_comp <- mean(employees[employees$job_title == 'Manufacturing Director' & employees$job_lvl == 2, 'annual_comp'], na.rm = TRUE)
# Impute missing comp for relevant segment
employees[employees$employee_id == '2176', 'annual_comp'] <- imputed_comp
# Display absolute difference between original and imputed comp
abs(orig_comp - employees[employees$employee_id == '2176', 'annual_comp'])
# Store original annual comp for sample employee
orig_comp <- employees[employees$employee_id == '2176', 'annual_comp']
# Force a NA in lieu of annual comp for illustrative purposes
employees[employees$employee_id == '2176', 'annual_comp'] <- NA
# Return relevant employee characteristics where annual comp is missing
employees[is.na(employees$annual_comp), c("employee_id", "job_title", "job_lvl")]
# Return average annual comp for employees with similar characteristics, excluding employees with missing comp values
imputed_comp <- mean(employees[employees$job_title == 'Manufacturing Director' & employees$job_lvl == 2, 'annual_comp'], na.rm = TRUE)
# Impute missing comp for relevant segment
employees[employees$employee_id == '2176', 'annual_comp'] <- imputed_comp
# Display absolute difference between original and imputed comp
abs(orig_comp - employees[employees$employee_id == '2176', 'annual_comp'])
employees[employees$job_title == 'Manufacturing Director' & employees$job_lvl == 2, 'annual_comp']
mean(employees[employees$job_title == 'Manufacturing Director' & employees$job_lvl == 2, 'annual_comp'], na.rm = TRUE)
orig_comp
# Return descriptives to understand distribution of standard hours
summary(employees$standard_hours)
# Return unique values of gender field
unique(employees$gender)
# Gender one-hot encoding
employees$gender_ohe <- ifelse(employees$gender == 'Female', 1, 0)
# Preview records
head(employees[, c("employee_id", "gender_ohe")])
# Return counts by department
employees %>% count(dept, sort = TRUE)
# Department one-hot encoding
dept_ohe <- model.matrix(~dept-1, data = employees)
# Preview data
head(dept_ohe)
# Drop department with lowest sum (lowest n-count)
dept_ohe <- dept_ohe[, -which.min(colSums(dept_ohe))]
# Preview refined one-hot encoded data
head(dept_ohe)
# Combine employees and matrix containing one-hot encoded departments
employees <- cbind(employees, dept_ohe)
# Drop original department field
employees <- subset(employees, select = -c(dept))
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(org_tenure), 2) AS avg_org_tenure
FROM
employees
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(org_tenure), 2) AS avg_org_tenure
FROM
employees
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Load SQL library
library(sqldf)
# Load data sets
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
status <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/status.csv")
benefits <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/benefits.csv")
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/demographics.csv")
job <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/job.csv")
payroll <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/payroll.csv")
performance <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/performance.csv")
prior_employment <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/prior_employment.csv")
survey_response <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/survey_response.csv")
tenure <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/tenure.csv")
# Return row and column counts
dim(employees)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(org_tenure), 2) AS avg_org_tenure
FROM
employees
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(org_tenure), 2) AS avg_org_tenure
ROUND(AVG(commute_dist), 2) AS avg_commute_dist
FROM
demographics
INNER JOIN
tenure
ON
demographics.employee_id = tenure.employee_id
INNER JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(org_tenure), 2) AS avg_org_tenure,
ROUND(AVG(commute_dist), 2) AS avg_commute_dist
FROM
demographics
INNER JOIN
tenure
ON
demographics.employee_id = tenure.employee_id
INNER JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(org_tenure), 2) AS avg_org_tenure,
ROUND(AVG(commute_dist), 2) AS avg_commute_dist
FROM
demographics
LEFT JOIN
tenure
ON
demographics.employee_id = tenure.employee_id
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
# Note: Since employee_id exists in multiple data sets, we must name a specific data set when referencing it
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(commute_dist), 2) AS avg_commute_dist
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
demographics.employee_id IN (SELECT employee_id FROM tenure WHERE org_tenure > 1)
AND
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
# Note: Since employee_id exists in multiple data sets, we must name a specific data set when referencing it
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(commute_dist), 1) AS avg_commute_dist
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
demographics.employee_id IN (SELECT employee_id FROM tenure WHERE org_tenure > 1)
AND
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(org_tenure), 1) AS avg_org_tenure,
ROUND(AVG(commute_dist), 1) AS avg_commute_dist
FROM
demographics
LEFT JOIN
tenure
ON
demographics.employee_id = tenure.employee_id
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(org_tenure), 1) AS avg_org_tenure,
ROUND(AVG(commute_dist), 1) AS avg_commute_dist
FROM
demographics
INNER JOIN
tenure
ON
demographics.employee_id = tenure.employee_id
INNER JOIN
job
ON
demographics.employee_id = job.employee_id
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(org_tenure), 1) AS avg_org_tenure
FROM
employees
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
ROUND(AVG(commute_dist), 1) AS avg_commute_dist
FROM
demographics
LEFT JOIN
job
ON
demographics.employee_id = job.employee_id
INNER JOIN
(SELECT employee_id FROM tenure WHERE org_tenure > 1) ids
ON
demographics.employee_id = ids.employee_id
WHERE
dept = 'Research & Development'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
