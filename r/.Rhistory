RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
ORDER BY
job_title,
org_tenure_rank
LIMIT 10")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
# Since employee_id is a column in multiple tables used in this query, we need to indicate a specific table to include employee_id in the output
sql_string <- paste("SELECT
job_df.employee_id,
job_title,
org_tenure,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
WHERE
org_tenure_rank = 1
ORDER BY
job_title,
org_tenure_rank")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
# Since employee_id is a column in multiple tables used in this query, we need to indicate a specific table to include employee_id in the output
sql_string <- paste("SELECT
TOP (1) WITH TIES job_df.employee_id,
job title,
org_tenure,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
WHERE
org_tenure_rank = 1
ORDER BY
job_title,
org_tenure_rank")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
# Since employee_id is a column in multiple tables used in this query, we need to indicate a specific table to include employee_id in the output
sql_string <- paste("SELECT tbl.*
FROM
(SELECT
job_df.employee_id,
job_title,
org_tenure,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
ORDER BY
job_title,
org_tenure_rank
LIMIT 10) tbl
WHERE
tbl.org_tenure_rank = 1")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string using the paste() function
# Since employee_id is a column in multiple tables used in this query, we need to indicate a specific table to include employee_id in the output
sql_string <- paste("SELECT tbl.*
FROM
(SELECT
job_df.employee_id,
job_title,
org_tenure,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
ORDER BY
job_title,
org_tenure_rank) tbl
WHERE
tbl.org_tenure_rank = 1")
# Execute SQL query
sqldf(sql_string)
View(demographics)
# Load SQL library
library(sqldf)
# Load SQL library
library(sqldf)
# Read employee demographics data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Return row and column counts
dim(demographics)
summary(demographics)
# Load library
library(psych)
psych::describeBy(demographics)
psych::describe(demographics)
summary(demographics)
View(demographics)
# Return employee characteristics
demographics[demographics$employee_id == '4097', c("job_title", "location", "job_level")]
# Return employee characteristics
demographics[demographics$employee_id == '4355', c("job_title", "location", "job_level")]
# Return employee characteristics
demographics[demographics$employee_id == '4305', c("job_title", "location", "job_level")]
subset(demographics, job_title = 'Manager' & location = 'HQ 1 - Austin' & job_level = 7 )
subset(demographics, job_title == 'Manager' & location == 'HQ 1 - Austin' & job_level == 7 )
subset(demographics, job_title == 'Manager' & location == 'HQ 1 - Austin' & job_level == 7, select = 'annual_comp')
mean(subset(demographics, job_title == 'Manager' & location == 'HQ 1 - Austin' & job_level == 7, select = 'annual_comp'))
mean(subset(demographics, job_title == 'Manager' & location == 'HQ 1 - Austin' & job_level == 7, select = 'annual_comp'))
test = subset(demographics, job_title == 'Manager' & location == 'HQ 1 - Austin' & job_level == 7, select = 'annual_comp')
test
mean(test)
demographics[demographics$job_title == 'Manager' & demographics$location == 'HQ 1 - Austin' & demographics$job_level == 7, 'annual_comp']
mean(demographics[demographics$job_title == 'Manager' & demographics$location == 'HQ 1 - Austin' & demographics$job_level == 7, 'annual_comp'])
# Return employee characteristics
demographics[is.na(annual_comp), c("job_title", "location", "job_level")]
# Return employee characteristics
demographics[is.na(demographics$annual_comp), c("job_title", "location", "job_level")]
# Load data wrangling library
library(dplyr)
# Return average annual comp for employees with similar characteristics
mean(demographics[demographics$job_title == 'Manager' & demographics$location == 'HQ 1 - Austin' & demographics$job_level == 7, 'annual_comp'])
# Return employee characteristics where comp is missing
demographics[is.na(demographics$annual_comp), c("employee_id", "job_title", "location", "job_level")]
View(demographics)
demographics <- read.csv(file.choose()
demographics <- read.csv(file.choose())
demographics <- read.csv(file.choose())
# Return employee characteristics where comp is missing
demographics[is.na(demographics$annual_comp), c("employee_id", "job_title", "location", "job_level")]
formals(print.data.frame)$row.names <- FALSE
# Return employee characteristics where comp is missing
demographics[is.na(demographics$annual_comp), c("employee_id", "job_title", "location", "job_level")]
# Load SQL library
library(sqldf)
# Read employee demographics data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Return row and column counts
dim(demographics)
# Store SQL query as a character string using the paste() function
sql_string <- paste("SELECT
employee_id
FROM
demographics
WHERE
team = 'Social Marketing'
LIMIT 10")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
AVG(org_tenure)
FROM
demographics
WHERE
team = 'Social Marketing'
GROUP BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
demographics
WHERE
team = 'Social Marketing'
GROUP BY
job_title
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
demographics
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Partition select columns into three data frames
job_df <- demographics[, c("employee_id", "job_title")]
tenure_df <- demographics[, c("employee_id", "org_tenure")]
team_df <- demographics[, c("employee_id", "team")]
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
team_df
ON
job_df.employee_id = team_df.employee_id
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
LEFT JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
LEFT JOIN
team_df
ON
job_df.employee_id = team_df.employee_id
WHERE
team = 'Social Marketing'
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
LEFT JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
WHERE
job_df.employee_id IN (SELECT employee_id FROM team_df WHERE team = 'Social Marketing')
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT
job_title,
COUNT(*) AS employee_cnt,
AVG(org_tenure) AS avg_org_tenure
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
GROUP BY
job_title
HAVING
COUNT(*) > 10
ORDER BY
job_title")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
# Limit output to 10 records since query does not collapse records
# Since employee_id is a column in multiple tables used in this query, we need to indicate a specific table in order to include employee_id in the output
sql_string <- paste("SELECT
job_df.employee_id,
job_title,
org_tenure,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
ORDER BY
job_title,
org_tenure_rank
LIMIT 10")
# Execute SQL query
sqldf(sql_string)
# Store SQL query as a character string
sql_string <- paste("SELECT tbl.*
FROM
(SELECT
job_df.employee_id,
job_title,
org_tenure,
RANK () OVER (PARTITION BY job_title ORDER BY org_tenure DESC) AS org_tenure_rank
FROM
job_df
INNER JOIN
tenure_df
ON
job_df.employee_id = tenure_df.employee_id
INNER JOIN
(SELECT employee_id FROM team_df WHERE team = 'Social Marketing') social_mktg_ids
ON
job_df.employee_id = social_mktg_ids.employee_id
ORDER BY
job_title,
org_tenure_rank) tbl
WHERE
tbl.org_tenure_rank = 1")
# Execute SQL query
sqldf(sql_string)
# Summarize df
summary(demographics)
# Return employee characteristics where comp is missing
demographics[is.na(demographics$annual_comp), c("employee_id", "job_title", "location", "job_level")]
# Return employee characteristics where comp is missing
demographics[is.na(demographics$annual_comp), c("employee_id", "job_title", "location", "job_level")]
# Read employee demographics data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
View(demographics)
unique(demographics$division)
View(demographics)
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/confidence_intervals.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/type_1_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/type_2_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/type_1_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/type_1_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/type_2_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/type_1_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/type_2_table.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/dw_schema.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/dw_schema.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/dw_schema.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/dw_erd.png")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/graphics/data_scientist_tasks.jpeg")
# Load SQL library
library(sqldf)
# Read employee demographics data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Read employee demographics data
demographics <- read.csv("https://raw.githubusercontent.com/crstarbuck/peopleanalytics_lifecycle_book/master/data/files/employee_demographics.csv")
# Read employee demographics data
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employee_demographics.csv")
# Read employee demographics data
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employee_demographics.csv")
# Read employee demographics data
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/files/employee_demographics.csv")
# Read employee demographics data
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/files/employee_demographics.csv")
contrasts(demographics$gender
contrasts(demographics$gender)
contrasts(as.factor(demographics$gender))
View(demographics)
contrasts(as.factor(demographics$division))
model.matrix(~division, data = demographics)
model.matrix(~division-1, data = demographics)
head(onehot_ethnicity)
onehot_ethnicity <- model.matrix(~division-1, data = demographics)
head(onehot_ethnicity)
unique(demographics$division)
unique(demographics$gender)
# Gender one-hot encoding
onehot_ethnicity <- model.matrix(~division-1, data = demographics)
head(onehot_ethnicity)
# Count by division
demographics %>% count(division)
# Load library
library(dplyr)
# Count by division
demographics %>% count(division)
# Count by job
demographics %>% count(job_title)
# Count by location
demographics %>% count(location)
# Count by location
demographics %>% count(location) %>% sort(n)
# Count by location
demographics %>% count(location) %>% sort = TRUE
# Count by location
demographics %>% count(location, sort = TRUE)
# Division one-hot encoding
division_ohe <- model.matrix(~division-1, data = demographics[!demographics$division == 'Operations Center - St. Louis', ])
head(division_ohe)
# Location one-hot encoding
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == 'Operations Center - St. Louis', ])
head(location_ohe)
# Count by location
location_cnts <- demographics %>% count(location, sort = TRUE)
nrow(location_cnts)
# Count by location
locations <- demographics %>% count(location, sort = TRUE)
locations[nrow(location_cnts), ]
locations[nrow(location_cnts), "location"]
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
min_location <- locations[nrow(location_cnts), "location"]
# Location one-hot encoding, omitting category with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == min_location, ])
head(location_ohe)
# Gender one-hot encoding
demographics$gender_ohe <- ifelse(demographics$gender == 'Female', 1, 0)
head(demographics$gender_ohe)
head(demographics[, c("employee_id", "gender_ohe")])
# Return unique values of gender field
unique(demographics$gender)
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
# Store location with smallest n-count
min_location <- locations[nrow(location_cnts), "location"]
# Display location with smallest n-count
min_location
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
# Display counts by location
locations
# Store location with smallest n-count
min_location <- locations[nrow(location_cnts), "location"]
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == min_location, ])
head(location_ohe)
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == min_location, ])
head(location_ohe)
demographics <- cbind(location_ohe)
# Read employee demographics data
demographics <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/files/employee_demographics.csv")
# Gender one-hot encoding
demographics$gender_ohe <- ifelse(demographics$gender == 'Female', 1, 0)
# Preview records
head(demographics[, c("employee_id", "gender_ohe")])
# Determine location with lowest n-count
locations <- demographics %>% count(location, sort = TRUE)
# Display counts by location
locations
# Store location with smallest n-count
min_location <- locations[nrow(location_cnts), "location"]
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics[!demographics$location == min_location, ])
head(location_ohe)
demographics <- cbind(demographics, location_ohe)
# Location one-hot encoding
# Omit location with lowest n-count
location_ohe <- model.matrix(~location-1, data = demographics)
head(location_ohe)
