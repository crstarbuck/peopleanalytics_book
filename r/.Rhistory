View(employees_trans)
employees <- subset(employees, select = -c("employee_id", "ytd_leads", "ytd_sales"))
employees <- subset(employees, select = -c(employee_id, ytd_leads, ytd_sales))
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Filter employee data to numeric variables
idx <- which(sapply(employees, is.numeric))
employees <- employees[, idx]
# Drop employee_id and sparsely populated sales variables
employees <- subset(employees, select = -c(employee_id, ytd_leads, ytd_sales))
# Center and scale data
employees_trans <- scale(employees, center = TRUE, scale = TRUE)
View(employees_trans)
?fviz_nbclust
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
# Load library
library(factoextra)
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
summary(employees_trans)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Filter employee data to numeric variables
idx <- which(sapply(employees, is.numeric)) # store indices of numeric variables
employees <- employees[, idx] # filter df using indices
# Drop unimportant and sparsely populated sales variables
employees <- subset(employees, select = -c(employee_id, standard_hrs, ytd_leads, ytd_sales))
# Center and scale data
employees_trans <- scale(employees, center = TRUE, scale = TRUE)
# Load library
library(factoextra)
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
# Load library
library(factoextra)
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
factoextra::kmeans(employees_trans, centers = 3)
?kmeans
kmeans(employees_trans, centers = 3)
# Perform K-means clustering
km <- kmeans(employees_trans, centers = 3)
km$centers
km$cluster
km$withinss
km$size
fviz_cluster(km, data = employee_trans)
# Calculate mean of each cluster
aggregate(employee_trans, by = list(cluster = km$cluster), mean)
# Calculate mean of each cluster
aggregate(employees_trans, by = list(cluster = km$cluster), mean)
# Calculate mean of each cluster
aggregate(employees, by = list(cluster = km$cluster), mean)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Filter employee data to numeric variables
idx <- which(sapply(employees, is.numeric)) # store indices of numeric variables
employees <- employees[, idx] # filter df using indices
# Drop unimportant and sparsely populated sales variables
employees <- subset(employees, select = -c(employee_id, standard_hrs, ytd_leads, ytd_sales))
# Center and scale data
employees_trans <- scale(employees, center = TRUE, scale = TRUE)
# Load library
library(factoextra)
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
# Perform K-means clustering
km <- kmeans(employees_trans, centers = 3)
# Return n-count of clusters
km$size
# Calculate mean of each cluster using original data
aggregate(employees, by = list(cluster = km$cluster), mean)
592+603+275
# Add cluster assignment to df
employees$cluster <- cbind(employees, cluster = km$cluster)
View(employees)
# Add cluster assignment to df
employees$km_cluster <- cbind(employees, cluster = km$cluster)
View(employees)
# Add cluster assignment to df
employees['km_cluster'] <- cbind(employees, cluster = km$cluster)
View(employees)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Filter employee data to numeric variables
idx <- which(sapply(employees, is.numeric)) # store indices of numeric variables
employees <- employees[, idx] # filter df using indices
# Drop unimportant and sparsely populated sales variables
employees <- subset(employees, select = -c(employee_id, standard_hrs, ytd_leads, ytd_sales))
# Center and scale data
employees_trans <- scale(employees, center = TRUE, scale = TRUE)
# Load library
library(factoextra)
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
# Perform K-means clustering
km <- kmeans(employees_trans, centers = 3)
# Return n-count of clusters
km$size
# Calculate mean of each cluster using original data
aggregate(employees, by = list(cluster = km$cluster), mean)
# Add cluster assignment to df
employees['km_cluster'] <- cbind(employees, cluster = km$cluster)
View(employees)
employees %>% group_by(km_cluster)
library(dplyr)
employees %>% group_by(km_cluster)
employees %>% group_by(km_cluster) %>% summarise(n = n())
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Filter employee data to numeric variables
idx <- which(sapply(employees, is.numeric)) # store indices of numeric variables
employees <- employees[, idx] # filter df using indices
# Drop unimportant and sparsely populated sales variables
employees <- subset(employees, select = -c(employee_id, standard_hrs, ytd_leads, ytd_sales))
# Center and scale data
employees_trans <- scale(employees, center = TRUE, scale = TRUE)
# Load library
library(factoextra)
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
# Perform K-means clustering
km <- kmeans(employees_trans, centers = 3)
# Return n-count of clusters
km$size
# Return n-count of clusters
km$size
# Add cluster assignment to df
employees['km_cluster'] <- cbind(employees, cluster = km$cluster)
km$cluster
employees$cluster <- cbind(employees, cluster = km$cluster)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Filter employee data to numeric variables
idx <- which(sapply(employees, is.numeric)) # store indices of numeric variables
employees <- employees[, idx] # filter df using indices
# Drop unimportant and sparsely populated sales variables
employees <- subset(employees, select = -c(employee_id, standard_hrs, ytd_leads, ytd_sales))
# Center and scale data
employees_trans <- scale(employees, center = TRUE, scale = TRUE)
# Load library
library(factoextra)
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
# Perform K-means clustering
km <- kmeans(employees_trans, centers = 3)
# Return n-count of clusters
km$size
# Calculate mean of each cluster using original data
aggregate(employees, by = list(cluster = km$cluster), mean)
# Add cluster assignment to df
employees <- cbind(employees, cluster = km$cluster)
View(employees)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Filter employee data to numeric variables
idx <- which(sapply(employees, is.numeric)) # store indices of numeric variables
employees <- employees[, idx] # filter df using indices
# Drop unimportant and sparsely populated sales variables
employees <- subset(employees, select = -c(employee_id, standard_hrs, ytd_leads, ytd_sales))
# Center and scale data
employees_trans <- scale(employees, center = TRUE, scale = TRUE)
# Load library
library(factoextra)
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
# Perform K-means clustering
km <- kmeans(employees_trans, centers = 3)
# Perform K-means clustering
km <- kmeans(employees_trans, centers = 3)
# Return n-count of clusters
km$size
# Calculate mean of each cluster using original data
aggregate(employees, by = list(cluster = km$cluster), mean)
# Add cluster assignment to df
employees <- cbind(employees, cluster = km$cluster)
# Load employee data
employees <- read.csv("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_lifecycle_book/data/employees.csv")
# Filter employee data to numeric variables
idx <- which(sapply(employees, is.numeric)) # store indices of numeric variables
employees <- employees[, idx] # filter df using indices
# Drop unimportant and sparsely populated sales variables
employees <- subset(employees, select = -c(employee_id, standard_hrs, ytd_leads, ytd_sales))
# Center and scale data
employees_trans <- scale(employees, center = TRUE, scale = TRUE)
# Load library
library(factoextra)
# Determine optimal number of clusters
factoextra::fviz_nbclust(employees_trans, kmeans, method = "wss")
# Perform K-means clustering
km <- kmeans(employees_trans, centers = 3)
# Return n-count of clusters
km$size
# Calculate mean of each cluster using original data
aggregate(employees, by = list(cluster = km$cluster), mean)
# Add cluster assignment to df
employees <- cbind(employees, km_cluster = km$cluster)
View(employees)
subset(employees, select = -(km_cluster))
employees <- subset(employees, select = -(km_cluster))
# Define linkage methods
methods <- c("complete", "single", "average", "centroid", "ward")
names(methods) <- c("complete", "single", "average", "centroid", "ward")
# Create function to compute agglomerative coefficient
agg_coeff <- function(x) {
agnes(employees_trans, method = x)$ac
}
# Compute agglomerative coefficient for each linkage method
sapply(methods, agg_coeff)
library(factoextra)
# Compute agglomerative coefficient for each linkage method
sapply(methods, agg_coeff)
library(cluster)
# Load library
library(cluster)
# Define linkage methods
methods <- c("complete", "single", "average", "centroid", "ward")
names(methods) <- c("complete", "single", "average", "centroid", "ward")
# Create function to compute agglomerative coefficient
agg_coeff <- function(x) {
cluster::agnes(employees_trans, method = x)$ac
}
# Compute agglomerative coefficient for each linkage method
sapply(methods, agg_coeff)
# Load library
library(cluster)
# Define linkage methods
methods <- c("complete", "single", "average", "centroid", "ward")
names(methods) <- c("complete", "single", "average", "centroid", "ward")
# Create function to compute agglomerative coefficient
agg_coeff <- function(x) {
print(x)
cluster::agnes(employees_trans, method = x)$ac
}
# Compute agglomerative coefficient for each linkage method
sapply(methods, agg_coeff)
?agnes
# Load library
library(cluster)
# Define linkage methods
# Note: centroid is not available for forthcoming agnes() function
methods <- c("complete", "single", "average", "ward")
names(methods) <- c("complete", "single", "average", "ward")
# Create function to compute agglomerative coefficient
agg_coeff <- function(x) {
print(x)
cluster::agnes(employees_trans, method = x)$ac
}
# Compute agglomerative coefficient for each linkage method
sapply(methods, agg_coeff)
# Perform hierarchical clustering using Ward's linkage method
hclust <- cluster::agnes(employees_trans, method = "ward")
cluster::pltree(hclust, main = "Dendogram")
cluster::pltree(hclust, hang = -1, main = "Dendogram")
cluster::pltree(hclust, cex = .6, hang = -1, main = "Dendogram")
cluster::pltree(hclust, cex = .6, main = "Dendogram")
cluster::pltree(hclust, main = "Dendogram")
# Calculate gap statistic across 1-10 clusters
gap_stat <- cluster::clusGap(employee_trans, FUN = hcut, nstart = 25, K.max = 10, B = 50)
# Calculate gap statistic across 1-10 clusters
gap_stat <- cluster::clusGap(employees_trans, FUN = hcut, nstart = 25, K.max = 10, B = 50)
# Calculate gap statistic across 1-10 clusters
gap_stat <- cluster::clusGap(employees_trans, FUN = hcut, nstart = 25, K.max = 10, B = 50)
# Generate plot of gap statistic against cluster count
factoextra::fviz_gap_stat(gap_stat)
View(employees)
# Compute distance matrix
d_matrix <- dist(employees_trans, method = "euclidean")
# Perform hierarchical clustering using Ward's method
hclust_final <- hclust(d_matrix, method = "ward.D2" )
# Cut the dendogram into 7 clusters
groups <- cutree(hclust_final, k = 7)
# Append cluster labels to original data
employees <- cbind(employees, hier_cluster = groups)
library(peopledata)
install.packages("peopledata", dependencies = TRUE)
library(peopledata)
load(peopledata)
peopledata
library(people_data)
?peopledata
(80-40)/40
(80-40)/80
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_book/graphics/preattentive_attributes.png")
150000*4000
# Load library
library(ggplot2)
year <- as.Date(c('2022', '2021', '2020', '2019'))
year <- c('2022', '2021', '2020', '2019')
labor_cost <- c(878800, 676000, 520000, 400000)
yea
year
labor_cost
lc_data <- data.frame(year, labor_cost)
lc_data
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("#0080FF", "#B8BDBF"))
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip()
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("#0080FF", "#B8BDBF"))
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_color_manual(values = c("#F2F2F2", "#F2F2F2", "#F2F2F2", "#B8BDBF"))
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values = c("#F2F2F2", "#F2F2F2", "#F2F2F2", "#B8BDBF"))
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
#ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values = c("#F2F2F2", "#F2F2F2", "#F2F2F2", "#B8BDBF"))
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values = c("#F2F2F2", "#F2F2F2", "#F2F2F2", "#B8BDBF"))
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_fill_grey()
# Define colors
colors <- c("#F2F2F2", "#F2F2F2", "#F2F2F2", "#B8BDBF")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip()
ggplot2::scale_fill_manual(values = c("#B8BDBF", "#F2F2F2", "#F2F2F2", "#F2F2F2"))
# Define colors
colors <- c("#B8BDBF", "#F2F2F2", "#F2F2F2", "#F2F2F2")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip()
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot::theme(legend.position = "none")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none",
panel.background = element_blank())
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::theme(legend.position = "none") +
ggplot2::theme_bw()
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "none")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(colour = "#404040"),
axis.title.y = element_text(colour = "#404040"),
legend.position = "none")
# Define colors
colors <- c("blue", "#F2F2F2", "#F2F2F2", "#F2F2F2")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(colour = "#404040"),
axis.title.y = element_text(colour = "#404040"),
legend.position = "none")
# Define colors
colors <- c("blue", "grey", "#F2F2F2", "#F2F2F2")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(colour = "#404040"),
axis.title.y = element_text(colour = "#404040"),
legend.position = "none")
# Define colors
colors <- c("blue", "grey", "grey", "grey")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = colors)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(colour = "#404040"),
axis.title.y = element_text(colour = "#404040"),
legend.position = "none")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = year)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
scale_fill_manual(values = c("A" = "black", "B" = "orange", "C" = "blue")) +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(colour = "#404040"),
axis.title.y = element_text(colour = "#404040"),
legend.position = "none")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = year)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
scale_fill_manual(values = c("2022" = "blue", "2021" = "grey", "2020" = "grey", "2019" = "grey")) +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(colour = "#404040"),
axis.title.y = element_text(colour = "#404040"),
legend.position = "none")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = year)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values = c("2022" = "orange", "2021" = "grey", "2020" = "grey", "2019" = "grey")) +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(colour = "#404040"),
axis.title.y = element_text(colour = "#404040"),
legend.position = "none")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = year)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values = c("2022" = "#C65911", "2021" = "grey", "2020" = "grey", "2019" = "grey")) +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(colour = "#404040"),
axis.title.y = element_text(colour = "#404040"),
legend.position = "none")
# Visualize data
ggplot2::ggplot(lc_data, aes(x = year, y = labor_cost, fill = year)) +
ggplot2::labs(x = 'Year', y = 'Labor Cost (in thousands)') +
ggplot2::geom_bar(stat = "identity") +
ggplot2::coord_flip() +
ggplot2::scale_fill_manual(values = c("2022" = "#ED7D31", "2021" = "grey", "2020" = "grey", "2019" = "grey")) +
ggplot2::theme(panel.background = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_text(colour = "#404040"),
axis.title.y = element_text(colour = "#404040"),
legend.position = "none")
knitr::include_graphics("/Users/craig.starbuck/Library/Mobile Documents/com~apple~CloudDocs/Documents/People Analytics Book/GitHub/peopleanalytics_book/graphics/preattentive_attributes.png")
